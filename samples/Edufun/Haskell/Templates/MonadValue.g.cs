// Copyright (c) Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
//
// Runtime Version: 4.0.30319.42000
// Microsoft.VisualStudio.TextTemplating: 14.0
// </auto-generated>
//------------------------------------------------------------------------------

using global::Narvalo;
using global::Narvalo.Fx;

namespace Edufun.Haskell.Templates
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    using Edufun.Haskell.Templates.Internal;
    using Edufun.Haskell.Templates.Linq;

    // Provides a set of static methods for MonadValue<T>.
    public static partial class MonadValue
    {
        /// <summary>
        /// The unique object of type <c>MonadValue&lt;Unit&gt;</c>.
        /// </summary>
        private static readonly MonadValue<global::Narvalo.Fx.Unit> s_Unit = Of(global::Narvalo.Fx.Unit.Single);

        /// <summary>
        /// Gets the unique object of type <c>MonadValue&lt;Unit&gt;</c>.
        /// </summary>
        public static MonadValue<global::Narvalo.Fx.Unit> Unit => s_Unit;

        /// <summary>
        /// Gets the zero for <see cref="MonadValue{T}.Bind"/>.
        /// </summary>
        public static MonadValue<global::Narvalo.Fx.Unit> None => MonadValue<global::Narvalo.Fx.Unit>.None;

        /// <summary>
        /// Obtains an instance of the <see cref="MonadValue{T}"/> class for the specified value.
        /// </summary>
        /// <typeparam name="T">The underlying type of <paramref name="value"/>.</typeparam>
        /// <param name="value">A value to be wrapped into an object of type <see cref="MonadValue{T}"/>.</param>
        /// <returns>An instance of the <see cref="MonadValue{T}"/> class for the specified value.</returns>
        public static MonadValue<T> Of<T>(T value)
            where T : struct
            => MonadValue<T>.η(value);

        /// <summary>
        /// Removes one level of structure, projecting its bound value into the outer level.
        /// </summary>
        public static MonadValue<T> Flatten<T>(MonadValue<MonadValue<T>> square)
            where T : struct
            => MonadValue<T>.μ(square);

        public static MonadValue<global::Narvalo.Fx.Unit> Guard(bool predicate) => predicate ? Unit : None;

        /// <summary>
        /// Promotes a function to use and return <see cref="MonadValue{T}" /> values.
        /// </summary>
        public static Func<MonadValue<T>, MonadValue<TResult>> Lift<T, TResult>(
            Func<T, TResult> func)
            where T : struct
            where TResult : struct
            => arg =>
            {
                /* T4: NotNull(arg) */
                return arg.Select(func);
            };

        /// <summary>
        /// Promotes a function to use and return <see cref="MonadValue{T}" /> values.
        /// </summary>
        public static Func<MonadValue<T1>, MonadValue<T2>, MonadValue<TResult>>
            Lift<T1, T2, TResult>(Func<T1, T2, TResult> func)
            where T1 : struct
            where T2 : struct
            where TResult : struct
            => (arg1, arg2) =>
            {
                /* T4: NotNull(arg1) */
                return arg1.Zip(arg2, func);
            };

        /// <summary>
        /// Promotes a function to use and return <see cref="MonadValue{T}" /> values.
        /// </summary>
        public static Func<MonadValue<T1>, MonadValue<T2>, MonadValue<T3>, MonadValue<TResult>>
            Lift<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> func)
            where T1 : struct
            where T2 : struct
            where T3 : struct
            where TResult : struct
            => (arg1, arg2, arg3) =>
            {
                /* T4: NotNull(arg1) */
                return arg1.Zip(arg2, arg3, func);
            };

        /// <summary>
        /// Promotes a function to use and return <see cref="MonadValue{T}" /> values.
        /// </summary>
        public static Func<MonadValue<T1>, MonadValue<T2>, MonadValue<T3>, MonadValue<T4>, MonadValue<TResult>>
            Lift<T1, T2, T3, T4, TResult>(
            Func<T1, T2, T3, T4, TResult> func)
            where T1 : struct
            where T2 : struct
            where T3 : struct
            where T4 : struct
            where TResult : struct
            => (arg1, arg2, arg3, arg4) =>
            {
                /* T4: NotNull(arg1) */
                return arg1.Zip(arg2, arg3, arg4, func);
            };

        /// <summary>
        /// Promotes a function to use and return <see cref="MonadValue{T}" /> values.
        /// </summary>
        public static Func<MonadValue<T1>, MonadValue<T2>, MonadValue<T3>, MonadValue<T4>, MonadValue<T5>, MonadValue<TResult>>
            Lift<T1, T2, T3, T4, T5, TResult>(
            Func<T1, T2, T3, T4, T5, TResult> func)
            where T1 : struct
            where T2 : struct
            where T3 : struct
            where T4 : struct
            where T5 : struct
            where TResult : struct
            => (arg1, arg2, arg3, arg4, arg5) =>
            {
                /* T4: NotNull(arg1) */
                return arg1.Zip(arg2, arg3, arg4, arg5, func);
            };
    } // End of MonadValue - T4: EmitMonadCore().

    // Provides extension methods for MonadValue<T>.
    public static partial class MonadValue
    {
        public static MonadValue<TResult> Select<TSource, TResult>(
            this MonadValue<TSource> @this,
            Func<TSource, TResult> selector)
            where TSource : struct
            where TResult : struct
        {
            /* T4: NotNull(@this) */
            Require.NotNull(selector, nameof(selector));
            return @this.Bind(val => MonadValue.Of(selector(val)));
        }

        public static MonadValue<TResult> Replace<TSource, TResult>(
            this MonadValue<TSource> @this,
            TResult value)
            where TSource : struct
            where TResult : struct
        {
            /* T4: NotNull(@this) */
            return @this.Select(_ => value);
        }

        public static MonadValue<TResult> ReplaceBy<TSource, TResult>(
            this MonadValue<TSource> @this,
            MonadValue<TResult> other)
            where TSource : struct
            where TResult : struct
        {
            /* T4: NotNull(@this) */
            return @this.Bind(_ => other);
        }

        public static MonadValue<TResult> If<TSource, TResult>(
            this MonadValue<TSource> @this,
            Func<TSource, bool> predicate,
            MonadValue<TResult> thenResult)
            where TSource : struct
            where TResult : struct
        {
            /* T4: NotNull(@this) */
            Require.NotNull(predicate, nameof(predicate));
            return @this.Bind(val => predicate(val) ? thenResult : MonadValue<TResult>.None);
        }

        public static MonadValue<TResult> Coalesce<TSource, TResult>(
            this MonadValue<TSource> @this,
            Func<TSource, bool> predicate,
            MonadValue<TResult> thenResult,
            MonadValue<TResult> elseResult)
            where TSource : struct
            where TResult : struct
        {
            /* T4: NotNull(@this) */
            Require.NotNull(predicate, nameof(predicate));
            return @this.Bind(val => predicate(val) ? thenResult : elseResult);
        }

        public static MonadValue<global::Narvalo.Fx.Unit> Skip<TSource>(this MonadValue<TSource> @this)
            where TSource : struct
        {
            /* T4: NotNull(@this) */
            return @this.ReplaceBy(Unit);
        }

        public static MonadValue<TSource> Where<TSource>(
            this MonadValue<TSource> @this,
            Func<TSource, bool> predicate)
            where TSource : struct
        {
            /* T4: NotNull(@this) */
            Require.NotNull(predicate, nameof(predicate));
            return @this.Bind(val => predicate(val) ? MonadValue.Of(val) : MonadValue<TSource>.None);
        }

        public static MonadValue<TResult> Using<TSource, TResult>(
            this MonadValue<TSource> @this,
            Func<TSource, MonadValue<TResult>> selector)
            where TSource : struct, IDisposable
            where TResult : struct
        {
            /* T4: NotNull(@this) */
            Require.NotNull(selector, nameof(selector));
            return @this.Bind(val => { using (val) { return selector(val); } });
        }

        public static MonadValue<TResult> Using<TSource, TResult>(
            this MonadValue<TSource> @this,
            Func<TSource, TResult> selector)
            where TSource : struct, IDisposable
            where TResult : struct
        {
            /* T4: NotNull(@this) */
            Require.NotNull(selector, nameof(selector));
            return @this.Select(val => { using (val) { return selector(val); } });
        }

        #region Zip()

        /// <see cref="Lift{T1, T2, T3}" />
        public static MonadValue<TResult> Zip<TFirst, TSecond, TResult>(
            this MonadValue<TFirst> @this,
            MonadValue<TSecond> second,
            Func<TFirst, TSecond, TResult> zipper)
            where TFirst : struct
            where TSecond : struct
            where TResult : struct
        {
            /* T4: NotNull(@this) */
            /* T4: NotNull(second) */
            Require.NotNull(zipper, nameof(zipper));

            return @this.Bind(
                arg1 => second.Select(
                    arg2 => zipper(arg1, arg2)));
        }

        /// <see cref="Lift{T1, T2, T3, T4}" />
        public static MonadValue<TResult> Zip<T1, T2, T3, TResult>(
            this MonadValue<T1> @this,
            MonadValue<T2> second,
            MonadValue<T3> third,
            Func<T1, T2, T3, TResult> zipper)
            where T1 : struct
            where T2 : struct
            where T3 : struct
            where TResult : struct
        {
            /* T4: NotNull(@this) */
            /* T4: NotNull(second) */
            /* T4: NotNull(third) */
            Require.NotNull(zipper, nameof(zipper));

            return @this.Bind(
                arg1 => second.Bind(
                    arg2 => third.Select(
                        arg3 => zipper(arg1, arg2, arg3))));
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5}" />
        public static MonadValue<TResult> Zip<T1, T2, T3, T4, TResult>(
             this MonadValue<T1> @this,
             MonadValue<T2> second,
             MonadValue<T3> third,
             MonadValue<T4> fourth,
             Func<T1, T2, T3, T4, TResult> zipper)
            where T1 : struct
            where T2 : struct
            where T3 : struct
            where T4 : struct
            where TResult : struct
        {
            /* T4: NotNull(@this) */
            /* T4: NotNull(second) */
            /* T4: NotNull(third) */
            /* T4: NotNull(fourth) */
            Require.NotNull(zipper, nameof(zipper));

            return @this.Bind(
                arg1 => second.Bind(
                    arg2 => third.Bind(
                        arg3 => fourth.Select(
                            arg4 => zipper(arg1, arg2, arg3, arg4)))));
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5, T6}" />
        public static MonadValue<TResult> Zip<T1, T2, T3, T4, T5, TResult>(
            this MonadValue<T1> @this,
            MonadValue<T2> second,
            MonadValue<T3> third,
            MonadValue<T4> fourth,
            MonadValue<T5> fifth,
            Func<T1, T2, T3, T4, T5, TResult> zipper)
            where T1 : struct
            where T2 : struct
            where T3 : struct
            where T4 : struct
            where T5 : struct
            where TResult : struct
        {
            /* T4: NotNull(@this) */
            /* T4: NotNull(second) */
            /* T4: NotNull(third) */
            /* T4: NotNull(fourth) */
            /* T4: NotNull(fifth) */
            Require.NotNull(zipper, nameof(zipper));

            return @this.Bind(
                arg1 => second.Bind(
                    arg2 => third.Bind(
                        arg3 => fourth.Bind(
                            arg4 => fifth.Select(
                                arg5 => zipper(arg1, arg2, arg3, arg4, arg5))))));
        }

        #endregion

        #region LINQ dialect

        /// <remarks>
        /// Kind of generalisation of <see cref="Zip{T1, T2, T3}" />.
        /// </remarks>
        public static MonadValue<TResult> SelectMany<TSource, TMiddle, TResult>(
            this MonadValue<TSource> @this,
            Func<TSource, MonadValue<TMiddle>> valueSelector,
            Func<TSource, TMiddle, TResult> resultSelector)
            where TSource : struct
            where TMiddle : struct
            where TResult : struct
        {
            /* T4: NotNull(@this) */
            Require.NotNull(valueSelector, nameof(valueSelector));
            Require.NotNull(resultSelector, nameof(resultSelector));

            return @this.Bind(
                val => valueSelector(val).Select(
                    middle => resultSelector(val, middle)));
        }

        public static MonadValue<TResult> Join<TSource, TInner, TKey, TResult>(
            this MonadValue<TSource> @this,
            MonadValue<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector)
            where TSource : struct
            where TInner : struct
            where TKey : struct
            where TResult : struct
            => JoinImpl(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                EqualityComparer<TKey>.Default);

        public static MonadValue<TResult> Join<TSource, TInner, TKey, TResult>(
            this MonadValue<TSource> @this,
            MonadValue<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
            where TSource : struct
            where TInner : struct
            where TKey : struct
            where TResult : struct
            => JoinImpl(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                comparer ?? EqualityComparer<TKey>.Default);

        public static MonadValue<TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this MonadValue<TSource> @this,
            MonadValue<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, MonadValue<TInner>, TResult> resultSelector)
            where TSource : struct
            where TInner : struct
            where TKey : struct
            where TResult : struct
            => GroupJoinImpl(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                EqualityComparer<TKey>.Default);

        public static MonadValue<TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this MonadValue<TSource> @this,
            MonadValue<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, MonadValue<TInner>, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
            where TSource : struct
            where TInner : struct
            where TKey : struct
            where TResult : struct
            => GroupJoinImpl(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                comparer ?? EqualityComparer<TKey>.Default);

        private static MonadValue<TResult> JoinImpl<TSource, TInner, TKey, TResult>(
            MonadValue<TSource> outer,
            MonadValue<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
            where TSource : struct
            where TInner : struct
            where TKey : struct
            where TResult : struct
        {
            /* T4: NotNull(outer) */
            /* T4: NotNull(inner) */
            Require.NotNull(resultSelector, nameof(resultSelector));
            Require.NotNull(outerKeySelector, nameof(outerKeySelector));
            Require.NotNull(innerKeySelector, nameof(innerKeySelector));
            Require.NotNull(comparer, nameof(comparer));

            var keyLookup = GetKeyLookup(inner, outerKeySelector, innerKeySelector, comparer);

            return outer.SelectMany(val => keyLookup(val).ReplaceBy(inner), resultSelector);
        }

        private static MonadValue<TResult> GroupJoinImpl<TSource, TInner, TKey, TResult>(
            MonadValue<TSource> outer,
            MonadValue<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, MonadValue<TInner>, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
            where TSource : struct
            where TInner : struct
            where TKey : struct
            where TResult : struct
        {
            /* T4: NotNull(outer) */
            /* T4: NotNull(inner) */
            Require.NotNull(resultSelector, nameof(resultSelector));
            Require.NotNull(outerKeySelector, nameof(outerKeySelector));
            Require.NotNull(innerKeySelector, nameof(innerKeySelector));
            Require.NotNull(comparer, nameof(comparer));

            var keyLookup = GetKeyLookup(inner, outerKeySelector, innerKeySelector, comparer);

            return outer.Select(val => resultSelector(val, keyLookup(val).ReplaceBy(inner)));
        }

        private static Func<TSource, MonadValue<TKey>> GetKeyLookup<TSource, TInner, TKey>(
            MonadValue<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            IEqualityComparer<TKey> comparer)
            where TSource : struct
            where TInner : struct
            where TKey : struct
        {
            Demand.NotNull(outerKeySelector);
            Demand.NotNull(innerKeySelector);
            Demand.NotNull(comparer);

            return arg =>
            {
                TKey outerKey = outerKeySelector(arg);

                return inner.Select(innerKeySelector)
                    .Where(key => comparer.Equals(key, outerKey));
            };
        }

        #endregion
    } // End of MonadValue - T4: EmitMonadExtensions().

    // Provides extension methods for Func<T> in the Kleisli category.
    public static partial class Kleisli
    {

        public static MonadValue<TResult> Invoke<TSource, TResult>(
            this Func<TSource, MonadValue<TResult>> @this,
            MonadValue<TSource> value)
            where TSource : struct
            where TResult : struct
        {
            /* T4: NotNull(value) */
            return value.Bind(@this);
        }

        public static Func<TSource, MonadValue<TResult>> Compose<TSource, TMiddle, TResult>(
            this Func<TSource, MonadValue<TMiddle>> first,
            Func<TMiddle, MonadValue<TResult>> second)
            where TSource : struct
            where TMiddle : struct
            where TResult : struct
        {
            Require.NotNull(first, nameof(first));
            return arg => first(arg).Bind(second);
        }

        public static Func<TSource, MonadValue<TResult>> ComposeBack<TSource, TMiddle, TResult>(
            this Func<TMiddle, MonadValue<TResult>> first,
            Func<TSource, MonadValue<TMiddle>> second)
            where TSource : struct
            where TMiddle : struct
            where TResult : struct
        {
            Require.NotNull(second, nameof(second));
            return arg => second(arg).Bind(first);
        }
    } // End of Kleisli - T4: EmitKleisliExtensions().

    // Provides extension methods for IEnumerable<MonadValue<T>>.
    public static partial class MonadValue
    {
        public static MonadValue<TSource> Sum<TSource>(
            this IEnumerable<MonadValue<TSource>> @this)
            where TSource : struct
            => @this.SumImpl();
    } // End of Sequence - T4: EmitMonadEnumerableExtensions().
}

namespace Edufun.Haskell.Templates.Internal
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    using Narvalo.Fx.Linq;

    // Provides default implementations for the extension methods for IEnumerable<MonadValue<T>>.
    // You will certainly want to override them to improve performance.
    internal static partial class EnumerableExtensions
    {
        internal static MonadValue<TSource> SumImpl<TSource>(
            this IEnumerable<MonadValue<TSource>> @this)
            where TSource : struct
        {
            Demand.NotNull(@this);

            return @this.Aggregate(MonadValue<TSource>.None, (m, n) => m.OrElse(n));
        }
    } // End of EnumerableExtensions - T4: EmitMonadEnumerableInternalExtensions().
}

namespace Edufun.Haskell.Templates.Linq
{
    using System;
    using System.Collections.Generic;

    using Edufun.Haskell.Templates;
    using Edufun.Haskell.Templates.Internal;

    // Provides extension methods for IEnumerable<T>.
    // We do not use the standard LINQ names to avoid a confusing API.
    // - Select    -> SelectWith
    // - Where     -> WhereBy
    // - Zip       -> ZipWith
    // - Aggregate -> Reduce or Fold
    public static partial class Qperators
    {
        public static MonadValue<TAccumulate> Fold<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, MonadValue<TAccumulate>> accumulator)
            where TSource : struct
            where TAccumulate : struct
            => @this.FoldImpl(seed, accumulator);

        public static MonadValue<TAccumulate> FoldBack<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, MonadValue<TAccumulate>> accumulator)
            where TSource : struct
            where TAccumulate : struct
            => @this.FoldBackImpl(seed, accumulator);

        public static MonadValue<TSource> Reduce<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, MonadValue<TSource>> accumulator)
            where TSource : struct
            => @this.ReduceImpl(accumulator);

        public static MonadValue<TSource> ReduceBack<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, MonadValue<TSource>> accumulator)
            where TSource : struct
            => @this.ReduceBackImpl(accumulator);

        // Haskell uses a different signature.
        public static MonadValue<TAccumulate> Fold<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, MonadValue<TAccumulate>> accumulator,
            Func<MonadValue<TAccumulate>, bool> predicate)
            where TSource : struct
            where TAccumulate : struct
            => @this.FoldImpl(seed, accumulator, predicate);

        // Haskell uses a different signature.
        public static MonadValue<TSource> Reduce<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, MonadValue<TSource>> accumulator,
            Func<MonadValue<TSource>, bool> predicate)
            where TSource : struct
            => @this.ReduceImpl(accumulator, predicate);
    } // End of Iterable - T4: EmitEnumerableExtensions().
}

namespace Edufun.Haskell.Templates.Internal
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    using Edufun.Haskell.Templates.Linq;
    using Narvalo.Fx.Linq;

    // Provides default implementations for the extension methods for IEnumerable<T>.
    // You will certainly want to override them to improve performance.
    internal static partial class EnumerableExtensions
    {
        internal static MonadValue<TAccumulate> FoldImpl<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, MonadValue<TAccumulate>> accumulator)
            where TSource : struct
            where TAccumulate : struct
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(accumulator, nameof(accumulator));

            Func<MonadValue<TAccumulate>, TSource, MonadValue<TAccumulate>> func
                = (arg1, arg2) => arg1.Bind(arg => accumulator(arg, arg2));

            return @this.Aggregate(MonadValue.Of(seed), func);
        }

        internal static MonadValue<TAccumulate> FoldBackImpl<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, MonadValue<TAccumulate>> accumulator)
            where TSource : struct
            where TAccumulate : struct
        {
            Demand.NotNull(@this);
            Demand.NotNull(accumulator);

            return @this.Reverse().Fold(seed, accumulator);
        }

        internal static MonadValue<TSource> ReduceImpl<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, MonadValue<TSource>> accumulator)
            where TSource : struct
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(accumulator, nameof(accumulator));

            using (var iter = @this.GetEnumerator())
            {
                if (!iter.MoveNext())
                {
                    throw new InvalidOperationException("Source sequence was empty.");
                }

                MonadValue<TSource> retval = MonadValue.Of(iter.Current);

                while (iter.MoveNext())
                {
                    retval = retval.Bind(_ => accumulator.Invoke(_, iter.Current));
                }

                return retval;
            }
        }

        internal static MonadValue<TSource> ReduceBackImpl<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, MonadValue<TSource>> accumulator)
            where TSource : struct
        {
            Demand.NotNull(@this);
            Demand.NotNull(accumulator);

            return @this.Reverse().Reduce(accumulator);
        }

        internal static MonadValue<TAccumulate> FoldImpl<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, MonadValue<TAccumulate>> accumulator,
            Func<MonadValue<TAccumulate>, bool> predicate)
            where TSource : struct
            where TAccumulate : struct
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(accumulator, nameof(accumulator));
            Require.NotNull(predicate, nameof(predicate));

            MonadValue<TAccumulate> retval = MonadValue.Of(seed);

            using (var iter = @this.GetEnumerator())
            {
                while (predicate.Invoke(retval) && iter.MoveNext())
                {
                    retval = retval.Bind(_ => accumulator.Invoke(_, iter.Current));
                }
            }

            return retval;
        }

        internal static MonadValue<TSource> ReduceImpl<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, MonadValue<TSource>> accumulator,
            Func<MonadValue<TSource>, bool> predicate)
            where TSource : struct
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(accumulator, nameof(accumulator));
            Require.NotNull(predicate, nameof(predicate));

            using (var iter = @this.GetEnumerator())
            {
                if (!iter.MoveNext())
                {
                    throw new InvalidOperationException("Source sequence was empty.");
                }

                MonadValue<TSource> retval = MonadValue.Of(iter.Current);

                while (predicate.Invoke(retval) && iter.MoveNext())
                {
                    retval = retval.Bind(_ => accumulator.Invoke(_, iter.Current));
                }

                return retval;
            }
        }
    } // End of EnumerableExtensions - T4: EmitEnumerableInternalExtensions().
}

