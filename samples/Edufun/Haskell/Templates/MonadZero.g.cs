// Copyright (c) Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
//
// Runtime Version: 4.0.30319.42000
// Microsoft.VisualStudio.TextTemplating: 14.0
// </auto-generated>
//------------------------------------------------------------------------------

using global::Narvalo;
using global::Narvalo.Fx;

namespace Edufun.Haskell.Templates
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    using Edufun.Haskell.Templates.Internal;
    using Edufun.Haskell.Templates.Linq;

    // Provides a set of static methods for MonadZero<T>.
    // NB: Sometimes we prefer extension methods over static methods to be able to override them locally.
    public static partial class MonadZero
    {
        /// <summary>
        /// The unique object of type <c>MonadZero&lt;Unit&gt;</c>.
        /// </summary>
        private static readonly MonadZero<global::Narvalo.Fx.Unit> s_Unit = Of(global::Narvalo.Fx.Unit.Single);

        /// <summary>
        /// Gets the unique object of type <c>MonadZero&lt;Unit&gt;</c>.
        /// </summary>
        /// <value>The unique object of type <c>MonadZero&lt;Unit&gt;</c>.</value>
        public static MonadZero<global::Narvalo.Fx.Unit> Unit
        {
            get
            {
                Warrant.NotNull<MonadZero<global::Narvalo.Fx.Unit>>();

                return s_Unit;
            }
        }


        /// <summary>
        /// Gets the zero for <see cref="MonadZero{T}"/>.
        /// </summary>
        /// <value>The zero for <see cref="MonadZero{T}"/>.</value>
        public static MonadZero<global::Narvalo.Fx.Unit> Zero
        {
            get
            {
                Warrant.NotNull<MonadZero<global::Narvalo.Fx.Unit>>();

                return MonadZero<global::Narvalo.Fx.Unit>.Zero;
            }
        }


        /// <summary>
        /// Obtains an instance of the <see cref="MonadZero{T}"/> class for the specified value.
        /// </summary>
        /// <typeparam name="T">The underlying type of <paramref name="value"/>.</typeparam>
        /// <param name="value">A value to be wrapped into a <see cref="MonadZero{T}"/> object.</param>
        /// <returns>An instance of the <see cref="MonadZero{T}"/> class for the specified value.</returns>
        public static MonadZero<T> Of<T>(T value)
            /* T4: C# indent */
        {
            Warrant.NotNull<MonadZero<T>>();

            return MonadZero<T>.η(value);
        }

        #region Generalisations of list functions

        /// <summary>
        /// Removes one level of structure, projecting its bound value into the outer level.
        /// </summary>
        public static MonadZero<T> Flatten<T>(MonadZero<MonadZero<T>> square)
            /* T4: C# indent */
        {
            Expect.NotNull(square);
            Warrant.NotNull<MonadZero<T>>();

            return MonadZero<T>.μ(square);
        }

        #endregion

        #region Conditional execution of monadic expressions


        public static MonadZero<global::Narvalo.Fx.Unit> Guard(bool predicate)
        {
            Warrant.NotNull<MonadZero<global::Narvalo.Fx.Unit>>();

            return predicate ? MonadZero.Unit : MonadZero<global::Narvalo.Fx.Unit>.Zero;
        }


        #endregion

        #region Monadic lifting operators

        /// <summary>
        /// Promotes a function to use and return <see cref="MonadZero{T}" /> values.
        /// </summary>
        public static Func<MonadZero<T>, MonadZero<TResult>> Lift<T, TResult>(
            Func<T, TResult> func)
            /* T4: C# indent */
        {
            Warrant.NotNull<Func<MonadZero<T>, MonadZero<TResult>>>();

            return m =>
            {
                Require.NotNull(m, nameof(m));
                return m.Select(func);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="MonadZero{T}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        public static Func<MonadZero<T1>, MonadZero<T2>, MonadZero<TResult>>
            Lift<T1, T2, TResult>(Func<T1, T2, TResult> func)
            /* T4: C# indent */
        {
            Warrant.NotNull<Func<MonadZero<T1>, MonadZero<T2>, MonadZero<TResult>>>();

            return (m1, m2) =>
            {
                Require.NotNull(m1, nameof(m1));
                return m1.Zip(m2, func);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="MonadZero{T}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        public static Func<MonadZero<T1>, MonadZero<T2>, MonadZero<T3>, MonadZero<TResult>>
            Lift<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> func)
            /* T4: C# indent */
        {
            Warrant.NotNull<Func<MonadZero<T1>, MonadZero<T2>, MonadZero<T3>, MonadZero<TResult>>>();

            return (m1, m2, m3) =>
            {
                Require.NotNull(m1, nameof(m1));
                return m1.Zip(m2, m3, func);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="MonadZero{T}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        public static Func<MonadZero<T1>, MonadZero<T2>, MonadZero<T3>, MonadZero<T4>, MonadZero<TResult>>
            Lift<T1, T2, T3, T4, TResult>(
            Func<T1, T2, T3, T4, TResult> func)
            /* T4: C# indent */
        {
            Warrant.NotNull<Func<MonadZero<T1>, MonadZero<T2>, MonadZero<T3>, MonadZero<T4>, MonadZero<TResult>>>();

            return (m1, m2, m3, m4) =>
            {
                Require.NotNull(m1, nameof(m1));
                return m1.Zip(m2, m3, m4, func);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="MonadZero{T}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        public static Func<MonadZero<T1>, MonadZero<T2>, MonadZero<T3>, MonadZero<T4>, MonadZero<T5>, MonadZero<TResult>>
            Lift<T1, T2, T3, T4, T5, TResult>(
            Func<T1, T2, T3, T4, T5, TResult> func)
            /* T4: C# indent */
        {
            Warrant.NotNull<Func<MonadZero<T1>, MonadZero<T2>, MonadZero<T3>, MonadZero<T4>, MonadZero<T5>, MonadZero<TResult>>>();

            return (m1, m2, m3, m4, m5) =>
            {
                Require.NotNull(m1, nameof(m1));
                return m1.Zip(m2, m3, m4, m5, func);
            };
        }

        #endregion
    } // End of MonadZero - T4: EmitMonadCore().

    // Provides extension methods for MonadZero<T>.
    public static partial class MonadZero
    {
        #region Applicative

        public static MonadZero<TResult> Replace<TSource, TResult>(
            this MonadZero<TSource> @this,
            TResult value)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Warrant.NotNull<MonadZero<TResult>>();

            return @this.Select(_ => value);
        }


        public static MonadZero<TResult> Gather<TSource, TResult>(
            this MonadZero<TSource> @this,
            MonadZero<Func<TSource, TResult>> applicative)
            /* T4: C# indent */
        {
            Require.NotNull(applicative, nameof(applicative));

            return applicative.Apply(@this);
        }

        public static MonadZero<TResult> Apply<TSource, TResult>(
            this MonadZero<Func<TSource, TResult>> @this,
            MonadZero<TSource> value)
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(value, nameof(value));

            return @this.Bind(func => value.Select(v => func.Invoke(v)));
        }

        public static MonadZero<Tuple<TSource, TOther>> Zip<TSource, TOther>(
            this MonadZero<TSource> @this,
            MonadZero<TOther> other)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));

            return @this.Zip(other, Tuple.Create);
        }


        #endregion

        #region Basic Monad functions

        public static MonadZero<TResult> Select<TSource, TResult>(
            this MonadZero<TSource> @this,
            Func<TSource, TResult> selector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(selector, nameof(selector));
            Warrant.NotNull<MonadZero<TResult>>();

            return @this.Bind(_ => MonadZero.Of(selector.Invoke(_)));
        }

        public static MonadZero<TResult> ReplaceBy<TSource, TResult>(
            this MonadZero<TSource> @this,
            MonadZero<TResult> other)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Warrant.NotNull<MonadZero<TResult>>();

            return @this.Bind(_ => other);
        }

        public static MonadZero<global::Narvalo.Fx.Unit> Skip<TSource>(this MonadZero<TSource> @this)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Warrant.NotNull<MonadZero<global::Narvalo.Fx.Unit>>();

            return MonadZero.Unit;
        }

        #endregion

        #region Other extensions

        public static MonadZero<TResult> Coalesce<TSource, TResult>(
            this MonadZero<TSource> @this,
            Func<TSource, bool> predicate,
            MonadZero<TResult> thenResult,
            MonadZero<TResult> elseResult)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(predicate, nameof(predicate));
            Warrant.NotNull<MonadZero<TResult>>();

            return @this.Bind(_ => predicate.Invoke(_) ? thenResult : elseResult);
        }


        // Conditional version of ReplaceBy().
        public static MonadZero<TResult> If<TSource, TResult>(
            this MonadZero<TSource> @this,
            Func<TSource, bool> predicate,
            MonadZero<TResult> thenResult)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(predicate, nameof(predicate));
            Warrant.NotNull<MonadZero<TResult>>();

            return @this.Bind(_ => predicate.Invoke(_) ? thenResult : MonadZero<TResult>.Zero);
        }


        public static MonadZero<TResult> Using<TSource, TResult>(
            this MonadZero<TSource> @this,
            Func<TSource, MonadZero<TResult>> selector)
            where TSource : IDisposable
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(selector, nameof(selector));

            return @this.Bind(_ => { using (_) { return selector.Invoke(_); } });
        }

        public static MonadZero<TResult> Using<TSource, TResult>(
            this MonadZero<TSource> @this,
            Func<TSource, TResult> selector)
            where TSource : IDisposable
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(selector, nameof(selector));

            return @this.Select(_ => { using (_) { return selector.Invoke(_); } });
        }

        #endregion

        #region Generalisations of list functions


        public static MonadZero<TSource> Where<TSource>(
            this MonadZero<TSource> @this,
            Func<TSource, bool> predicate)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(predicate, nameof(predicate));
            Warrant.NotNull<MonadZero<TSource>>();

            return @this.Bind(
                _ => predicate.Invoke(_) ? @this : MonadZero<TSource>.Zero);
        }


        public static MonadZero<IEnumerable<TSource>> Repeat<TSource>(
            this MonadZero<TSource> @this,
            int count)
        {
            Require.NotNull(@this, nameof(@this));
            Require.Range(count >= 1, nameof(count));
            Warrant.NotNull<MonadZero<IEnumerable<TSource>>>();

            return @this.Select(_ => Enumerable.Repeat(_, count));
        }


        #endregion

        #region Conditional execution of monadic expressions

        // Haskell uses a different signature.
        public static void When<TSource>(
            this MonadZero<TSource> @this,
            Func<TSource, bool> predicate,
            Action<TSource> action)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(predicate, nameof(predicate));
            Require.NotNull(action, nameof(action));

            @this.Bind(
                _ => {
                    if (predicate.Invoke(_)) { action.Invoke(_); }

                    return MonadZero.Unit;
                });
        }

        // Haskell uses a different signature.
        public static void Unless<TSource>(
            this MonadZero<TSource> @this,
            Func<TSource, bool> predicate,
            Action<TSource> action)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Expect.NotNull(predicate);
            Expect.NotNull(action);

            @this.When(_ => !predicate.Invoke(_), action);
        }

        #endregion

        #region Applicative lifting operators

        /// <see cref="Lift{T1, T2, T3}" />
        public static MonadZero<TResult> Zip<TFirst, TSecond, TResult>(
            this MonadZero<TFirst> @this,
            MonadZero<TSecond> second,
            Func<TFirst, TSecond, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));
            Warrant.NotNull<MonadZero<TResult>>();

            return @this.Bind(v1 => second.Select(v2 => resultSelector.Invoke(v1, v2)));
        }

        /// <see cref="Lift{T1, T2, T3, T4}" />
        public static MonadZero<TResult> Zip<T1, T2, T3, TResult>(
            this MonadZero<T1> @this,
            MonadZero<T2> second,
            MonadZero<T3> third,
            Func<T1, T2, T3, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));
            Warrant.NotNull<MonadZero<TResult>>();

            Func<T1, MonadZero<TResult>> g
                = t1 => second.Zip(third, (t2, t3) => resultSelector.Invoke(t1, t2, t3));

            return @this.Bind(g);
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5}" />
        public static MonadZero<TResult> Zip<T1, T2, T3, T4, TResult>(
             this MonadZero<T1> @this,
             MonadZero<T2> second,
             MonadZero<T3> third,
             MonadZero<T4> fourth,
             Func<T1, T2, T3, T4, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));
            Warrant.NotNull<MonadZero<TResult>>();

            Func<T1, MonadZero<TResult>> g
                = t1 => second.Zip(
                    third,
                    fourth,
                    (t2, t3, t4) => resultSelector.Invoke(t1, t2, t3, t4));

            return @this.Bind(g);
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5, T6}" />
        public static MonadZero<TResult> Zip<T1, T2, T3, T4, T5, TResult>(
            this MonadZero<T1> @this,
            MonadZero<T2> second,
            MonadZero<T3> third,
            MonadZero<T4> fourth,
            MonadZero<T5> fifth,
            Func<T1, T2, T3, T4, T5, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));
            Warrant.NotNull<MonadZero<TResult>>();

            Func<T1, MonadZero<TResult>> g
                = t1 => second.Zip(
                    third,
                    fourth,
                    fifth,
                    (t2, t3, t4, t5) => resultSelector.Invoke(t1, t2, t3, t4, t5));

            return @this.Bind(g);
        }

        #endregion

        #region Query Expression Pattern


        /// <remarks>
        /// Kind of generalisation of <see cref="Zip{T1, T2, T3}" />.
        /// </remarks>
        public static MonadZero<TResult> SelectMany<TSource, TMiddle, TResult>(
            this MonadZero<TSource> @this,
            Func<TSource, MonadZero<TMiddle>> valueSelector,
            Func<TSource, TMiddle, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(valueSelector, nameof(valueSelector));
            Require.NotNull(resultSelector, nameof(resultSelector));
            Warrant.NotNull<MonadZero<TResult>>();

            return @this.Bind(
                _ => valueSelector.Invoke(_).Select(
                    middle => resultSelector.Invoke(_, middle)));
        }


        public static MonadZero<TResult> Join<TSource, TInner, TKey, TResult>(
            this MonadZero<TSource> @this,
            MonadZero<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Expect.NotNull(inner);
            Expect.NotNull(outerKeySelector);
            Expect.NotNull(innerKeySelector);
            Expect.NotNull(resultSelector);
            Warrant.NotNull<MonadZero<TResult>>();

            return JoinImpl(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                EqualityComparer<TKey>.Default);
        }

        public static MonadZero<TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this MonadZero<TSource> @this,
            MonadZero<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, MonadZero<TInner>, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Expect.NotNull(inner);
            Expect.NotNull(outerKeySelector);
            Expect.NotNull(innerKeySelector);
            Expect.NotNull(resultSelector);
            Warrant.NotNull<MonadZero<TResult>>();

            return GroupJoinImpl(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                EqualityComparer<TKey>.Default);
        }


        #endregion

        #region LINQ extensions


        public static MonadZero<TResult> Join<TSource, TInner, TKey, TResult>(
            this MonadZero<TSource> @this,
            MonadZero<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
            /* T4: C# indent */
        {
            Expect.NotNull(@this);
            Expect.NotNull(inner);
            Expect.NotNull(outerKeySelector);
            Expect.NotNull(innerKeySelector);
            Expect.NotNull(resultSelector);
            Warrant.NotNull<MonadZero<TResult>>();

            return JoinImpl(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                comparer ?? EqualityComparer<TKey>.Default);
        }

        public static MonadZero<TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this MonadZero<TSource> @this,
            MonadZero<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, MonadZero<TInner>, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
            /* T4: C# indent */
        {
            Expect.NotNull(@this);
            Expect.NotNull(inner);
            Expect.NotNull(outerKeySelector);
            Expect.NotNull(innerKeySelector);
            Expect.NotNull(resultSelector);
            Warrant.NotNull<MonadZero<TResult>>();

            return GroupJoinImpl(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                comparer ?? EqualityComparer<TKey>.Default);
        }


        private static MonadZero<TResult> JoinImpl<TSource, TInner, TKey, TResult>(
            MonadZero<TSource> seq,
            MonadZero<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
            /* T4: C# indent */
        {
            Require.NotNull(seq, nameof(seq));
            Require.NotNull(resultSelector, nameof(resultSelector));
            Demand.NotNull(inner);
            Demand.NotNull(outerKeySelector);
            Demand.NotNull(innerKeySelector);
            Demand.NotNull(comparer);
            Warrant.NotNull<MonadZero<TResult>>();

            var keyLookupM = GetKeyLookup(inner, outerKeySelector, innerKeySelector, comparer);

            return from outerValue in seq
                   from innerValue in keyLookupM.Invoke(outerValue).ReplaceBy(inner)
                   select resultSelector.Invoke(outerValue, innerValue);
        }

        private static MonadZero<TResult> GroupJoinImpl<TSource, TInner, TKey, TResult>(
            MonadZero<TSource> seq,
            MonadZero<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, MonadZero<TInner>, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
            /* T4: C# indent */
        {
            Require.NotNull(seq, nameof(seq));
            Require.NotNull(resultSelector, nameof(resultSelector));
            Demand.NotNull(inner);
            Demand.NotNull(outerKeySelector);
            Demand.NotNull(innerKeySelector);
            Demand.NotNull(comparer);
            Warrant.NotNull<MonadZero<TResult>>();

            var keyLookupM = GetKeyLookup(inner, outerKeySelector, innerKeySelector, comparer);

            return from outerValue in seq
                   select resultSelector.Invoke(outerValue, keyLookupM.Invoke(outerValue).ReplaceBy(inner));
        }

        private static Func<TSource, MonadZero<TKey>> GetKeyLookup<TSource, TInner, TKey>(
            MonadZero<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            IEqualityComparer<TKey> comparer)
            /* T4: C# indent */
        {
            Require.NotNull(inner, nameof(inner));
            Require.NotNull(outerKeySelector, nameof(outerKeySelector));
            Require.NotNull(comparer, nameof(comparer));
            Demand.NotNull(innerKeySelector);
            Warrant.NotNull<Func<TSource, MonadZero<TKey>>>();

            return source =>
            {
                TKey outerKey = outerKeySelector.Invoke(source);

                return inner.Select(innerKeySelector).Where(_ => comparer.Equals(_, outerKey));
            };
        }


        #endregion
    } // End of MonadZero - T4: EmitMonadExtensions().

    // Provides extension methods for Func<T> in the Kleisli category.
    public static partial class Kleisli
    {
        #region Basic Monad functions


        public static MonadZero<IEnumerable<TResult>> ForEach<TSource, TResult>(
            this Func<TSource, MonadZero<TResult>> @this,
            IEnumerable<TSource> seq)
        {
            Expect.NotNull(@this);
            Expect.NotNull(seq);
            Warrant.NotNull<MonadZero<IEnumerable<TResult>>>();

            return seq.SelectWith(@this);
        }


        public static MonadZero<TResult> Invoke<TSource, TResult>(
            this Func<TSource, MonadZero<TResult>> @this,
            MonadZero<TSource> value)
            /* T4: C# indent */
        {
            Expect.NotNull(@this);
            Require.NotNull(value, nameof(value));
            Warrant.NotNull<MonadZero<TResult>>();

            return value.Bind(@this);
        }

        public static Func<TSource, MonadZero<TResult>> Compose<TSource, TMiddle, TResult>(
            this Func<TSource, MonadZero<TMiddle>> @this,
            Func<TMiddle, MonadZero<TResult>> func)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Expect.NotNull(func);
            Warrant.NotNull<Func<TSource, MonadZero<TResult>>>();

            return _ => @this.Invoke(_).Bind(func);
        }

        public static Func<TSource, MonadZero<TResult>> ComposeBack<TSource, TMiddle, TResult>(
            this Func<TMiddle, MonadZero<TResult>> @this,
            Func<TSource, MonadZero<TMiddle>> func)
            /* T4: C# indent */
        {
            Expect.NotNull(@this);
            Require.NotNull(func, nameof(func));
            Warrant.NotNull<Func<TSource, MonadZero<TResult>>>();

            return _ => func.Invoke(_).Bind(@this);
        }

        #endregion
    } // End of Kleisli - T4: EmitKleisliExtensions().

    // Provides extension methods for IEnumerable<MonadZero<T>>.
    public static partial class MonadZero
    {
        #region Basic Monad functions


        public static MonadZero<IEnumerable<TSource>> Collect<TSource>(
            this IEnumerable<MonadZero<TSource>> @this)
        {
            Expect.NotNull(@this);
            Warrant.NotNull<MonadZero<IEnumerable<TSource>>>();

            return @this.CollectImpl();
        }


        #endregion

    } // End of Sequence - T4: EmitMonadEnumerableExtensions().
}

namespace Edufun.Haskell.Templates.Internal
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    using Narvalo.Fx.Linq;

    // Provides default implementations for the extension methods for IEnumerable<MonadZero<T>>.
    // You will certainly want to override them to improve performance.
    internal static partial class EnumerableExtensions
    {

        internal static MonadZero<IEnumerable<TSource>> CollectImpl<TSource>(
            this IEnumerable<MonadZero<TSource>> @this)
        {
            Demand.NotNull(@this);
            Warrant.NotNull<MonadZero<IEnumerable<TSource>>>();

            var seed = MonadZero.Of(Enumerable.Empty<TSource>());
            //var seed = MonadZero.Of(Enumerable.Empty<TSource>());
            // Inlined LINQ Append method:
            Func<IEnumerable<TSource>, TSource, IEnumerable<TSource>> append = (m, item) => m.Append(item);

            // NB: Maybe.Lift(append) is the same as:
            // Func<MonadZero<IEnumerable<TSource>>, MonadZero<TSource>, MonadZero<IEnumerable<TSource>>> liftedAppend
            //     = (m, item) => m.Bind(list => Append(list, item));
            // where Append is defined below.
            var retval = @this.Aggregate(seed, MonadZero.Lift<IEnumerable<TSource>, TSource, IEnumerable<TSource>>(append));
            System.Diagnostics.Contracts.Contract.Assume(retval != null);

            return retval;
        }

        // NB: We do not inline this method to avoid the creation of an unused private field (CA1823 warning).
        //private static MonadZero<IEnumerable<TSource>> Append<TSource>(
        //    IEnumerable<TSource> list,
        //    MonadZero<TSource> m)
        //{
        //    Demand.NotNull(m);

        //    return m.Bind(item => MonadZero.Of(list.Concat(Enumerable.Repeat(item, 1))));
        //}

    } // End of EnumerableExtensions - T4: EmitMonadEnumerableInternalExtensions().
}

namespace Edufun.Haskell.Templates.Linq
{
    using System;
    using System.Collections.Generic;

    using Edufun.Haskell.Templates;
    using Edufun.Haskell.Templates.Internal;

    // Provides extension methods for IEnumerable<T>.
    // We do not use the standard LINQ names to avoid a confusing API.
    // - Select    -> SelectWith
    // - Where     -> WhereBy
    // - Zip       -> ZipWith
    // - Aggregate -> Reduce or Fold
    public static partial class Qperators
    {
        #region Basic Monad functions


        public static MonadZero<IEnumerable<TResult>> SelectWith<TSource, TResult>(
            this IEnumerable<TSource> @this,
            Func<TSource, MonadZero<TResult>> selector)
        {
            Expect.NotNull(@this);
            Expect.NotNull(selector);
            Warrant.NotNull<MonadZero<IEnumerable<TResult>>>();

            return @this.SelectWithImpl(selector);
        }


        #endregion

        #region Generalisations of list functions


        public static MonadZero<IEnumerable<TSource>> WhereBy<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, MonadZero<bool>> predicate)
            /* T4: C# indent */
        {
            Expect.NotNull(@this);
            Expect.NotNull(predicate);
            Warrant.NotNull<IEnumerable<TSource>>();

            return @this.WhereByImpl(predicate);
        }

        public static MonadZero<Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>>
            SelectUnzip<TSource, TFirst, TSecond>(
            this IEnumerable<TSource> @this,
            Func<TSource, MonadZero<Tuple<TFirst, TSecond>>> selector)
        {
            Expect.NotNull(@this);
            Expect.NotNull(selector);
            Warrant.NotNull<MonadZero<Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>>>();

            return @this.SelectUnzipImpl(selector);
        }

        public static MonadZero<IEnumerable<TResult>> ZipWith<TFirst, TSecond, TResult>(
            this IEnumerable<TFirst> @this,
            IEnumerable<TSecond> second,
            Func<TFirst, TSecond, MonadZero<TResult>> resultSelector)
        {
            Expect.NotNull(@this);
            Expect.NotNull(second);
            Expect.NotNull(resultSelector);
            Warrant.NotNull<MonadZero<IEnumerable<TResult>>>();

            return @this.ZipWithImpl(second, resultSelector);
        }


        public static MonadZero<TAccumulate> Fold<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, MonadZero<TAccumulate>> accumulator)
            /* T4: C# indent */
        {
            Expect.NotNull(@this);
            Expect.NotNull(accumulator);
            Warrant.NotNull<MonadZero<TAccumulate>>();

            return @this.FoldImpl(seed, accumulator);
        }

        #endregion

        #region Aggregate Operators

        public static MonadZero<TAccumulate> FoldBack<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, MonadZero<TAccumulate>> accumulator)
            /* T4: C# indent */
        {
            Expect.NotNull(@this);
            Expect.NotNull(accumulator);
            Warrant.NotNull<MonadZero<TAccumulate>>();

            return @this.FoldBackImpl(seed, accumulator);
        }

        public static MonadZero<TSource> Reduce<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, MonadZero<TSource>> accumulator)
            /* T4: C# indent */
        {
            Expect.NotNull(@this);
            Expect.NotNull(accumulator);
            Warrant.NotNull<MonadZero<TSource>>();

            return @this.ReduceImpl(accumulator);
        }

        public static MonadZero<TSource> ReduceBack<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, MonadZero<TSource>> accumulator)
            /* T4: C# indent */
        {
            Expect.NotNull(@this);
            Expect.NotNull(accumulator);
            Warrant.NotNull<MonadZero<TSource>>();

            return @this.ReduceBackImpl(accumulator);
        }

        #endregion

        #region Catamorphisms

        // Haskell uses a different signature.
        public static MonadZero<TAccumulate> Fold<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, MonadZero<TAccumulate>> accumulator,
            Func<MonadZero<TAccumulate>, bool> predicate)
            /* T4: C# indent */
        {
            Expect.NotNull(@this);
            Expect.NotNull(accumulator);
            Expect.NotNull(predicate);
            Warrant.NotNull<MonadZero<TAccumulate>>();

            return @this.FoldImpl(seed, accumulator, predicate);
        }

        // Haskell uses a different signature.
        public static MonadZero<TSource> Reduce<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, MonadZero<TSource>> accumulator,
            Func<MonadZero<TSource>, bool> predicate)
            /* T4: C# indent */
        {
            Expect.NotNull(@this);
            Expect.NotNull(accumulator);
            Expect.NotNull(predicate);
            Warrant.NotNull<MonadZero<TSource>>();

            return @this.ReduceImpl(accumulator, predicate);
        }

        #endregion
    } // End of Iterable - T4: EmitEnumerableExtensions().
}

namespace Edufun.Haskell.Templates.Internal
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    using Edufun.Haskell.Templates.Linq;
    using Narvalo.Fx.Linq;

    // Provides default implementations for the extension methods for IEnumerable<T>.
    // You will certainly want to override them to improve performance.
    internal static partial class EnumerableExtensions
    {

        internal static MonadZero<IEnumerable<TResult>> SelectWithImpl<TSource, TResult>(
            this IEnumerable<TSource> @this,
            Func<TSource, MonadZero<TResult>> selector)
        {
            Demand.NotNull(@this);
            Demand.NotNull(selector);
            Warrant.NotNull<MonadZero<IEnumerable<TResult>>>();

            return @this.Select(selector).EmptyIfNull().Collect();
        }

        internal static MonadZero<IEnumerable<TSource>> WhereByImpl<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, MonadZero<bool>> predicate)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(predicate, nameof(predicate));
            Warrant.NotNull<IEnumerable<TSource>>();

            Func<bool, IEnumerable<TSource>, TSource, IEnumerable<TSource>> selector
                = (flg, list, item) => { if (flg) { return list.Prepend(item); } else { return list; } };

            Func<MonadZero<IEnumerable<TSource>>, TSource, MonadZero<IEnumerable<TSource>>> accumulator
                = (mlist, item) => predicate.Invoke(item).Zip(mlist, (flg, list) => selector.Invoke(flg, list, item));

            var seed = MonadZero.Of(Enumerable.Empty<TSource>());

            // REVIEW: Aggregate?
            return @this.AggregateBack(seed, accumulator);
        }

        internal static MonadZero<Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>>
            SelectUnzipImpl<TSource, TFirst, TSecond>(
            this IEnumerable<TSource> @this,
            Func<TSource, MonadZero<Tuple<TFirst, TSecond>>> selector)
        {
            Demand.NotNull(@this);
            Demand.NotNull(selector);
            Warrant.NotNull<MonadZero<Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>>>();

            return @this.SelectWith(selector).Select(
                tuples =>
                {
                    IEnumerable<TFirst> list1 = tuples.Select(_ => _.Item1);
                    IEnumerable<TSecond> list2 = tuples.Select(_ => _.Item2);

                    return new Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>(list1, list2);
                });
        }

        internal static MonadZero<IEnumerable<TResult>> ZipWithImpl<TFirst, TSecond, TResult>(
            this IEnumerable<TFirst> @this,
            IEnumerable<TSecond> second,
            Func<TFirst, TSecond, MonadZero<TResult>> resultSelector)
        {
            Require.NotNull(resultSelector, nameof(resultSelector));

            Demand.NotNull(@this);
            Demand.NotNull(second);
            Warrant.NotNull<MonadZero<IEnumerable<TResult>>>();

            Func<TFirst, TSecond, MonadZero<TResult>> selector
                = (v1, v2) => resultSelector.Invoke(v1, v2);

            IEnumerable<MonadZero<TResult>> seq = @this.Zip(second, selector);

            return seq.EmptyIfNull().Collect();
        }

        internal static MonadZero<TAccumulate> FoldImpl<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, MonadZero<TAccumulate>> accumulator)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(accumulator, nameof(accumulator));
            Warrant.NotNull<MonadZero<TAccumulate>>();

            MonadZero<TAccumulate> retval = MonadZero.Of(seed);

            foreach (TSource item in @this)
            {
                retval = retval.Bind(_ => accumulator.Invoke(_, item));
            }

            return retval;
        }

        internal static MonadZero<TAccumulate> FoldBackImpl<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, MonadZero<TAccumulate>> accumulator)
            /* T4: C# indent */
        {
            Demand.NotNull(@this);
            Demand.NotNull(accumulator);
            Warrant.NotNull<MonadZero<TAccumulate>>();

            return @this.Reverse().EmptyIfNull().Fold(seed, accumulator);
        }

        internal static MonadZero<TSource> ReduceImpl<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, MonadZero<TSource>> accumulator)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(accumulator, nameof(accumulator));
            Warrant.NotNull<MonadZero<TSource>>();

            using (var iter = @this.GetEnumerator())
            {
                if (!iter.MoveNext())
                {
                    throw new InvalidOperationException("Source sequence was empty.");
                }

                MonadZero<TSource> retval = MonadZero.Of(iter.Current);

                while (iter.MoveNext())
                {
                    retval = retval.Bind(_ => accumulator.Invoke(_, iter.Current));
                }

                return retval;
            }
        }

        internal static MonadZero<TSource> ReduceBackImpl<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, MonadZero<TSource>> accumulator)
            /* T4: C# indent */
        {
            Demand.NotNull(@this);
            Demand.NotNull(accumulator);
            Warrant.NotNull<MonadZero<TSource>>();

            return @this.Reverse().EmptyIfNull().Reduce(accumulator);
        }

        internal static MonadZero<TAccumulate> FoldImpl<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, MonadZero<TAccumulate>> accumulator,
            Func<MonadZero<TAccumulate>, bool> predicate)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(accumulator, nameof(accumulator));
            Require.NotNull(predicate, nameof(predicate));
            Warrant.NotNull<MonadZero<TAccumulate>>();

            MonadZero<TAccumulate> retval = MonadZero.Of(seed);

            using (var iter = @this.GetEnumerator())
            {
                while (predicate.Invoke(retval) && iter.MoveNext())
                {
                    retval = retval.Bind(_ => accumulator.Invoke(_, iter.Current));
                }
            }

            return retval;
        }

        internal static MonadZero<TSource> ReduceImpl<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, MonadZero<TSource>> accumulator,
            Func<MonadZero<TSource>, bool> predicate)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(accumulator, nameof(accumulator));
            Require.NotNull(predicate, nameof(predicate));
            Warrant.NotNull<MonadZero<TSource>>();

            using (var iter = @this.GetEnumerator())
            {
                if (!iter.MoveNext())
                {
                    throw new InvalidOperationException("Source sequence was empty.");
                }

                MonadZero<TSource> retval = MonadZero.Of(iter.Current);

                while (predicate.Invoke(retval) && iter.MoveNext())
                {
                    retval = retval.Bind(_ => accumulator.Invoke(_, iter.Current));
                }

                return retval;
            }
        }
    } // End of EnumerableExtensions - T4: EmitEnumerableInternalExtensions().
}

