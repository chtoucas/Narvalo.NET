<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    This MSBuild file enforces the use of a common set of Build Properties.
    You can still override any of them but this should not be the default.

    Read-Write Properties:
    - NarvaloCustomCodeAnalysisRuleSet
    - NarvaloDisableSourceAnalysisOnBuild
    - NarvaloIsSampleProject
    - NarvaloVerbose
    
    Read-Only Properties:
    - NarvaloCodeAnalysisRuleSet
    - NarvaloConfigurationDirectory
    - NarvaloIsTestProject
    - NarvaloRunCodeAnalysis
    - NarvaloSourceAnalysisEnabled

    Each Visual Studio project should import this file:
      <Import Project="..\..\etc\Narvalo.props" />
    or
      <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), Narvalo.sln))\etc\Narvalo.props" />
  -->

  <!-- ### Narvalo Properties ### -->

  <PropertyGroup>
    <NarvaloDisableSourceAnalysisOnBuild Condition=" '$(NarvaloDisableSourceAnalysisOnBuild)' == '' ">false</NarvaloDisableSourceAnalysisOnBuild>
    <NarvaloIsSampleProject Condition=" '$(NarvaloIsSampleProject)' == '' ">false</NarvaloIsSampleProject>
    <NarvaloVerbose Condition=" '$(NarvaloVerbose)' == '' ">true</NarvaloVerbose>

    <!-- Default values. This is not really necessary but we never know. -->
    <NarvaloCodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</NarvaloCodeAnalysisRuleSet>
    <NarvaloConfigurationDirectory>$(MSBuildThisFileDirectory)</NarvaloConfigurationDirectory>
    <NarvaloRunCodeAnalysis>false</NarvaloRunCodeAnalysis>
    <NarvaloSourceAnalysisEnabled>false</NarvaloSourceAnalysisEnabled>
  </PropertyGroup>

  <!--
    We use the project type Guid to identify these projects: "3AC096D0-A1C2-E12C-1390-A8335801FDAB".
    Another way to do this here could be to use: Condition=" '$(AssemblyName.EndsWith(Facts))' == 'true' "
  -->
  <Choose>
    <When Condition=" '$(ProjectTypeGuids.Contains(3AC096D0-A1C2-E12C-1390-A8335801FDAB))' == 'true' ">
      <PropertyGroup>
        <NarvaloIsTestProject>true</NarvaloIsTestProject>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <NarvaloIsTestProject>false</NarvaloIsTestProject>
      </PropertyGroup>
    </Otherwise>
  </Choose>


  <!-- ### Standard MSBuild Properties ### -->

  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>

    <PlatformTarget>AnyCPU</PlatformTarget>
    <Prefer32Bit>false</Prefer32Bit>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <WarningLevel>4</WarningLevel>
    <!-- Disable compiler warnings for missing documentation. -->
    <NoWarn>1591</NoWarn>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <OutputPath>bin\$(Configuration)\</OutputPath>
    <RegisterForComInterop>false</RegisterForComInterop>
    <GenerateSerializationAssemblies>Auto</GenerateSerializationAssemblies>

    <LangVersion>default</LangVersion>
    <ErrorReport>prompt</ErrorReport>
    <FileAlignment>512</FileAlignment>

    <!-- REVIEW: Delay sign? -->
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>$(NarvaloConfigurationDirectory)Narvalo.snk</AssemblyOriginatorKeyFile>
    <DelaySign>false</DelaySign>

    <!-- REVIEW: Should I also set these properties? -->
    <!-- $(SolutionDir) is usually set inside Visual Studio. -->
    <!--<SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*' ">$(MSBuildThisFileDirectory)..\</SolutionDir>-->
    <!--<AppDesignerFolder>Properties</AppDesignerFolder>-->
    <!--<DefaultLanguage>en-US</DefaultLanguage>-->
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <DefineConstants>TRACE;DEBUG</DefineConstants>
    <CheckForOverflowUnderflow>true</CheckForOverflowUnderflow>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugSymbols>false</DebugSymbols>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <DefineConstants>TRACE;CODE_ANALYSIS</DefineConstants>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <DocumentationFile>$(OutputPath)$(AssemblyName).xml</DocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'CodeContracts|AnyCPU' ">
    <DebugSymbols>false</DebugSymbols>
    <DebugType>none</DebugType>
    <Optimize>false</Optimize>
    <!-- Keep the DEBUG constant since Contract.Assert and Contract.Assume depend on it. -->
    <DefineConstants>TRACE;DEBUG;CONTRACTS_FULL</DefineConstants>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
  </PropertyGroup>


  <!-- ### Automatically Linked Files ### -->

  <ItemGroup>
    <CodeAnalysisDictionary Include="$(NarvaloConfigurationDirectory)CodeAnalysisDictionary.xml">
      <Link>Properties\CodeAnalysisDictionary.xml</Link>
    </CodeAnalysisDictionary>
    <!--
      I would like to also include the file containing the common assembly infos,
      unfortunately, if done here, the file won't appear in VS.
    -->
    <!--<Compile Include="$(NarvaloConfigurationDirectory)AssemblyInfo.Common.cs">
      <Link>Properties\AssemblyInfo.Common.cs</Link>
    </Compile>-->
  </ItemGroup>


  <!-- ### Source Analysis ### -->
  <!-- For a complete list of available options, see tools\StyleCop.targets. -->

  <PropertyGroup>
    <!--
      Only in Release Build is Source Analysis automatically run.
      You can still perform manual Source Analysis for any Build configuration inside VS.
    -->
    <NarvaloSourceAnalysisEnabled Condition=" '$(Configuration)' == 'Release' ">true</NarvaloSourceAnalysisEnabled>
    <NarvaloSourceAnalysisEnabled Condition=" '$(Configuration)' != 'Release' ">false</NarvaloSourceAnalysisEnabled>

    <!-- If requested, we disable Source Analysis. -->
    <SourceAnalysisEnabled Condition=" '$(NarvaloDisableSourceAnalysisOnBuild)' == 'true' ">false</SourceAnalysisEnabled>
    <SourceAnalysisEnabled Condition=" '$(NarvaloDisableSourceAnalysisOnBuild)' != 'true' ">$(NarvaloSourceAnalysisEnabled)</SourceAnalysisEnabled>
  </PropertyGroup>

  <PropertyGroup>
    <SourceAnalysisOverrideSettingsFile>$(NarvaloConfigurationDirectory)Settings.SourceAnalysis</SourceAnalysisOverrideSettingsFile>
    <SourceAnalysisTreatErrorsAsWarnings>false</SourceAnalysisTreatErrorsAsWarnings>
  </PropertyGroup>


  <!-- ### Code Analysis ### -->
  <!--
    For a complete list of available options, see
      %ProgramFiles%\MSBuild\Microsoft\VisualStudio\v12.0\CodeAnalysis\Microsoft.CodeAnalysis.Targets
  -->

  <PropertyGroup>
    <!--
      Only in Release Build is Code Analysis automatically run.
      You can still perform manual Code Analysis for any Build configuration inside VS.
    -->
    <NarvaloRunCodeAnalysis Condition=" '$(Configuration)' == 'Release' ">true</NarvaloRunCodeAnalysis>
    <NarvaloRunCodeAnalysis Condition=" '$(Configuration)' != 'Release' ">false</NarvaloRunCodeAnalysis>

    <RunCodeAnalysis>$(NarvaloRunCodeAnalysis)</RunCodeAnalysis>
  </PropertyGroup>

  <Choose>
    <When Condition=" '$(NarvaloIsSampleProject)' == 'true' ">
      <!-- Sample projects use a custom ruleset. -->
      <PropertyGroup>
        <NarvaloCodeAnalysisRuleSet>$(NarvaloConfigurationDirectory)Samples.ruleset</NarvaloCodeAnalysisRuleSet>
      </PropertyGroup>
    </When>
    <When Condition=" '$(NarvaloIsTestProject)' == 'true' ">
      <!-- Test projects use a custom ruleset. -->
      <PropertyGroup>
        <NarvaloCodeAnalysisRuleSet>$(NarvaloConfigurationDirectory)Tests.ruleset</NarvaloCodeAnalysisRuleSet>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <!--
          The default behaviour is to use a very strict ruleset. For performance reasons
          we use a minimal ruleset when using Code Contracts. Also Code Contracts
          produce assemblies that are not compatible with Code Analysis.
        -->
        <NarvaloCodeAnalysisRuleSet Condition=" '$(Configuration)' == 'CodeContracts' ">MinimumRecommendedRules.ruleset</NarvaloCodeAnalysisRuleSet>
        <NarvaloCodeAnalysisRuleSet Condition=" '$(Configuration)' != 'CodeContracts' ">$(NarvaloConfigurationDirectory)Narvalo.ruleset</NarvaloCodeAnalysisRuleSet>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <PropertyGroup>
    <!--
      The default behaviour is to use a very strict ruleset. For performance reasons
      we use a less strict ruleset when using Code Contracts. Also Code Contracts
      produce assemblies that are not compatible with Code Analysis.

      If requested, use a custom Code Analysis ruleset. 
    -->
    <CodeAnalysisRuleSet Condition=" '$(NarvaloCustomCodeAnalysisRuleSet)' == '' ">$(NarvaloCodeAnalysisRuleSet)</CodeAnalysisRuleSet>
    <CodeAnalysisRuleSet Condition=" '$(NarvaloCustomCodeAnalysisRuleSet)' != '' ">$(NarvaloCustomCodeAnalysisRuleSet)</CodeAnalysisRuleSet>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Process generated files (.g.cs). -->
    <CodeAnalysisIgnoreGeneratedCode>false</CodeAnalysisIgnoreGeneratedCode>
    <CodeAnalysisTreatWarningsAsErrors>false</CodeAnalysisTreatWarningsAsErrors>
    <!-- All these settings do not seem to have any effect. -->
    <!--<CodeAnalysisQuiet>true</CodeAnalysisQuiet>
    <CodeAnalysisVerbose>false</CodeAnalysisVerbose>
    <CodeAnalysisSummary>false</CodeAnalysisSummary>-->
  </PropertyGroup>


  <!-- ### Code Contracts ### -->
  <!--
    For a complete list of available options, see
      %ProgramFiles%\Microsoft\Contracts\MsBuild\v12.0\Microsoft.CodeContractAnalysis.targets
      %ProgramFiles%\Microsoft\Contracts\MsBuild\v12.0\Microsoft.CodeContracts.targets
      
    We do not really enforce any policy for Code Contracts as they are not 
    currently used by all projects. On Release Build, you should manually add 
    the following lines:
      <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
        <CodeContractsReferenceAssembly>Build</CodeContractsReferenceAssembly>
        <CodeContractsEmitXMLDocs>True</CodeContractsEmitXMLDocs>
      </PropertyGroup>
    On CodeContracts Build, configuration is exclusively done inside VS.
    Even so, let's set some reasonable defaults.
  -->

  <PropertyGroup>
    <!-- Use "Custom Parameter Validation". -->
    <CodeContractsAssemblyMode>0</CodeContractsAssemblyMode>

    <!-- Runtime Checking. -->
    <CodeContractsEnableRuntimeChecking>False</CodeContractsEnableRuntimeChecking>
    <CodeContractsRuntimeCheckingLevel>Full</CodeContractsRuntimeCheckingLevel>
    <CodeContractsRuntimeOnlyPublicSurface>False</CodeContractsRuntimeOnlyPublicSurface>
    <CodeContractsRuntimeThrowOnFailure>True</CodeContractsRuntimeThrowOnFailure>
    <CodeContractsRuntimeCallSiteRequires>True</CodeContractsRuntimeCallSiteRequires>
    <CodeContractsRuntimeSkipQuantifiers>False</CodeContractsRuntimeSkipQuantifiers>

    <!-- Static Checking. -->
    <CodeContractsRunCodeAnalysis>False</CodeContractsRunCodeAnalysis>
    <CodeContractsRunInBackground>True</CodeContractsRunInBackground>
    <!-- Only meaningful inside VS but I find the result confusing. -->
    <CodeContractsShowSquigglies>False</CodeContractsShowSquigglies>
    <CodeContractsFailBuildOnWarnings>False</CodeContractsFailBuildOnWarnings>

    <!-- Contract Reference Assembly. -->
    <CodeContractsReferenceAssembly>DoNotBuild</CodeContractsReferenceAssembly>
    <CodeContractsEmitXMLDocs>False</CodeContractsEmitXMLDocs>
  </PropertyGroup>


  <!-- ### Continuous Integration Overrides ### -->

  <PropertyGroup Condition=" '$(BuildingInsideVisualStudio)' != 'true' ">
    <!-- Treat all warnings as errors. -->
    <CodeAnalysisTreatWarningsAsErrors>true</CodeAnalysisTreatWarningsAsErrors>
    <CodeContractsFailBuildOnWarnings>true</CodeContractsFailBuildOnWarnings>
    <SourceAnalysisTreatErrorsAsWarnings>true</SourceAnalysisTreatErrorsAsWarnings>

    <!--
      We don't want the Code Analysis "succeed" file to be written to 
      the custom location but it does not seem to be understood by MSBuild. 
      As a workaround, we simply disable the creation of the success file.
    -->
    <!--<CodeAnalysisSucceededFile>$(OutputPath)$(AssemblyName).FxCop.Succeed</CodeAnalysisSucceededFile>-->
    <CodeAnalysisGenerateSuccessFile>false</CodeAnalysisGenerateSuccessFile>

    <!-- Code Contracts background checking is not available in terminal. -->
    <CodeContractsRunInBackground>False</CodeContractsRunInBackground>

    <!-- Force T4 re-generation. -->
    <TransformOnBuild>true</TransformOnBuild>
  </PropertyGroup>

  <!-- 
    When called from Build.proj, analysis reports are saved in a custom location. 
    The NarvaloAnalysisDir property is injected by Build.proj.
  -->
  <PropertyGroup Condition=" '$(BuildingInsideVisualStudio)' != 'true' And $(NarvaloAnalysisDir) != '' And Exists('$(NarvaloAnalysisDir)')  ">
    <CodeAnalysisLogFile>$(NarvaloAnalysisDir)$(AssemblyName).FxCop.xml</CodeAnalysisLogFile>
    <SourceAnalysisOutputFile>$(NarvaloAnalysisDir)$(AssemblyName).StyleCop.xml</SourceAnalysisOutputFile>
  </PropertyGroup>
</Project>