<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="12.0"
         DefaultTargets="Default"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    Options:
    - BeLean
    - OnlyNuGetProjects

    Usage:
    - Build all projects:
        MSBuild Narvalo.proj
    - Build only the "stable" projects:
        MSBuild Narvalo.proj /p:OnlyNuGetProjects=true

    *** IMPORTANT ***
    When upgrading VS, do not forget to update the VisualStudioVersion here,
    in Narvalo.props and build.cmd. We might also need to update $(SDK40ToolsPath).

    FIXME:
    - T4 re-generation has been disabled since it requires VS hosting.

    TODO:
    - Add another filter: Core, Mvp
    - Review all AssemblyInfo.cs (header, version).
    - $(RepositoryRoot) aliases -> tools, etc
    - NarvaloReportsDir
    - Use FAKE for versioning(?) and creation of NuGet packages.
    - Nuproj?
    - SecAnnotate
    - Code Coverage + Report Generator.
    - Artifacts
    - Merging, just for fun.

    REVIEW:
    - If PEVerify fails, does the error message appear on the command prompt.
    - Delay signing?
  -->

  <PropertyGroup>
    <!-- The default behaviour is to build all projects. -->
    <OnlyNuGetProjects Condition=" '$(OnlyNuGetProjects)' != 'true' ">false</OnlyNuGetProjects>
    <!-- 
      The default behaviour is to use our own defined Clean and Rebuild targets
      and not to delegate them to the one found in the projects. 
    -->
    <BeLean Condition=" '$(BeLean)' != 'true' ">false</BeLean>
  </PropertyGroup>

  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Release</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>

    <BuildInParallel Condition=" '$(BuildInParallel)' == '' And $(MSBuildNodeCount) &gt; 1 ">true</BuildInParallel>
    <BuildInParallel Condition=" '$(BuildInParallel)' == '' ">false</BuildInParallel>

    <VisualStudioVersion>12.0</VisualStudioVersion>
  </PropertyGroup>

  <PropertyGroup>
    <RepositoryRoot>$(MSBuildThisFileDirectory)</RepositoryRoot>
    <SolutionFile>$(RepositoryRoot)Narvalo.sln</SolutionFile>

    <WorkRoot>$(RepositoryRoot)work\</WorkRoot>
    <OutDir>$(WorkRoot)bin\$(Configuration)\</OutDir>
    <ReportsDir>$(WorkRoot)reports\</ReportsDir>

    <VerifyBuildDummyOutput>$(WorkRoot)obj\$(Configuration)\Narvalo.Verify.txt</VerifyBuildDummyOutput>
    <PEVerifyLogFile>$(WorkRoot)peverify.log</PEVerifyLogFile>
    <XUnitReportFile>$(ReportsDir)xunit.xml</XUnitReportFile>
    <NuGetCommand>$(RepositoryRoot)tools\NuGet\nuget.exe</NuGetCommand>
  </PropertyGroup>

  <Import Project="$(RepositoryRoot)tools\xUnit.tasks" />

  <Choose>
    <When Condition=" '$(OnlyNuGetProjects)' == 'false' ">
      <!-- 
        Solutions use the Configuration Manager which can lead to unexpected
        behaviour. For instance, a project might not have been selected for 
        building.
        WARNING: Solutions use "Any CPU" instead of "AnyCPU... 
      -->
      <!--
      <ItemGroup>
        <ProjectsToBuild Include="$(SolutionFile)"></ProjectsToBuild>
      </ItemGroup>
      <PropertyGroup>
      <Platform Condition=" '$(Platform)' == 'AnyCPU' ">Any CPU</Platform>
      </PropertyGroup>
      -->
      <ItemGroup>
        <ProjectsToBuild Include="$(RepositoryRoot)samples\**\*.csproj" />
        <ProjectsToBuild Include="$(RepositoryRoot)src\**\*.csproj" />
        <ProjectsToBuild Include="$(RepositoryRoot)tests\**\*.csproj" />
      </ItemGroup>
    </When>
    <Otherwise>
      <ItemGroup>
        <ProjectsToBuild Include="$(RepositoryRoot)src\Narvalo.Build\Narvalo.Build.csproj" />
        <ProjectsToBuild Include="$(RepositoryRoot)src\Narvalo.Common\Narvalo.Common.csproj" />
        <ProjectsToBuild Include="$(RepositoryRoot)src\Narvalo.Core\Narvalo.Core.csproj" />
        <ProjectsToBuild Include="$(RepositoryRoot)src\Narvalo.Mvp\Narvalo.Mvp.csproj" />
        <ProjectsToBuild Include="$(RepositoryRoot)src\Narvalo.Mvp.Web\Narvalo.Mvp.Web.csproj" />
        <ProjectsToBuild Include="$(RepositoryRoot)src\Narvalo.Web\Narvalo.Web.csproj" />
        <ProjectsToBuild Include="$(RepositoryRoot)tests\Narvalo.Mvp.Facts\Narvalo.Mvp.Facts.csproj" />
        <ProjectsToBuild Include="$(RepositoryRoot)tests\Narvalo.Facts\Narvalo.Facts.csproj" />
      </ItemGroup>
    </Otherwise>
  </Choose>

  <PropertyGroup>
    <!--
      Attempt to use a completely different working directory from the one used by VS.

      WARNING: When building a PCL project, MSBuild places its output inside
      a subdirectory of $(OutDir). To correct this, we instruct MSBuild to
      use the standard behaviour: GenerateProjectSpecificOutputFolder = false.

      Here is the documentation directly taken from:
        %ProgramFiles(x86)%\MSBuild\$(VisualStudioVersion)\Bin\Microsoft.Common.CurrentVersion.targets

      Several properties must be set in the main project file, before using this .TARGETS file.
      However, if the properties are not set, we pick some defaults.

      OutDir:
      Indicates the final output location for the project or solution. When building a solution,
      OutDir can be used to gather multiple project outputs in one location. In addition,
      OutDir is included in AssemblySearchPaths used for resolving references.

      OutputPath:
      This property is usually specified in the project file and is used to initialize OutDir.
      OutDir and OutputPath are distinguished for legacy reasons, and OutDir should be used if at all possible.

      BaseIntermediateOutputPath:
      This is the top level folder where all configuration specific intermediate output folders will be created.
      Default value is obj\

      IntermediateOutputPath:
      This is the full intermediate Output Path, and is derived from BaseIntermediateOutputPath, if none specified
      (eg. obj\debug). If this property is overridden, then setting BaseIntermediateOutputPath has no effect.
    -->
    <BuildProperties>
      Configuration=$(Configuration);
      Platform=$(Platform);
      BuildInParallel=$(BuildInParallel);
      BaseIntermediateOutputPath=$(WorkRoot)obj\;
      OutDir=$(OutDir);
      OutputPath=$(OutDir);
      GenerateProjectSpecificOutputFolder=false;
      VisualStudioVersion=$(VisualStudioVersion);
      CustomAfterNarvaloProps=$(RepositoryRoot)tools\Narvalo.CustomAfter.props;
      CustomBeforeNarvaloTargets=$(RepositoryRoot)tools\Narvalo.CustomBefore.targets;
      NarvaloRepositoryRoot=$(RepositoryRoot);
      NarvaloReportsDir=$(ReportsDir)
    </BuildProperties>
  </PropertyGroup>


  <!-- ### Public Targets ### -->

  <Target Name="Default" DependsOnTargets="Clean;Build;VerifyBuild;RunTests" />

  <PropertyGroup>
    <CleanDependsOn Condition=" '$(BeLean)' == 'true' ">LeanClean</CleanDependsOn>
    <CleanDependsOn Condition=" '$(BeLean)' != 'true' ">CoreClean</CleanDependsOn>
  </PropertyGroup>

  <Target Name="Clean" DependsOnTargets="$(CleanDependsOn)" />

  <Target Name="CoreClean">
    <Message Text="Cleaning..." Importance="high" />

    <RemoveDir Directories="$(WorkRoot)" />
  </Target>

  <Target Name="LeanClean">
    <MSBuild Projects="@(ProjectsToBuild)"
             Properties="$(BuildProperties)"
             BuildInParallel="$(BuildInParallel)"
             Targets="Clean" />
  </Target>

  <Target Name="DownloadNuGet" Condition=" !Exists('$(NuGetCommand)') ">
    <Message Text="Downloading latest version of NuGet..." Importance="high" />

    <PropertyGroup>
      <_NuGetDir>$([System.IO.Path]::GetDirectoryName($(NuGetCommand)))</_NuGetDir>
    </PropertyGroup>

    <MakeDir Directories="$(_NuGetDir)" Condition=" !Exists($(_NuGetDir)) " />

    <DownloadNuGet OutputFilePath="$(NuGetCommand)" />
  </Target>

  <Target Name="RestorePackages" DependsOnTargets="DownloadNuGet">
    <Message Text="Restoring NuGet packages..." Importance="high" />

    <Exec Command="&quot;$(NuGetCommand)&quot; restore &quot;$(SolutionFile)&quot; -NonInteractive -Verbosity quiet"
          LogStandardErrorAsError="true" />
  </Target>

  <!-- 
    WARNING: This target might fail if the packages were not previously restored. 
    We keep it that way to be able to perform fast builds during development.
  -->
  <Target Name="CoreBuild" DependsOnTargets="_CreateReportsDir">
    <MSBuild Projects="@(ProjectsToBuild)"
             Properties="$(BuildProperties)"
             BuildInParallel="$(BuildInParallel)"
             Targets="Build"
             StopOnFirstFailure="true">
      <Output ItemName="BuildOutputs" TaskParameter="TargetOutputs" />
    </MSBuild>
  </Target>

  <Target Name="Build" DependsOnTargets="RestorePackages;CoreBuild;_DeleteOriginalDocumentationFiles" />

  <PropertyGroup>
    <RebuildDependsOn Condition=" '$(BeLean)' == 'true' ">LeanRebuild</RebuildDependsOn>
    <RebuildDependsOn Condition=" '$(BeLean)' != 'true' ">CoreRebuild</RebuildDependsOn>
  </PropertyGroup>

  <Target Name="Rebuild" DependsOnTargets="$(RebuildDependsOn)" />

  <Target Name="CoreRebuild" DependsOnTargets="_FixRebuild;Clean;Build" />

  <Target Name="LeanRebuild">
    <MSBuild Projects="@(ProjectsToBuild)"
             Properties="$(BuildProperties)"
             BuildInParallel="$(BuildInParallel)"
             Targets="Rebuild"
             StopOnFirstFailure="true">
      <Output ItemName="BuildOutputs" TaskParameter="TargetOutputs" />
    </MSBuild>
  </Target>

  <Target Name="VerifyBuild"
          DependsOnTargets="CoreBuild"
          Inputs="@(BuildOutputs)"
          Outputs="$(VerifyBuildDummyOutput)">
    <PropertyGroup>
      <_PEVerifyCommand>$(SDK40ToolsPath)PEVerify.exe</_PEVerifyCommand>
      <_PEVerifyFound Condition=" Exists('$(_PEVerifyCommand)') ">true</_PEVerifyFound>
    </PropertyGroup>

    <Message Text="Verifying assemblies with PEVerify..."
             Importance="high" Condition=" '$(_PEVerifyFound)' == 'true' " />

    <Warning Text="Cannot verify assemblies. I was unable to find PEVerify.exe. It is part of the Visual Studio 2013 installation or the lighter .NET Framework SDK."
             ContinueOnError="true"
             Condition=" '$(_PEVerifyFound)' != 'true' " />

    <Delete Files="$(PEVerifyLogFile)" Condition=" Exists('$(PEVerifyLogFile)') " />

    <Exec Command="&quot;$(_PEVerifyCommand)&quot; &quot;%(BuildOutputs.FullPath)&quot; /nologo /md /il /unique >> &quot;$(PEVerifyLogFile)&quot;"
          LogStandardErrorAsError="true"
          Condition=" '$(_PEVerifyFound)' == 'true' "
          ContinueOnError="false" />

    <!-- Garder cette commande en fin de directive au cas où une vérification échoue. -->
    <Touch Files="$(VerifyBuildDummyOutput)" AlwaysCreate="true" />
  </Target>

  <Target Name="RunTests"
          DependsOnTargets="CoreBuild;_CreateReportsDir"
          Inputs="@(BuildOutputs)"
          Outputs="$(XUnitReportFile)">
    <ItemGroup>
      <_TestAssemblies Include="%(BuildOutputs.Identity)"
                       Condition=" '@(BuildOutputs->EndsWith('Facts.dll'))' == 'true' " />
    </ItemGroup>

    <Message Text="Running Xunit tests..."
             Importance="high"
             Condition=" '@(_TestAssemblies)' != '' " />

    <xunit Assemblies="@(_TestAssemblies)"
           Xml="$(XUnitReportFile)"
           Condition=" '@(_TestAssemblies)' != '' " />
  </Target>


  <!-- ### Private Targets ### -->

  <Target Name="_CreateReportsDir">
    <MakeDir Directories="$(ReportsDir)" Condition=" !Exists($(ReportsDir)) " />
  </Target>

  <Target Name="_DeleteOriginalDocumentationFiles">
    <Message Text="Deleting original XML documentation files (before Code Contracts)..."
             Importance="high"/>

    <ItemGroup>
      <_OriginalDocumentationFiles Include="$(OutDir)\*.xml.old" />
    </ItemGroup>

    <Delete Files="@(_OriginalDocumentationFiles)" />
  </Target>

  <Target Name="_FixRebuild">
    <!--
      StyleCop uses $(RebuildDependsOn) to modify the Build process.
      Here, we define Rebuild as Clean;Build, which means that StyleCop
      modifications of the Rebuild process won't apply since we never call
      the Rebuild target of MSBuild.

      The solution is to copy the original StyleCop modifications
      to the Build properties.

      Another (better?) solution is to define our Rebuild target
      so that it calls MSBuild with the Rebuild target. This is exactly
      what we do if BeLean is set to true.
    -->
    <PropertyGroup>
      <BuildProperties>
        $(BuildProperties);
        SourceAnalysisForceFullAnalysis=true
      </BuildProperties>
    </PropertyGroup>
  </Target>


  <!-- ### Tasks ### -->

  <PropertyGroup>
    <CodeTaskFactoryAssemblyFile>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</CodeTaskFactoryAssemblyFile>
  </PropertyGroup>

  <UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <OutputFilePath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
try {
    new WebClient().DownloadFile("https://nuget.org/nuget.exe", OutputFilePath);

    return true;
}
catch (Exception ex) {
    Log.LogErrorFromException(ex);
    return false;
}
         ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
