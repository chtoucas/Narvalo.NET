<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Define the CodeTaskFactoryAssemblyFile property. -->
  <PropertyGroup>
    <CodeTaskFactoryAssemblyFile>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</CodeTaskFactoryAssemblyFile>
  </PropertyGroup>

  <UsingTask TaskName="IncrementBuildAndRevisionNumbers" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <BuildNumber ParameterType="System.String" Output="true" />
      <RevisionNumber ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
// The algorithm used by .NET to auto-increment the assembly version is as follows:
//   The default build number increments daily. The default revision number is 
//   the number of seconds since midnight local time (without taking into account 
//   time zone adjustments for daylight saving time), divided by 2.
// For further informations, see: 
// http://msdn.microsoft.com/en-us/library/system.reflection.assemblyversionattribute.aspx
//
// Remarks:
// - this feature is only available to AssemblyVersion not to AssemblyFileVersion.
// - during the same day, two builds may end up with the same assembly version.
// - build and revision numbers must be less or equal to 65534 (UInt16.MaxValue - 1).
//
// Here I implement a slight variation of the same algorithm:
// - use UTC time.
// - count the number of days since 2014-12-01.
// - prefix the build number with "1" in the morning and "2" in the afternoon.
// - count the number of seconds since midnight in the morning and since 
//   midday in the afternoon.
// This way, there is less chances to get the same numbers during a single day
// on the same build machine. The scheme will break in approximately 27 years...
// Indeed the new prefix takes one digit in the build number, so we are left with 
// 4 digits (remember the 65534 limit).
var now = DateTime.UtcNow;
var isMorning = now.ToString("t") == "A";
var buildNumberPrefix = isMorning ? "1" : "2";
var startHour = isMorning ? 0 : 12;
BuildNumber = buildNumberPrefix + (now - new DateTime(2014, 12, 1)).Days.ToString();
RevisionNumber = ((int)(now - new DateTime(now.Year, now.Month, now.Day, startHour, 0, 0)).TotalSeconds).ToString();
         ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <OutputFilePath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
try {
    new WebClient().DownloadFile("https://nuget.org/nuget.exe", OutputFilePath);

    return true;
}
catch (Exception ex) {
    Log.LogErrorFromException(ex);
    
    return false;
}
         ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>