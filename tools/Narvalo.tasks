<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Define the CodeTaskFactoryAssemblyFile property. -->
  <PropertyGroup>
    <CodeTaskFactoryAssemblyFile>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</CodeTaskFactoryAssemblyFile>
  </PropertyGroup>

  <UsingTask TaskName="IncrementBuildAndRevisionNumbers" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <BuildNumber ParameterType="System.String" Output="true" />
      <RevisionNumber ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
// The algorithm used by .NET to auto-increment the assembly version is as follows:
// The default build number increments daily. The default revision number is 
// the number of seconds since midnight local time (without taking into account 
// time zone adjustments for daylight saving time), divided by 2.
// An important constraint is that build and revision numbers must be less or 
// equal to 65534 (UInt16.MaxValue - 1).
// For further informations, see: 
// http://msdn.microsoft.com/en-us/library/system.reflection.assemblyversionattribute.aspx
// Obviously, during the same day, two builds may end up with the same assembly
// version.
// Here I implement a slight variation of the same algorithm. 
// Instead of dividing by 2, I use the number of seconds divided by 1.3184 ie:
//   (number of seconds in a day) / (UInt16.MaxValue - 1).
// This method also proves to be useful since we can auto-increment the 
// AssemblyFileVersion attribute, something that is normally not possible.
var now = DateTime.Now;
BuildNumber = (now - new DateTime(2000, 1, 1)).Days.ToString();
RevisionNumber = ((int)((now - new DateTime(now.Year, now.Month, now.Day, 0, 0, 0)).TotalSeconds / 1.3184)).ToString();
         ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <OutputFilePath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
try {
    new WebClient().DownloadFile("https://nuget.org/nuget.exe", OutputFilePath);

    return true;
}
catch (Exception ex) {
    Log.LogErrorFromException(ex);
    
    return false;
}
         ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>