<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    This file is automatically imported just after Microsoft.Common.targets.
    See CustomAfterMicrosoftCommonTargets in Narvalo.Common.props for details.
  -->

  <!-- Import the original CustomAfterMicrosoftCommonTargets. -->
  <PropertyGroup>
    <CustomAfterMicrosoftCommonTargets>$(MSBuildExtensionsPath)\v$(MSBuildToolsVersion)\Custom.After.Microsoft.Common.targets</CustomAfterMicrosoftCommonTargets>
  </PropertyGroup>

  <Import Project="$(CustomAfterMicrosoftCommonTargets)"
          Condition=" Exists('$(CustomAfterMicrosoftCommonTargets)') "/>

  <!-- Import properties if not already done. -->
  <Import Project="$(MSBuildThisFileDirectory)Narvalo.Common.props"
          Condition=" '$(NarvaloCommonPropsImported)' != 'true' "/>

  <!-- If any, import custom targets.-->
  <Import Project="$(CustomBeforeNarvaloCommonTargets)"
          Condition=" '$(CustomBeforeNarvaloCommonTargets)' != '' " />

  <!-- Import StyleCop targets. -->
  <Import Project="$(MSBuildThisFileDirectory)Package.StyleCop.targets" />

  <!-- ### Microsoft Build Process ### -->
  <!--
    To modify the build process, use one of the extension points defined
    inside Microsoft.Common.targets.
    See http://msdn.microsoft.com/en-us/library/ms366724.aspx
  -->

  <!-- Use the BeforeBuildDependsOn property to add your custom targets to BeforeBuild. -->
  <Target Name="BeforeBuild" DependsOnTargets="$(BeforeBuildDependsOn)" />

  <!-- Use the AfterBuildDependsOn property to add your custom targets to AfterBuild. -->
  <Target Name="AfterBuild" DependsOnTargets="$(AfterBuildDependsOn)" />

  <!-- Use the BeforeCleanDependsOn property to add your custom targets to BeforeClean. -->
  <Target Name="BeforeClean" DependsOnTargets="$(BeforeCleanDependsOn)" />

  <!-- Use the AfterCleanDependsOn property to add your custom targets to AfterClean. -->
  <Target Name="AfterClean" DependsOnTargets="$(AfterCleanDependsOn)" />

  <!-- ### Analyzers Hooks ### -->

  <!-- See https://github.com/DotNetAnalyzers/StyleCopAnalyzers/issues/1618 -->
  <Target Name="DisableAnalyzersForVisualStudioBuild"
        BeforeTargets="CoreCompile"
        Condition="'$(BuildingInsideVisualStudio)' == 'True' And '$(BuildingProject)' == 'True'">
    <!--
    Disable analyzers when building a project inside Visual Studio. Note that analyzer behavior for IntelliSense
    purposes is not altered by this.
    -->
    <ItemGroup Condition=" '$(Configuration)' != 'Release' ">
      <Analyzer Remove="@(Analyzer)"/>
    </ItemGroup>
  </Target>

  <!-- ### Source Analysis Hooks ### -->
  <!--
    Below, use $(StyleCopEnabled) not $(SourceAnalysisEnabled) as this is the actual
    property set after importing StyleCop.targets.
  -->

  <Target Name="BeforeSourceAnalysis"
          BeforeTargets="StyleCop"
          Condition=" '$(StyleCopEnabled)' == 'true' ">
    <Message Text="Running Source Analysis on $(ProjectName)..." Importance="normal" />
  </Target>

  <Target Name="AfterSourceAnalysis"
          AfterTargets="StyleCop"
          Condition=" '$(StyleCopEnabled)' == 'true' ">
    <Message Text="Source Analysis Complete for $(ProjectName) -- $(StyleCopViolationCount) violation(s)"
             Importance="high" />
  </Target>

  <!-- ### Code Analysis Hooks ### -->
  <!--
    I wanted to replace the FxCop default messages to include the project name
    but the provided MSBuild targets make it difficult to hook inside the process.
  -->
  <!--<Target Name="BeforeCodeAnalysis"
          BeforeTargets="RunCodeAnalysis"
          Condition=" '$(RunCodeAnalysis)' == 'true' ">
    <Message Text="Running Code Analysis on $(ProjectName)..." Importance="normal" />
  </Target>

  <Target Name="AfterCodeAnalysis"
          BeforeTargets="RunCodeAnalysis"
          Condition=" '$(RunCodeAnalysis)' == 'true' ">
    <Message Text="Code Analysis Complete for $(ProjectName)..." Importance="high" />
  </Target>-->

  <!-- ### Code Contracts Hooks ### -->

  <Target Name="BeforeCodeContractsDocumentation"
        BeforeTargets="ContractXmlDocumentation"
        Condition=" '$(CodeContractsEmitXMLDocs)' == 'true' ">
    <Message Text="Building Code Contracts Documentation for $(ProjectName)..." Importance="normal" />
  </Target>

  <Target Name="AfterCodeContractsDocumentation"
          AfterTargets="ContractXmlDocumentation"
          Condition=" '$(CodeContractsEmitXMLDocs)' == 'true' ">
    <Message Text="Code Contracts Documentation Complete for $(ProjectName)" Importance="high" />
  </Target>

  <!--
    Use "CreateCodeContractReferenceAssembly" not "CodeContractReferenceAssembly",
    since "CodeContractReferenceAssembly" depends on it. Otherwise, the message
    will appear too late.
  -->
  <Target Name="BeforeCodeContractsReferenceAssembly"
          BeforeTargets="CreateCodeContractReferenceAssembly"
          Condition=" '$(CodeContractsReferenceAssembly)' == 'Build' ">
    <Message Text="Building Code Contracts Reference Assembly for $(ProjectName)..." Importance="normal" />
  </Target>

  <Target Name="AfterCodeContractsReferenceAssembly"
          AfterTargets="CodeContractReferenceAssembly"
          Condition=" '$(CodeContractsReferenceAssembly)' == 'Build' ">
    <Message Text="Code Contracts Reference Assembly Complete for $(ProjectName)" Importance="high" />
  </Target>

  <!-- ### After Imports ### -->

  <!-- If any, import custom global targets. -->
  <Import Project="$(CustomAfterNarvaloCommonTargets)"
          Condition=" '$(CustomAfterNarvaloCommonTargets)' != '' " />

  <!-- If any, import custom project properties. -->
  <Import Project="$(MSBuildProjectDirectory)\$(AssemblyName).targets"
          Condition=" Exists('$(MSBuildProjectDirectory)\$(AssemblyName).targets') "/>
</Project>