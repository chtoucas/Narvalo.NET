<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Define the CodeTaskFactoryAssemblyFile property.
       NB: With MSBuild v12.0 and lower, the assembly path is given by:
         $(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll -->
  <PropertyGroup>
    <CodeTaskFactoryAssemblyFile>$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</CodeTaskFactoryAssemblyFile>
  </PropertyGroup>

  <!-- WriteNuspec task. -->
  <UsingTask TaskName="WriteNuspec" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <TemplateFile ParameterType="System.String" Required="true" />
      <OutFile ParameterType="System.String" Required="true" />

      <Id ParameterType="System.String" Required="true" />
      <Version ParameterType="System.String" Required="true" />
      <Description ParameterType="System.String" Required="true" />
      <Files ParameterType="System.String" Required="true" />

      <Title ParameterType="System.String" />
      <Summary ParameterType="System.String" />
      <ProjectUrl ParameterType="System.String" />
      <ReleaseNotes ParameterType="System.String" />
      <Copyright ParameterType="System.String" />
      <Tags ParameterType="System.String" />
      <FrameworkAssemblies ParameterType="System.String" />
      <Dependencies ParameterType="System.String" />
      <References ParameterType="System.String" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
try {
    string nuspec = File.ReadAllText(TemplateFile)
      .Replace("$id$", Id)
      .Replace("$version$", Version)
      .Replace("$description$", Description)
      .Replace("$files$", Files)

      .Replace("$title$", String.IsNullOrWhiteSpace(Title) ? String.Empty : "<title>" + Title + "</title>")
      .Replace("$projectUrl$", String.IsNullOrWhiteSpace(Title) ? String.Empty : "<projectUrl>" + ProjectUrl + "</projectUrl>")
      .Replace("$summary$", String.IsNullOrWhiteSpace(Summary) ? String.Empty : "<summary>" + Summary + "</summary>")
      .Replace("$releaseNotes$", String.IsNullOrWhiteSpace(ReleaseNotes) ? String.Empty : "<releaseNotes>" + ReleaseNotes + "</releaseNotes>")
      .Replace("$copyright$", String.IsNullOrWhiteSpace(Copyright) ? String.Empty : "<copyright>" + Copyright + "</copyright>")
      .Replace("$tags$", String.IsNullOrWhiteSpace(Tags) ? String.Empty : "<tags>" + Tags + "</tags>")
      .Replace("$dependencies$", String.IsNullOrWhiteSpace(Dependencies) ? String.Empty : "<dependencies>" + Dependencies + "</dependencies>")
      .Replace("$references$", String.IsNullOrWhiteSpace(References) ? String.Empty : References)
      .Replace("$frameworkAssemblies$", String.IsNullOrWhiteSpace(FrameworkAssemblies) ? String.Empty : FrameworkAssemblies)
      ;

    File.WriteAllText(OutFile, nuspec);
}
catch (IOException ex) {
    Log.LogErrorFromException(ex);
}

return !Log.HasLoggedErrors;
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- GetBuildStampAsPreReleaseLabel task. -->
  <UsingTask TaskName="GetBuildStampAsPreReleaseLabel" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <BuildStamp ParameterType="System.String" Required="true" />
      <PreReleaseLabel ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
// Semantic versioning v1.0 has a weird behaviour: 1.0.0-EDGE1 < 1.0.0-EDGE10 < 1.0.0-EDGE2.
var stamp = String.Empty;

for (int i = 0; i < 10 - BuildStamp.Length; i++) { stamp += "0"; }

// WARNING: If you change EDGE to something else, you must also update NuGetAgent.
PreReleaseLabel = "EDGE" + stamp + BuildStamp;

return !Log.HasLoggedErrors;
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- FindProductVersion task. -->
  <UsingTask TaskName="FindProductVersion" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <AssemblyPath ParameterType="System.String" Required="true" />
      <Retail ParameterType="System.Boolean" Required="true" />
      <ProductVersion ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Xml" />
      <Reference Include="System.Xml.Linq"/>
      <Using Namespace="System" />
      <Using Namespace="System.Diagnostics" />
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
var version = FileVersionInfo.GetVersionInfo(AssemblyPath).ProductVersion ;

// Remove any build metadata.
int metadataIndex = version.LastIndexOf("+");
if (metadataIndex > 0) { version = version.Remove(metadataIndex); }

if (!Retail) {
    // In non-retail mode, we also remove the prerelease label since it is
    // dynamically replaced by a timestamp in Make.CustomAfter.targets.
    int prereleaseIndex = version.LastIndexOf("-");
    if (prereleaseIndex > 0) { version = version.Remove(prereleaseIndex); }

    // If you change what's below, also change __PatchNuProject in Make.CustomAfter.targets.
    // We automatically increment the patch version so that edge packages always
    // have a higher version number than the release package.
    int patchIndex = version.LastIndexOf(".");
    int patchVersion = Convert.ToInt32(version.Substring(patchIndex + 1));
    version = version.Substring(0, patchIndex + 1) + (1 + patchVersion).ToString();
}

ProductVersion = version;

return !Log.HasLoggedErrors;
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- ReadDependenciesFromPackagesConfig task. -->
  <UsingTask TaskName="ReadDependenciesFromPackagesConfig" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <!-- Quick and dirty task to transform a packages.config to a dependencies XML string usable in nuspec. -->
    <ParameterGroup>
      <Config ParameterType="System.String" Required="true" />
      <Dependencies ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Xml" />
      <Reference Include="System.Xml.Linq"/>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Xml" />
      <Using Namespace="System.Xml.Linq" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
using (var reader = XmlReader.Create(Config)) {
  var rootElement = XElement.Load(reader, LoadOptions.None);

  var packages = rootElement.Elements("package");

  foreach (var package in packages) {
    Dependencies += String.Format(
      "\n<dependency id=\"{0}\" version=\"{1}\" />",
      package.Attribute("id").Value,
      package.Attribute("version").Value);
  }

  if (Dependencies.Length != 0) {
    Dependencies += "\n    ";
  }
}

return !Log.HasLoggedErrors;
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- Mark the file as already imported. -->
  <PropertyGroup>
    <MakeCustomTasksImported>true</MakeCustomTasksImported>
  </PropertyGroup>
</Project>