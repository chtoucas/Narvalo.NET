<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Define the CodeTaskFactoryAssemblyFile property. -->
  <PropertyGroup>
    <CodeTaskFactoryAssemblyFile>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</CodeTaskFactoryAssemblyFile>
  </PropertyGroup>

  <UsingTask TaskName="IncrementBuildAndRevisionNumbers" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <BuildNumber ParameterType="System.UInt16" Output="true" />
      <RevisionNumber ParameterType="System.UInt16" Output="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
// The algorithm used by .NET to auto-increment the assembly version is as follows:
//   The default build number increments daily. The default revision number is
//   the number of seconds since midnight local time (without taking into account
//   time zone adjustments for daylight saving time), divided by 2.
// For further informations, see:
// http://msdn.microsoft.com/en-us/library/system.reflection.assemblyversionattribute.aspx
//
// Remarks:
// - this feature is only available to AssemblyVersion not to AssemblyFileVersion.
// - during the same day, two builds may end up with the same assembly version.
// - build and revision numbers must be less or equal to 65534 (UInt16.MaxValue - 1).
//
// Here I implement a slight variation of the same algorithm:
// - use UTC time.
// - the build number is the number of half-days since 2014-12-01 
//   (minus one to start at zero).
// - the revision number is the number of seconds since midnight in the morning 
//   and since midday in the afternoon.
// This way, there is less chance of getting the same numbers during 
// a single day on the same build machine. The scheme will break in 
// approximately 89 years...
// Worth reminding, if we used a scheme that simply incremented the build 
// numbers, we would generate a lot of unecessary holes in the sequence.
// Indeed due to incremental batching a build might not do anything.
// That's a good reason to use an algorithm that only depends on the date 
// and the time.
var now = DateTime.UtcNow;
var isMorning = now.Hour < 12;
var numberOfHalfDays = 2 * (now - new DateTime(2014, 11, 30)).Days - (isMorning ? 1 : 0);
var numberOfSeconds = (now - new DateTime(now.Year, now.Month, now.Day, isMorning ? 0 : 12, 0, 0)).TotalSeconds;

BuildNumber = (ushort)(numberOfHalfDays - 1);
RevisionNumber = (ushort)numberOfSeconds;

return true;
         ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="CreateNuspec" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <Nuspec ParameterType="System.String" Required="true" />
      <Version ParameterType="System.String" Required="true" />
      <OutFile ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
// REVIEW: I guess these checks are unnecessary.        
if (String.IsNullOrEmpty(Nuspec)) {
    Log.LogError("Nuspec can not be null or empty.");
    return false;
}
if (String.IsNullOrEmpty(OutFile)) {
    Log.LogError("OutFile can not be null or empty.");
    return false;
}

try {
    string template = File.ReadAllText(Nuspec)
      .Replace("$version$", Version);

    File.WriteAllText(OutFile, template);
}
catch (IOException ex) {
    Log.LogErrorFromException(ex);
}

return !Log.HasLoggedErrors;
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>