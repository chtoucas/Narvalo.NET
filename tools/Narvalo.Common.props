<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    This MSBuild file defines a common set of Build Properties.
    You can still override any of them but this should not be the default.

    Each project should import this file:
      <Import Project="..\..\tools\Narvalo.Common.props" />
    If the project does not follow the default repository layout, use instead:
      <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), Make.proj))\tools\Narvalo.Common.props" />

    WARNING: Make sure the import is located just before Microsoft targets.
  -->

  <!-- Import shared properties. -->
  <Import Project="$(MSBuildThisFileDirectory)Shared.props" />

  <!-- If any, import custom global properties. -->
  <Import Project="$(CustomBeforeNarvaloCommonProps)"
          Condition=" '$(CustomBeforeNarvaloCommonProps)' != '' " />

  <!-- Instruct MSBuild to import Narvalo.Common.targets after Microsoft.Common.targets. -->
  <PropertyGroup>
    <!-- WARNING: Overriding this property may lead to unexpected results.
         Microsoft.Common.targets will completely ignore the original targets
         file. A simple workaround is to import in Narvalo.Common.targets 
         the original system-wide custom after targets. -->
    <CustomAfterMicrosoftCommonTargets>$(MSBuildThisFileDirectory)Narvalo.Common.targets</CustomAfterMicrosoftCommonTargets>
  </PropertyGroup>

  <!-- Microsoft Common Properties -->
  <PropertyGroup>
    <TargetFrameworkVersion Condition=" '$(TargetFrameworkVersion)' == '' ">v4.5</TargetFrameworkVersion>

    <AppDesignerFolder Condition=" '$(AppDesignerFolder)' == '' ">Properties</AppDesignerFolder>
    <OutputType Condition=" '$(OutputType)' == '' ">Library</OutputType>

    <PlatformTarget>AnyCPU</PlatformTarget>
    <Prefer32Bit>false</Prefer32Bit>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <WarningLevel>4</WarningLevel>
    <!-- Disable compiler warnings for missing documentation. -->
    <NoWarn>1591</NoWarn>
    <OutputPath>bin\$(Configuration)\</OutputPath>
    <RegisterForComInterop>false</RegisterForComInterop>
    <GenerateSerializationAssemblies>Auto</GenerateSerializationAssemblies>

    <LangVersion>default</LangVersion>
    <ErrorReport>prompt</ErrorReport>
    <FileAlignment>512</FileAlignment>

    <!-- Only released assemblies are signed. See Make.proj. -->
    <SignAssembly>false</SignAssembly>

    <DefaultLanguage>en-US</DefaultLanguage>

    <UseVSHostingProcess>false</UseVSHostingProcess>
  </PropertyGroup>

  <!--
    Debug configuration is optimized for build speed.
    Release configuration is optimized for execution speed.
    This explains why I choose to only check for overflow/underflow
    in Debug configuration (FIXME).
  -->

  <!-- Debug configuration -->
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <DefineConstants>TRACE;DEBUG</DefineConstants>
    <CheckForOverflowUnderflow>true</CheckForOverflowUnderflow>
  </PropertyGroup>

  <!-- Release configuration -->
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugSymbols>false</DebugSymbols>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>$(OutputPath)$(AssemblyName).xml</DocumentationFile>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
  </PropertyGroup>

  <!-- Additional files -->
  <ItemGroup>
    <!-- Unfortunately, when done here, the files won't appear in VS (even
         if they are declared as linked files).
         Also a file update won't be caught immediately by VS. -->
    <Compile Include="$(RepositorySettingsDir)AssemblyInfo.Common.cs" />
    <Compile Include="$(RepositorySettingsDir)GlobalSuppressions.Common.cs" />

    <CodeAnalysisDictionary Include="$(RepositorySettingsDir)CodeAnalysisDictionary.xml" />
  </ItemGroup>

  <!-- Code Analysis -->
  <!--
    For a complete list of available options, see
      %ProgramFiles%\MSBuild\Microsoft\VisualStudio\v$(VisualStudioVersion)\CodeAnalysis\Microsoft.CodeAnalysis.Targets
  -->
  <PropertyGroup>
    <RunCodeAnalysis Condition=" '$(RunCodeAnalysis)' != 'true' ">false</RunCodeAnalysis>

    <DefineConstants Condition=" '$(RunCodeAnalysis)' == 'true' ">$(DefineConstants);CODE_ANALYSIS</DefineConstants>

    <!-- The default behaviour is to use a strict ruleset. -->
    <CodeAnalysisRuleSet>$(RepositorySettingsDir)Strict.ruleset</CodeAnalysisRuleSet>

    <!-- Process generated files (.g.cs). -->
    <CodeAnalysisIgnoreGeneratedCode>false</CodeAnalysisIgnoreGeneratedCode>

    <CodeAnalysisTreatWarningsAsErrors>false</CodeAnalysisTreatWarningsAsErrors>
  </PropertyGroup>

  <!-- Security Annotations. -->
  <PropertyGroup>
    <EnableSecurityAnnotations Condition=" '$(EnableSecurityAnnotations)' != 'true' ">false</EnableSecurityAnnotations>

    <DefineConstants Condition=" '$(EnableSecurityAnnotations)' == 'true' ">$(DefineConstants);SECURITY_ANNOTATIONS</DefineConstants>
  </PropertyGroup>

  <!-- T4 -->
  <PropertyGroup>
    <T4NarvaloLibrary>$(MSBuildThisFileDirectory)lib\Narvalo.T4.v$(VisualStudioVersion).dll</T4NarvaloLibrary>
    <T4NarvaloTemplates>$(RepositoryRoot)src\Narvalo.T4\CodeTemplates</T4NarvaloTemplates>
  </PropertyGroup>

  <ItemGroup>
    <T4ParameterValues Include="T4NarvaloLibrary">
      <Value>$(T4NarvaloLibrary)</Value>
    </T4ParameterValues>
    <T4ParameterValues Include="T4NarvaloTemplates">
      <Value>$(T4NarvaloTemplates)</Value>
    </T4ParameterValues>
  </ItemGroup>

  <!-- If any, import custom project properties. -->
  <Import Project="$(MSBuildProjectDirectory)\$(AssemblyName).props"
          Condition=" Exists('$(MSBuildProjectDirectory)\$(AssemblyName).props') "/>

  <!-- If any, import custom global properties. -->
  <Import Project="$(CustomAfterNarvaloCommonProps)"
          Condition=" '$(CustomAfterNarvaloCommonProps)' != '' " />

  <!-- Mark Narvalo.Common.props as already imported. -->
  <PropertyGroup>
    <NarvaloCommonPropsImported>true</NarvaloCommonPropsImported>
  </PropertyGroup>
</Project>