<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    This MSBuild file defines a common set of Build Properties.
    You can still override any of them but this should not be the default.

    Each project should import this file:
      <Import Project="..\..\tools\Narvalo.Common.props" />
    If the project does not follow the default repository layout, use instead:
      <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), Make.proj))\tools\Narvalo.Common.props" />

    WARNING: Make sure the import is located just before Microsoft targets.
  -->

  <!-- Import shared properties. -->
  <Import Project="$(MSBuildThisFileDirectory)Shared.props" />

  <!-- If any, import custom global properties. -->
  <Import Project="$(CustomBeforeNarvaloCommonProps)"
          Condition=" '$(CustomBeforeNarvaloCommonProps)' != '' " />

  <!-- Instruct MSBuild to import Narvalo.Common.targets after Microsoft.Common.targets. -->
  <PropertyGroup>
    <!-- WARNING: Overriding this property may lead to unexpected results.
         Microsoft.Common.targets will completely ignore the original targets
         file which, by the way, is used by Code Contracts. A simple workaround
         is to import in Narvalo.Common.targets the orignal system-wide custom
         after targets. -->
    <CustomAfterMicrosoftCommonTargets>$(MSBuildThisFileDirectory)Narvalo.Common.targets</CustomAfterMicrosoftCommonTargets>
  </PropertyGroup>

  <!-- Microsoft Common Properties -->
  <PropertyGroup>
    <TargetFrameworkVersion Condition=" '$(TargetFrameworkVersion)' == '' ">v4.5</TargetFrameworkVersion>

    <PlatformTarget>AnyCPU</PlatformTarget>
    <Prefer32Bit>false</Prefer32Bit>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <WarningLevel>4</WarningLevel>
    <!-- Disable compiler warnings for missing documentation. -->
    <NoWarn>1591</NoWarn>
    <OutputPath>bin\$(Configuration)\</OutputPath>
    <RegisterForComInterop>false</RegisterForComInterop>
    <GenerateSerializationAssemblies>Auto</GenerateSerializationAssemblies>
    <CheckForOverflowUnderflow>true</CheckForOverflowUnderflow>

    <LangVersion>default</LangVersion>
    <ErrorReport>prompt</ErrorReport>
    <FileAlignment>512</FileAlignment>

    <!-- Only released assemblies are signed. See Make.proj. -->
    <SignAssembly>false</SignAssembly>

    <DefaultLanguage>en-US</DefaultLanguage>
  </PropertyGroup>

  <!--
    Debug configuration is optimized for build speed.
    Release configuration is optimized for execution speed.
    CodeContracts configuration focuses on Code Contracts!
    This explains why I choose to only check for overflow/underflow
    in Debug configuration.
  -->

  <!-- Debug configuration -->
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <DefineConstants>TRACE;DEBUG</DefineConstants>
  </PropertyGroup>

  <!-- Release configuration -->
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugSymbols>false</DebugSymbols>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>$(OutputPath)$(AssemblyName).xml</DocumentationFile>
  </PropertyGroup>

  <!-- CodeContracts configuration -->
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'CodeContracts|AnyCPU' ">
    <DebugSymbols>false</DebugSymbols>
    <DebugType>none</DebugType>
    <Optimize>false</Optimize>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <!-- WARNING: Do not add the CODE_ANALYSIS symbol. Inside VS, it would cause
         FxCop to run automatically on build but Code Contracts and Code Analysis
         don't play well together. Anyway, the build is already slow enough in this
         confguration. Otherwise, note that the Code Contracts rewriter will
         define the CODE_ANALYSIS symbol. -->
    <DefineConstants>TRACE;CONTRACTS_FULL</DefineConstants>
  </PropertyGroup>

  <!-- Inside VS, we would like to always define the Code Contracts symbol; otherwise many lines
       are unreachable, leading to broken sources after refactoring. Unfortunately it does not
       play nicely with the VS environment: compiling is fine but running anything is broken. -->
  <!--<PropertyGroup Condition=" '$(BuildingInsideVisualStudio)' == 'true' ">
    <DefineConstants
      Condition=" '$(Configuration)' != 'CodeContracts' And '$(CodeContractsRunCodeAnalysis)' != 'true' ">$(DefineConstants);CONTRACTS_FULL</DefineConstants>
  </PropertyGroup>-->

  <!-- Additional files -->
  <ItemGroup>
    <!-- Unfortunately, when done here, the files won't appear in VS (even
         if they are declared as linked files).
         Also a file update won't be caught immediately by VS. -->
    <Compile Include="$(RepositorySettingsDir)AssemblyInfo.Common.cs" />
    <Compile Include="$(RepositorySettingsDir)GlobalSuppressions.Common.cs" />

    <CodeAnalysisDictionary Include="$(RepositorySettingsDir)CodeAnalysisDictionary.xml" />
  </ItemGroup>

  <!-- Source Analysis -->
  <!--
    For a complete list of available options, see
      packages\StyleCop.MSBuild.*\build\StyleCop.MSBuild.Targets.
  -->
  <!-- Inside VS, we automatically run StyleCop in Release builds. -->
  <PropertyGroup Condition=" '$(BuildingInsideVisualStudio)' == 'true' ">
    <SourceAnalysisEnabled Condition=" '$(Configuration)' == 'Release' ">true</SourceAnalysisEnabled>
  </PropertyGroup>

  <PropertyGroup>
    <SourceAnalysisEnabled Condition=" '$(SourceAnalysisEnabled)' != 'true' ">false</SourceAnalysisEnabled>

    <!-- Right now, we enable all StyleCop rules except the documentation ones. -->
    <SourceAnalysisOverrideSettingsFile>$(RepositorySettingsDir)Loosy.SourceAnalysis</SourceAnalysisOverrideSettingsFile>

    <!-- Do not treat warnings as errors. -->
    <SourceAnalysisTreatErrorsAsWarnings>true</SourceAnalysisTreatErrorsAsWarnings>
  </PropertyGroup>

  <!-- WARNING: When StyleCop is called from the menu, it only uses the dll in the install directory for StyleCop. -->
  <ItemGroup>
    <StyleCopAdditionalAddinPaths Include="$(MSBuildThisFileDirectory)lib\StyleCop" />
  </ItemGroup>

  <!-- Exclude temporary files from StyleCop. -->
  <ItemGroup>
    <ExcludeFromStyleCop Include="$(IntermediateOutputPath)\**\*.cs" >
      <Visible>False</Visible>
    </ExcludeFromStyleCop>
  </ItemGroup>

  <!-- Code Analysis -->
  <!--
    For a complete list of available options, see
      %ProgramFiles%\MSBuild\Microsoft\VisualStudio\v$(VisualStudioVersion)\CodeAnalysis\Microsoft.CodeAnalysis.Targets
  -->
  <PropertyGroup>
    <RunCodeAnalysis Condition=" '$(RunCodeAnalysis)' != 'true' ">false</RunCodeAnalysis>

    <DefineConstants Condition=" '$(RunCodeAnalysis)' == 'true' ">$(DefineConstants);CODE_ANALYSIS</DefineConstants>

    <!-- The default behaviour is to use a strict ruleset.
         For performance reasons we use a minimal ruleset when using Code
         Contracts. Also Code Contracts produce assemblies that are not
         compatible with Code Analysis. -->
    <CodeAnalysisRuleSet Condition=" '$(Configuration)' == 'CodeContracts' ">MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
    <CodeAnalysisRuleSet Condition=" '$(Configuration)' != 'CodeContracts' ">$(RepositorySettingsDir)Strict.ruleset</CodeAnalysisRuleSet>

    <!-- Process generated files (.g.cs). -->
    <CodeAnalysisIgnoreGeneratedCode>false</CodeAnalysisIgnoreGeneratedCode>

    <CodeAnalysisTreatWarningsAsErrors>false</CodeAnalysisTreatWarningsAsErrors>
  </PropertyGroup>

  <!-- Gendarme Analysis -->
  <PropertyGroup>
    <EnableGendarme Condition=" '$(EnableGendarme)' != 'true' ">false</EnableGendarme>

    <DefineConstants Condition=" '$(EnableGendarme)' == 'true' ">$(DefineConstants);CODE_ANALYSIS</DefineConstants>
  </PropertyGroup>

  <!-- Code Contracts -->
  <!--
    For a complete list of available options, see
      %ProgramFiles%\Microsoft\Contracts\MsBuild\v$(VisualStudioVersion)\Microsoft.CodeContractAnalysis.targets
      %ProgramFiles%\Microsoft\Contracts\MsBuild\v$(VisualStudioVersion)\Microsoft.CodeContracts.targets

    We do not really enforce any policy for Code Contracts as they are not
    currently used by all projects. When enabling Code Contracts on a project,
    you should also add the following lines to {AssemblyName}.props:
      <PropertyGroup Condition=" '$(BuildingInsideVisualStudio)' != 'true' ">
        <CodeContractsReferenceAssembly>Build</CodeContractsReferenceAssembly>
      </PropertyGroup>
    On CodeContracts Build, configuration is exclusively done inside VS.
    Even so, let's set some reasonable defaults.
  -->
  <PropertyGroup>
    <!-- Use "Custom Parameter Validation". -->
    <CodeContractsAssemblyMode>0</CodeContractsAssemblyMode>
    <!-- Only meaningful inside VS, anyway I find the result confusing. -->
    <CodeContractsShowSquigglies>false</CodeContractsShowSquigglies>
    <!-- Extra CCChecker options. -->
    <CodeContractsExtraAnalysisOptions>-outputwarnmasks -show unreached</CodeContractsExtraAnalysisOptions>

    <!-- For command-line builds the following settings are reversed. -->
    <CodeContractsFailBuildOnWarnings>false</CodeContractsFailBuildOnWarnings>
    <CodeContractsRunInBackground>true</CodeContractsRunInBackground>
  </PropertyGroup>

  <!-- T4 -->
  <PropertyGroup>
    <T4NarvaloLibrary>$(MSBuildThisFileDirectory)lib\Narvalo.T4.v$(VisualStudioVersion).dll</T4NarvaloLibrary>
    <T4NarvaloTemplates>$(RepositoryRoot)src\Narvalo.T4\CodeTemplates</T4NarvaloTemplates>
  </PropertyGroup>

  <ItemGroup>
    <T4ParameterValues Include="T4NarvaloLibrary">
      <Value>$(T4NarvaloLibrary)</Value>
    </T4ParameterValues>
    <T4ParameterValues Include="T4NarvaloTemplates">
      <Value>$(T4NarvaloTemplates)</Value>
    </T4ParameterValues>
  </ItemGroup>

  <!-- If any, import custom project properties. -->
  <Import Project="$(MSBuildProjectDirectory)\$(AssemblyName).props"
          Condition=" Exists('$(MSBuildProjectDirectory)\$(AssemblyName).props') "/>

  <!-- If any, import custom global properties. -->
  <Import Project="$(CustomAfterNarvaloCommonProps)"
          Condition=" '$(CustomAfterNarvaloCommonProps)' != '' " />

  <!-- Mark Narvalo.Common.props as already imported. -->
  <PropertyGroup>
    <NarvaloCommonPropsImported>true</NarvaloCommonPropsImported>
  </PropertyGroup>
</Project>