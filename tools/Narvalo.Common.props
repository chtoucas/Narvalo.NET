<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    This MSBuild file defines a common set of Build Properties.
    You can still override any of them but this should not be the default.

    Options:
    - CustomBeforeNarvaloCommonProps
    - CustomAfterNarvaloCommonProps
    - CustomBeforeNarvaloCommonTargets
    - CustomAfterNarvaloCommonTargets
    - DummyGeneratedVersion
    
    Other options may be found in Shared.props.

    Each project should import this file:
      <Import Project="..\..\tools\Narvalo.Common.props" />
    If the project does not follow the default repository layout, use instead:
      <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), Make.proj))\tools\Narvalo.Common.props" />
    
    WARNING: Make sure the import is located just before Microsoft targets.
  -->


  <!-- ### Imports ### -->

  <!-- Import shared properties. -->
  <Import Project="$(MSBuildThisFileDirectory)Shared.props" />
  
  <!-- If any, import custom global properties. -->
  <Import Project="$(CustomBeforeNarvaloCommonProps)"
          Condition=" '$(CustomBeforeNarvaloCommonProps)' != '' And Exists('$(CustomBeforeNarvaloCommonProps)')" />

  <!-- Instruct MSBuild to import Narvalo.Common.targets after Microsoft.Common.targets. -->
  <PropertyGroup>
    <!-- WARNING: Overriding this property may lead to unexpected results. 
         Microsoft.Common.targets will completely ignore the original targets 
         file which, by the way, is used by Code Contracts. A simple workaround 
         is to import in Narvalo.Common.targets the orignal system-wide custom 
         after targets. -->
    <CustomAfterMicrosoftCommonTargets>$(MSBuildThisFileDirectory)Narvalo.Common.targets</CustomAfterMicrosoftCommonTargets>
  </PropertyGroup>

  <!-- Define the DummyGeneratedVersion property. -->
  <PropertyGroup>
    <!-- If true, use a dummy version. Default to false. -->
    <DummyGeneratedVersion Condition=" '$(DummyGeneratedVersion)' != 'true' ">false</DummyGeneratedVersion>
  </PropertyGroup>


  <!-- ### Microsoft Common Properties ### -->

  <PropertyGroup>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>

    <PlatformTarget>AnyCPU</PlatformTarget>
    <Prefer32Bit>false</Prefer32Bit>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <WarningLevel>4</WarningLevel>
    <!-- Disable compiler warnings for missing documentation. -->
    <NoWarn>1591</NoWarn>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <OutputPath>bin\$(Configuration)\</OutputPath>
    <RegisterForComInterop>false</RegisterForComInterop>
    <GenerateSerializationAssemblies>Auto</GenerateSerializationAssemblies>

    <LangVersion>default</LangVersion>
    <ErrorReport>prompt</ErrorReport>
    <FileAlignment>512</FileAlignment>

    <!-- Only released assemblies are signed. See Make.proj. -->
    <SignAssembly>false</SignAssembly>
  </PropertyGroup>

  <!-- 
    Debug configuration is optimized for build speed.
    Release configuration is optimized for execution speed.
    CodeContracts configuration focuses on Code Contracts!
    This explains why I choose to only check for overflow/underflow 
    in Debug configuration.
  -->

  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <DefineConstants>TRACE;DEBUG</DefineConstants>
    <CheckForOverflowUnderflow>true</CheckForOverflowUnderflow>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugSymbols>false</DebugSymbols>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <DefineConstants>TRACE;CODE_ANALYSIS</DefineConstants>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <DocumentationFile>$(OutputPath)$(AssemblyName).xml</DocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'CodeContracts|AnyCPU' ">
    <DebugSymbols>false</DebugSymbols>
    <DebugType>none</DebugType>
    <Optimize>false</Optimize>
    <!-- WARNING: Keep the DEBUG symbol since Contract.Assert and Contract.Assume
         depend on it. Do not add the CODE_ANALYSIS symbol; Code Contracts
         and Code Analysis don't play well together. -->
    <DefineConstants>TRACE;DEBUG;CONTRACTS_FULL</DefineConstants>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(DummyGeneratedVersion)' == 'true' ">
    <DefineConstants>$(DefineConstants);DUMMY_GENERATED_VERSION</DefineConstants>
  </PropertyGroup>


  <!-- ### Additional Files ### -->

  <ItemGroup>
    <!-- Unfortunately, when done here, the files won't appear in VS (even 
         if they are declared as linked files). 
         Also a file update won't be caught immediately by VS. -->
    <Compile Include="$(RepositorySettingsDir)AssemblyInfo.Common.cs" />
    <Compile Include="$(RepositorySettingsDir)GlobalSuppressions.Common.cs" />

    <CodeAnalysisDictionary Include="$(RepositorySettingsDir)CodeAnalysisDictionary.xml" />
  </ItemGroup>


  <!-- ### Source Analysis ### -->
  <!-- 
    For a complete list of available options, see
      packages\StyleCop.MSBuild.*\build\StyleCop.MSBuild.Targets.
  -->

  <PropertyGroup>
    <!-- Only in Release configuration is Source Analysis automatically run.
         Inside VS, you can still perform manual Source Analysis for any Build 
         configuration. -->
    <SourceAnalysisEnabled Condition=" '$(Configuration)' == 'Release' ">true</SourceAnalysisEnabled>
    <SourceAnalysisEnabled Condition=" '$(Configuration)' != 'Release' ">false</SourceAnalysisEnabled>

    <SourceAnalysisOverrideSettingsFile>$(RepositorySettingsDir)Settings.SourceAnalysis</SourceAnalysisOverrideSettingsFile>

    <SourceAnalysisTreatErrorsAsWarnings>false</SourceAnalysisTreatErrorsAsWarnings>
  </PropertyGroup>


  <!-- ### Code Analysis ### -->
  <!--
    For a complete list of available options, see
      %ProgramFiles%\MSBuild\Microsoft\VisualStudio\v$(VisualStudioVersion)\CodeAnalysis\Microsoft.CodeAnalysis.Targets
  -->

  <PropertyGroup>
    <!-- Only in Release configuration is Code Analysis automatically run.
         Inside VS, you can still perform manual Code Analysis for any Build 
         configuration. -->
    <RunCodeAnalysis Condition=" '$(Configuration)' == 'Release' ">true</RunCodeAnalysis>
    <RunCodeAnalysis Condition=" '$(Configuration)' != 'Release' ">false</RunCodeAnalysis>

    <!-- The default behaviour is to use a very strict ruleset.
         For performance reasons we use a minimal ruleset when using Code
         Contracts. Also Code Contracts produce assemblies that are not
         compatible with Code Analysis. -->
    <CodeAnalysisRuleSet Condition=" '$(Configuration)' == 'CodeContracts' ">MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
    <CodeAnalysisRuleSet Condition=" '$(Configuration)' != 'CodeContracts' ">$(RepositorySettingsDir)Strict.ruleset</CodeAnalysisRuleSet>

    <!-- Process generated files (.g.cs). -->
    <CodeAnalysisIgnoreGeneratedCode>false</CodeAnalysisIgnoreGeneratedCode>
    <CodeAnalysisTreatWarningsAsErrors>false</CodeAnalysisTreatWarningsAsErrors>
  </PropertyGroup>


  <!-- ### Code Contracts ### -->
  <!--
    For a complete list of available options, see
      %ProgramFiles%\Microsoft\Contracts\MsBuild\v$(VisualStudioVersion)\Microsoft.CodeContractAnalysis.targets
      %ProgramFiles%\Microsoft\Contracts\MsBuild\v$(VisualStudioVersion)\Microsoft.CodeContracts.targets

    We do not really enforce any policy for Code Contracts as they are not
    currently used by all projects. When enabling Code Contracts on a project,
    you should manually add the following lines, on Release configuration:
      <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
        <CodeContractsReferenceAssembly>Build</CodeContractsReferenceAssembly>
        <CodeContractsEmitXMLDocs>True</CodeContractsEmitXMLDocs>
      </PropertyGroup>
    On CodeContracts Build, configuration is exclusively done inside VS.
    Even so, let's set some reasonable defaults.
  -->

  <PropertyGroup>
    <!-- Use "Custom Parameter Validation". -->
    <CodeContractsAssemblyMode>0</CodeContractsAssemblyMode>

    <!-- Runtime Checking. -->
    <!--<CodeContractsEnableRuntimeChecking>False</CodeContractsEnableRuntimeChecking>-->
    <CodeContractsRuntimeCheckingLevel>Full</CodeContractsRuntimeCheckingLevel>
    <CodeContractsRuntimeOnlyPublicSurface>False</CodeContractsRuntimeOnlyPublicSurface>
    <CodeContractsRuntimeThrowOnFailure>True</CodeContractsRuntimeThrowOnFailure>
    <CodeContractsRuntimeCallSiteRequires>True</CodeContractsRuntimeCallSiteRequires>
    <CodeContractsRuntimeSkipQuantifiers>False</CodeContractsRuntimeSkipQuantifiers>

    <!-- Static Checking. -->
    <!--<CodeContractsRunCodeAnalysis>False</CodeContractsRunCodeAnalysis>-->
    <CodeContractsRunInBackground>True</CodeContractsRunInBackground>
    <!-- Only meaningful inside VS but I find the result confusing. -->
    <CodeContractsShowSquigglies>False</CodeContractsShowSquigglies>
    <CodeContractsFailBuildOnWarnings>False</CodeContractsFailBuildOnWarnings>

    <!-- Contract Reference Assembly. -->
    <!--<CodeContractsReferenceAssembly>%28none%29</CodeContractsReferenceAssembly>-->
    <!--<CodeContractsEmitXMLDocs>True</CodeContractsEmitXMLDocs>-->
  </PropertyGroup>


  <!-- If any, import custom global properties. -->
  <Import Project="$(CustomAfterNarvaloCommonProps)"
          Condition=" '$(CustomAfterNarvaloCommonProps)' != '' And Exists('$(CustomAfterNarvaloCommonProps)') " />

  <!-- If any, import custom project properties. 
       This file is imported last. Should only exist when we have to test
       something on a project and then removed. -->
  <Import Project="$(MSBuildProjectDirectory)\$(AssemblyName).props"
          Condition=" Exists('$(MSBuildProjectDirectory)\$(AssemblyName).props') "/>

  <!-- Mark Make.Common.props as already imported. -->
  <PropertyGroup>
    <NarvaloCommonPropsImported>true</NarvaloCommonPropsImported>
  </PropertyGroup>
</Project>