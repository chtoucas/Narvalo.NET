<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    This file is injected at the end of Narvalo.Common.targets by Make.proj.
  -->

  <PropertyGroup>
    <BeforeBuildDependsOn>
      $(BeforeBuildDependsOn);
      CreateAssemblyVersionFile
    </BeforeBuildDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <AfterBuildDependsOn>
      $(AfterBuildDependsOn);
      DeleteOldDocumentationFile
    </AfterBuildDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <AfterCleanDependsOn>
      $(AfterCleanDependsOn);
      DeleteAssemblyVersionFile;
      DeleteNuspecFile;
      DeleteNupkgFile
    </AfterCleanDependsOn>
  </PropertyGroup>

  <!-- Define the CoreCreateAssemblyVersionFile property. -->
  <PropertyGroup>
    <CoreCreateAssemblyVersionFile Condition=" '$(BuildGeneratedVersion)' == 'true' ">_CreateAssemblyVersionFile</CoreCreateAssemblyVersionFile>
  </PropertyGroup>

  <Target Name="CreateAssemblyVersionFile"
          DependsOnTargets="DeleteAssemblyVersionFile;$(CoreCreateAssemblyVersionFile)" />

  <Target Name="DeleteAssemblyVersionFile">
    <Message Text="Deleting temporary assembly version file..." Importance="normal" />

    <Delete Files="$(AssemblyVersionFile)" />
  </Target>

  <Target Name="DeleteNupkgFile" 
          Condition=" '$(NuGetProjectExists)' == 'true' "
          DependsOnTargets="_GetNuGetPkgFile">
    <Message Text="Deleting nupkg file..." Importance="normal" />

    <Delete Files="$(NuGetPkgFile)" />
  </Target>

  <Target Name="DeleteNuspecFile">
    <Message Text="Deleting temporary nuspec file..." Importance="normal" />

    <Delete Files="$(NuGetSpecFile)" />
  </Target>

  <Target Name="DeleteOldDocumentationFile">
    <Message Text="Deleting original documentation files (before the Code Contracts transformation)..." Importance="normal" />

    <Delete Files="$(OutDir)$(AssemblyName).xml.old" />
  </Target>

  <Target Name="Package"
          Condition=" '$(SkipPackage)' != 'true' "
          DependsOnTargets="DeleteNupkgFile;Build;_WriteNuspec">
    <Message Text="Creating package for $(AssemblyName)..." Importance="high" />

    <!-- REVIEW: Why can't I quote WorkArtefactsDir? -->
    <Exec Command="&quot;$(NuGetCommand)&quot; pack &quot;$(NuGetSpecFile)&quot; -o $(WorkArtefactsDir) -NonInteractive $(NuGetCommandAdditionalArgs) -Verbosity quiet"
          LogStandardErrorAsError="true" />
  </Target>

  
  <!-- ### Private Targets ### -->

  <Target Name="_CreateAssemblyVersionFile" DependsOnTargets="_GenerateAssemblyVersions">
    <Message Text="Creating the assembly version file for $(AssemblyName)..." Importance="normal" />

    <PropertyGroup>
      <_AssemblyInfoContent>
        <![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Reflection;

#if BUILD_GENERATED_VERSION
[assembly: AssemblyVersion("$(AssemblyVersion)")]
[assembly: AssemblyFileVersion("$(AssemblyFileVersion)")]
[assembly: AssemblyInformationalVersion("$(AssemblyInformationalVersion)")]
#endif

         ]]>
      </_AssemblyInfoContent>
      <_AssemblyInfoLines>$([MSBuild]::Escape($(_AssemblyInfoContent)))</_AssemblyInfoLines>
    </PropertyGroup>

    <MakeDir Directories="$(IntermediateOutputPath)" Condition=" !Exists($(IntermediateOutputPath)) " />

    <WriteLinesToFile Lines="$(_AssemblyInfoLines)"
                      File="$(AssemblyVersionFile)"
                      Overwrite="true" />

    <!-- Dynamically add the file to the list of sources to compile
         and add the BUILD_GENERATED_VERSION compilation symbol. -->
    <PropertyGroup>
      <DefineConstants>$(DefineConstants);BUILD_GENERATED_VERSION</DefineConstants>
    </PropertyGroup>

    <ItemGroup>
      <Compile Include="$(AssemblyVersionFile)" />
    </ItemGroup>
  </Target>

  <Target Name="_GenerateAssemblyVersions" DependsOnTargets="_PrepareForGenerateAssemblyVersions">
    <IncrementBuildAndRevisionNumbers>
      <Output TaskParameter="BuildNumber" PropertyName="_BuildNumber"/>
      <Output TaskParameter="RevisionNumber" PropertyName="_RevisionNumber"/>
    </IncrementBuildAndRevisionNumbers>

    <PropertyGroup>
      <_PreReleaseLabelSuffix Condition=" '$(PreReleaseLabel)' != '' ">-$(PreReleaseLabel)</_PreReleaseLabelSuffix>
    </PropertyGroup>

    <PropertyGroup>
      <AssemblyVersion>$(MajorVersion).$(MinorVersion).0.0</AssemblyVersion>
      <AssemblyFileVersion>$(MajorVersion).$(MinorVersion).$(_BuildNumber).$(_RevisionNumber)</AssemblyFileVersion>
      <AssemblyInformationalVersion>$(MajorVersion).$(MinorVersion).$(PatchVersion)$(_PreReleaseLabelSuffix)</AssemblyInformationalVersion>
    </PropertyGroup>
  </Target>

  <Target Name="_GetNuGetDependencies" Condition=" Exists('$(PackagesConfig)') ">
    <Message Text="Reading packages.config for NuGet dependencies of $(AssemblyName)..." Importance="normal" />

    <ReadDependenciesFromPackagesConfig Config="$(PackagesConfig)">
      <Output TaskParameter="Dependencies" PropertyName="NuGetDependencies"/>
    </ReadDependenciesFromPackagesConfig>
  </Target>

  <Target Name="_GetNuGetPkgFile" DependsOnTargets="_GenerateAssemblyVersions">
    <PropertyGroup>
      <NuGetPkgFile>$(WorkArtefactsDir)$(NuGetId).$(AssemblyInformationalVersion).nupkg</NuGetPkgFile>
    </PropertyGroup>
  </Target>

  <Target Name="_GetProjectDependencies" DependsOnTargets="_ReadProjectDependency">
    <Message Text="Reading project references for $(AssemblyName)..." Importance="normal" />

    <PropertyGroup>
      <ProjectDependencies>@(ProjectDependency -> '%(XmlFragment)', '')</ProjectDependencies>
    </PropertyGroup>
  </Target>

  <Target Name="_PrepareForGenerateAssemblyVersions">
    <Warning Text="Using default assembly version for $(AssemblyName)."
             Condition=" '$(MajorVersion)' == '' Or '$(MinorVersion)' == '' Or '$(PatchVersion)' == '' " />

    <PropertyGroup>
      <MajorVersion Condition=" '$(MajorVersion)' == '' ">1</MajorVersion>
      <MinorVersion Condition=" '$(MinorVersion)' == '' ">0</MinorVersion>
      <PatchVersion Condition=" '$(PatchVersion)' == '' ">0</PatchVersion>
      <!-- REVIEW: If the version is less than 1, there is really no reason to also use a pre-release label. -->
      <PreReleaseLabel Condition=" $(MajorVersion) &lt; 1 "></PreReleaseLabel>
    </PropertyGroup>
  </Target>

  <Target Name="_ReadProjectDependency"
          Condition=" '@(ProjectReference)' != '' "
          Outputs="%(ProjectReference.Identity)">
    <FindProductVersion AssemblyPath="$(OutDir)%(ProjectReference.Name).dll">
      <Output TaskParameter="ProductVersion" PropertyName="_ProjectReferenceVersion"/>
    </FindProductVersion>

    <ItemGroup>
      <ProjectDependency Include="%(ProjectReference.Name)">
        <XmlFragment>
          <![CDATA[
<dependency id="%(ProjectReference.Name)" version="$(_ProjectReferenceVersion)" />
          ]]>
        </XmlFragment>
      </ProjectDependency>
    </ItemGroup>
  </Target>

  <Target Name="_WriteNuspec"
          DependsOnTargets="_GenerateAssemblyVersions;_GetNuGetDependencies;_GetProjectDependencies">
    <Message Text="Creating Nuspec for $(AssemblyName)..." Importance="normal" />

    <WriteNuspec TemplateFile="$(RepositorySettingsDir)Narvalo.nuspec"
                 OutFile="$(NuGetSpecFile)"

                 Id="$(NuGetId)"
                 Version="$(AssemblyInformationalVersion)"
                 Description="$(NuGetDescription)"
                 Files="$(NuGetFiles)"

                 Title="$(NuGetTitle)"
                 Summary="$(NuGetSummary)"
                 ReleaseNotes="$(NuGetReleaseNotes)"
                 Copyright="$(NuGetCopyright)"
                 Tags="$(NuGetTags)"
                 Dependencies="$(ProjectDependencies)$(NuGetDependencies)" />
  </Target>
</Project>