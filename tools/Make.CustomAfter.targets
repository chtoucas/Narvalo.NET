<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="12.0"
         InitialTargets="__InitializeMakeCustomAfterTargets"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    This file is injected at the end of Narvalo.Common.targets by Make.proj.
  -->

  <!-- Define the BeforeBuildDependsOn property. -->
  <PropertyGroup>
    <BeforeBuildDependsOn>
      $(BeforeBuildDependsOn);
      CreateBuildGeneratedVersion
    </BeforeBuildDependsOn>
  </PropertyGroup>

  <!-- Define the AfterBuildDependsOn property. -->
  <PropertyGroup>
    <AfterBuildDependsOn>
      $(AfterBuildDependsOn);
      DeleteOldDocumentationFile
    </AfterBuildDependsOn>
  </PropertyGroup>

  <!-- Define the AfterCleanDependsOn property. -->
  <PropertyGroup>
    <AfterCleanDependsOn>
      $(AfterCleanDependsOn);
      DeleteAssemblyVersionFile;
      DeleteNupkgFile;
      DeleteNuspecFile
    </AfterCleanDependsOn>
  </PropertyGroup>

  <Target Name="Package" DependsOnTargets="CreateNupkg" />

  <Target Name="DeleteOldDocumentationFile" Condition=" Exists('$(OldDocumentationFile)') ">
    <Message Text="Deleting original documentation files (before the Code Contracts transformation)..." Importance="normal" />

    <Delete Files="$(OldDocumentationFile)" />
  </Target>

  <Target Name="GenerateBuildAndRevisionNumbers">
    <GenerateBuildAndRevisionNumbers>
      <Output TaskParameter="BuildNumber" PropertyName="BuildNumber"/>
      <Output TaskParameter="RevisionNumber" PropertyName="RevisionNumber"/>
    </GenerateBuildAndRevisionNumbers>
  </Target>

  <Target Name="GetBuildKey" DependsOnTargets="GenerateBuildAndRevisionNumbers">
    <GetBuildKey BuildNumber="$(BuildNumber)" RevisionNumber="$(RevisionNumber)">
      <Output TaskParameter="BuildKey" PropertyName="BuildKey"/>
    </GetBuildKey>
  </Target>

  <Target Name="GetConfigurationMetadata">
    <PropertyGroup>
      <ConfigurationMetadata>$(Configuration)</ConfigurationMetadata>
      <ConfigurationMetadata>$(ConfigurationMetadata)+$(Platform)</ConfigurationMetadata>
      <ConfigurationMetadata Condition=" '$(SignAssembly)' == 'true' ">$(ConfigurationMetadata)+Signed</ConfigurationMetadata>
      <ConfigurationMetadata Condition=" '$(SignAssembly)' != 'true' ">$(ConfigurationMetadata)+Unsigned</ConfigurationMetadata>
      <ConfigurationMetadata Condition=" '$(BuildGeneratedVersion)' == 'true' ">$(ConfigurationMetadata)+BuiltVersion</ConfigurationMetadata>
      <ConfigurationMetadata Condition=" '$(BuildGeneratedVersion)' != 'true' ">$(ConfigurationMetadata)+DummyVersion</ConfigurationMetadata>
      <ConfigurationMetadata Condition=" '$(VisibleInternals)' == 'true' ">$(ConfigurationMetadata)+Internals</ConfigurationMetadata>
      <ConfigurationMetadata Condition=" '$(VisibleInternals)' != 'true' ">$(ConfigurationMetadata)+NoInternals</ConfigurationMetadata>
    </PropertyGroup>
  </Target>

  <!-- ### Semantic Versioning ### -->

  <Target Name="CheckSemanticVersion">
    <PropertyGroup>
      <_UnknownVersion Condition=" '$(MajorVersion)' == '' Or '$(MinorVersion)' == '' Or '$(PatchVersion)' == '' ">true</_UnknownVersion>
      <_UnknownVersion Condition=" '$(_UnknownVersion)' != 'true' ">false</_UnknownVersion>
    </PropertyGroup>

    <Warning Text="Using a dummy semantic version for $(AssemblyName). Most certainly you forgot to create the $(AssemblyName).Version.props file."
             Condition=" '$(_UnknownVersion)' == 'true' " />

    <PropertyGroup Condition=" '$(_UnknownVersion)' == 'true' ">
      <MajorVersion>1</MajorVersion>
      <MinorVersion>0</MinorVersion>
      <PatchVersion>0</PatchVersion>
      <PreReleaseLabel>UNKNOWN</PreReleaseLabel>
    </PropertyGroup>

    <!-- If the version is less than 1, there is really no reason to also use a pre-release label. -->
    <Warning Text="Are you sure you want to use both at the same time a pre-release label ($(PreReleaseLabel)) and a MajorVersion ($(MajorVersion)) less than 1?"
             Condition=" $(MajorVersion) &lt; 1 And '$(PreReleaseLabel)' != '' " />
  </Target>

  <Target Name="GetBuildMetadata" Condition=" '$(Retail)' != 'true' " DependsOnTargets="GetConfigurationMetadata">
    <!-- For retail builds, we don't add any build metadata to keep the
         version as simple as possible. We can still read the complete
         build configuration with the AssemblyConfiguration attribute.
         The build metadata enables us to quickly check the build configuration
         using the file explorer. -->
    <PropertyGroup>
      <BuildMetadata>$(ConfigurationMetadata.Replace('+', '.').ToLowerInvariant())</BuildMetadata>
    </PropertyGroup>
  </Target>

  <Target Name="GetSemanticVersion" DependsOnTargets="CheckSemanticVersion;GetBuildMetadata">
    <PropertyGroup>
      <SemanticVersion>$(MajorVersion).$(MinorVersion).$(PatchVersion)</SemanticVersion>
      <SemanticVersion Condition=" '$(PreReleaseLabel)' != '' ">$(SemanticVersion)-$(PreReleaseLabel)</SemanticVersion>
      <SemanticVersion Condition=" '$(BuildMetadata)' != '' ">$(SemanticVersion)+$(BuildMetadata)</SemanticVersion>
    </PropertyGroup>
  </Target>

  <!-- ### Build Generated Version ### -->

  <Target Name="CreateBuildGeneratedVersion"
          Condition=" '$(BuildGeneratedVersion)' == 'true' "
          DependsOnTargets="CreateAssemblyVersionFile">
    <!-- Dynamically add the assembly version file to the list of sources
         to compile and add the BUILD_GENERATED_VERSION compilation symbol. -->
    <PropertyGroup>
      <DefineConstants>$(DefineConstants);BUILD_GENERATED_VERSION</DefineConstants>
    </PropertyGroup>

    <ItemGroup>
      <Compile Include="$(AssemblyVersionFile)" />
    </ItemGroup>
  </Target>

  <Target Name="CreateAssemblyVersionFile"
          DependsOnTargets="DeleteAssemblyVersionFile;GenerateAssemblyVersions;GetConfigurationMetadata">
    <Message Text="Creating the assembly version file for $(AssemblyName)..." Importance="normal" />

    <PropertyGroup Condition=" '$(Retail)' == 'true' ">
      <_ConfigurationMetadata>Retail</_ConfigurationMetadata>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Retail)' != 'true' ">
      <_ConfigurationMetadata>$(ConfigurationMetadata)</_ConfigurationMetadata>
    </PropertyGroup>

    <PropertyGroup>
      <_AssemblyVersionContent>
        <![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Reflection;

#if BUILD_GENERATED_VERSION
[assembly: AssemblyConfiguration("$(_ConfigurationMetadata) built on $([System.DateTime]::UtcNow.ToString()).")]
[assembly: AssemblyVersion("$(AssemblyVersion)")]
[assembly: AssemblyFileVersion("$(AssemblyFileVersion)")]
[assembly: AssemblyInformationalVersion("$(AssemblyInformationalVersion)")]
#endif

         ]]>
      </_AssemblyVersionContent>
      <_AssemblyVersionLines>$([MSBuild]::Escape($(_AssemblyVersionContent)))</_AssemblyVersionLines>
    </PropertyGroup>

    <MakeDir Directories="$(IntermediateOutputPath)" Condition=" !Exists($(IntermediateOutputPath)) " />

    <WriteLinesToFile Lines="$(_AssemblyVersionLines)" File="$(AssemblyVersionFile)" Overwrite="true" />
  </Target>

  <Target Name="DeleteAssemblyVersionFile" Condition=" Exists('$(AssemblyVersionFile)') ">
    <Message Text="Deleting temporary assembly version file..." Importance="normal" />

    <Delete Files="$(AssemblyVersionFile)" />
  </Target>

  <Target Name="GenerateAssemblyVersions" DependsOnTargets="GetSemanticVersion;GenerateBuildAndRevisionNumbers">
    <PropertyGroup>
      <AssemblyVersion>$(MajorVersion).$(MinorVersion).0.0</AssemblyVersion>
      <AssemblyFileVersion>$(MajorVersion).$(MinorVersion).$(BuildNumber).$(RevisionNumber)</AssemblyFileVersion>
      <AssemblyInformationalVersion>$(SemanticVersion)</AssemblyInformationalVersion>
    </PropertyGroup>
  </Target>


  <!-- ### NuGet packaging ### -->

  <Target Name="CreateNupkg"
          Condition=" '$(SkipNupkgCreation)' != 'true' "
          DependsOnTargets="DeleteNupkgFile;Build;CreateNuspec">
    <Message Text="Creating package for $(AssemblyName)..." Importance="high" />

    <!-- REVIEW: Why can't I quote WorkArtefactsDir? -->
    <Exec Command="&quot;$(NuGetCommand)&quot; pack &quot;$(NuspecFile)&quot; -OutputDirectory $(WorkArtefactsDir) $(NuGetCommandAdditionalArgs) -NonInteractive -Verbosity quiet"
          LogStandardErrorAsError="true"
          ContinueOnError="false" />
  </Target>

  <Target Name="CreateNuspec"
          Condition=" '$(NuProjectExists)' == 'true' "
          DependsOnTargets="DeleteNuspecFile;GetNuVersion;GetNuGetDependencies;GetProjectDependencies">
    <Message Text="Creating nuspec for $(AssemblyName)..." Importance="normal" />

    <WriteNuspec TemplateFile="$(RepositorySettingsDir)Template.nuspec"
                 OutFile="$(NuspecFile)"

                 Id="$(NuId)"
                 Version="$(NuVersion)"
                 Description="$(NuDescription)"
                 Files="$(NuFiles)"

                 Title="$(NuTitle)"
                 Summary="$(NuSummary)"
                 ReleaseNotes="$(NuReleaseNotes)"
                 Copyright="$(NuCopyright)"
                 Tags="$(NuTags)"
                 Dependencies="$(ProjectDependencies)$(NuGetDependencies)"
                 References="$(NuReferences)" />
  </Target>

  <Target Name="DeleteNupkgFile" DependsOnTargets="GetNuPkgFile">
    <Message Text="Deleting nupkg file..." Importance="normal" Condition=" Exists('$(NupkgFile)') " />

    <Delete Files="$(NupkgFile)" />
  </Target>

  <Target Name="DeleteNuspecFile" Condition=" Exists('$(NuspecFile)') ">
    <Message Text="Deleting temporary nuspec file..." Importance="normal" />

    <Delete Files="$(NuspecFile)" />
  </Target>

  <Target Name="GetNuGetDependencies" Condition=" Exists('$(PackagesConfig)') ">
    <Message Text="Reading packages.config for NuGet dependencies of $(AssemblyName)..." Importance="normal" />

    <ReadDependenciesFromPackagesConfig Config="$(PackagesConfig)">
      <Output TaskParameter="Dependencies" PropertyName="NuGetDependencies"/>
    </ReadDependenciesFromPackagesConfig>
  </Target>

  <Target Name="GetNuPkgFile" DependsOnTargets="GetNuVersion">
    <PropertyGroup>
      <NupkgFile>$(WorkArtefactsDir)$(NuId).$(NuVersion).nupkg</NupkgFile>
    </PropertyGroup>
  </Target>

  <Target Name="GetNuPreReleaseLabel" DependsOnTargets="CheckSemanticVersion">
    <PropertyGroup>
      <NuPreReleaseLabel>$(PreReleaseLabel)</NuPreReleaseLabel>
    </PropertyGroup>
  </Target>

  <Target Name="AfterGetNuPreReleaseLabel"
          Condition=" '$(Retail)' != 'true' "
          AfterTargets="GetNuPreReleaseLabel"
          DependsOnTargets="GetBuildKey">
    <PropertyGroup>
      <NuPreReleaseLabel>T$(BuildKey)</NuPreReleaseLabel>
    </PropertyGroup>
  </Target>

  <Target Name="GetNuVersion" DependsOnTargets="CheckSemanticVersion;GetNuPreReleaseLabel">
    <PropertyGroup>
      <NuVersion>$(MajorVersion).$(MinorVersion).$(PatchVersion)</NuVersion>
      <NuVersion Condition=" '$(NuPreReleaseLabel)' != '' ">$(NuVersion)-$(NuPreReleaseLabel)</NuVersion>
    </PropertyGroup>
  </Target>

  <Target Name="GetProjectDependencies" DependsOnTargets="ReadProjectDependency">
    <Message Text="Reading project references for $(AssemblyName)..." Importance="normal" />

    <PropertyGroup>
      <ProjectDependencies>@(ProjectDependency -> '%(XmlFragment)', '')</ProjectDependencies>
    </PropertyGroup>
  </Target>

  <Target Name="ReadProjectDependency"
          Condition=" '@(ProjectReference)' != '' "
          Outputs="%(ProjectReference.Identity)">
    <FindProductVersion AssemblyPath="$(OutDir)%(ProjectReference.Name).dll">
      <Output TaskParameter="ProductVersion" PropertyName="_ProjectDependencyVersion"/>
    </FindProductVersion>

    <PropertyGroup>
      <_ProjectDependencyId>%(ProjectReference.Name)</_ProjectDependencyId>
      <_ProjectDependencyId  Condition=" '$(Retail)' != 'true' ">$(_ProjectDependencyId).EDGE</_ProjectDependencyId>
    </PropertyGroup>

    <ItemGroup Condition=" '$(Retail)' == 'true' ">
      <ProjectDependency Include="$(_ProjectDependencyId)">
        <XmlFragment>
          <![CDATA[
<dependency id="$(_ProjectDependencyId)" version="$(_ProjectDependencyVersion)" />
          ]]>
        </XmlFragment>
      </ProjectDependency>
    </ItemGroup>

    <ItemGroup Condition=" '$(Retail)' != 'true' ">
      <ProjectDependency Include="$(_ProjectDependencyId)">
        <XmlFragment>
          <![CDATA[
<dependency id="$(_ProjectDependencyId)" version="(,$(_ProjectDependencyVersion)]" />
          ]]>
        </XmlFragment>
      </ProjectDependency>
    </ItemGroup>
  </Target>


  <!-- Initial target. -->
  <Target Name="__InitializeMakeCustomAfterTargets"
          Condition=" '$(NuProjectExists)' == 'true' ">
    <!-- Sanity checks. Even if we skip the package creation (SkipNupkgCreation
         is true), some targets (e.g. CreateNuspec) which require NuGet properties
         to be set may be called directly. -->
    <Error Text="You MUST define the 'NuId' property in your NuGet project: $(NuProjectFile)."
           Condition=" '$(NuId)' == '' "
           ContinueOnError="false" />
    <Error Text="You MUST define the 'NuDescription' property in your NuGet project: $(NuProjectFile)."
           Condition=" '$(NuDescription)' == '' "
           ContinueOnError="false" />
    <Error Text="You MUST define the 'NuFiles' property in your NuGet project: $(NuProjectFile)."
           Condition=" '$(NuFiles)' == '' "
           ContinueOnError="false" />

    <PropertyGroup Condition=" '$(Retail)' != 'true' ">
      <NuId>$(NuId).EDGE</NuId>
      <NuTitle>$(NuTitle)-EDGE</NuTitle>
    </PropertyGroup>
  </Target>
</Project>