<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Each Visual Studio project imports this file. -->
  <PropertyGroup>
    <!-- $(SolutionDir) is only set inside Visual Studio. -->
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">$(MSBuildThisFileDirectory)..\</SolutionDir>

    <!-- Only enable Source Analysis in Release mode. -->
    <SourceAnalysisEnabled Condition="'$(Configuration)' == 'Debug'">false</SourceAnalysisEnabled>
    <SourceAnalysisEnabled Condition="'$(Configuration)' == 'Release'">true</SourceAnalysisEnabled>
    <SourceAnalysisTreatErrorsAsWarnings>false</SourceAnalysisTreatErrorsAsWarnings>
    <SourceAnalysisOverrideSettingsFile>$(SolutionDir)etc\Settings.SourceAnalysis</SourceAnalysisOverrideSettingsFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(BuildCalledFromNarvaloProj)' == 'true' And $(AnalysisOutDir) != ''">
    <!-- When called from Narvalo.proj, reports are saved in a custom location. -->
    <SourceAnalysisOutputFile>$(AnalysisOutDir)$(AssemblyName).StyleCop.xml</SourceAnalysisOutputFile>
    <CodeAnalysisLogFile>$(AnalysisOutDir)$(AssemblyName).FxCop.xml</CodeAnalysisLogFile>
  </PropertyGroup>

  <!-- ### Code Contracts ### -->

  <PropertyGroup Condition="'$(BuildCalledFromNarvaloProj)' == 'true' And $(RunCodeContracts) == 'true'">
    <!-- Disable Source Analysis -->
    <SourceAnalysisEnabled>false</SourceAnalysisEnabled>
    <!-- Disable Code Analysis -->
    <RunCodeAnalysis>false</RunCodeAnalysis>

    <!-- Test -->

    <CodeContractsEnableRuntimeChecking>True</CodeContractsEnableRuntimeChecking>
    <CodeContractsRuntimeOnlyPublicSurface>True</CodeContractsRuntimeOnlyPublicSurface>
    <CodeContractsRuntimeThrowOnFailure>True</CodeContractsRuntimeThrowOnFailure>
    <CodeContractsRuntimeCallSiteRequires>True</CodeContractsRuntimeCallSiteRequires>
    <CodeContractsRuntimeSkipQuantifiers>False</CodeContractsRuntimeSkipQuantifiers>
    <CodeContractsRunCodeAnalysis>True</CodeContractsRunCodeAnalysis>
    <CodeContractsNonNullObligations>False</CodeContractsNonNullObligations>
    <CodeContractsBoundsObligations>False</CodeContractsBoundsObligations>
    <CodeContractsArithmeticObligations>False</CodeContractsArithmeticObligations>
    <CodeContractsEnumObligations>False</CodeContractsEnumObligations>
    <CodeContractsRedundantAssumptions>False</CodeContractsRedundantAssumptions>
    <CodeContractsAssertsToContractsCheckBox>True</CodeContractsAssertsToContractsCheckBox>
    <CodeContractsRedundantTests>False</CodeContractsRedundantTests>
    <CodeContractsMissingPublicRequiresAsWarnings>False</CodeContractsMissingPublicRequiresAsWarnings>
    <CodeContractsMissingPublicEnsuresAsWarnings>False</CodeContractsMissingPublicEnsuresAsWarnings>
    <CodeContractsInferRequires>True</CodeContractsInferRequires>
    <CodeContractsInferEnsures>False</CodeContractsInferEnsures>
    <CodeContractsInferEnsuresAutoProperties>True</CodeContractsInferEnsuresAutoProperties>
    <CodeContractsInferObjectInvariants>False</CodeContractsInferObjectInvariants>
    <CodeContractsSuggestAssumptions>False</CodeContractsSuggestAssumptions>
    <CodeContractsSuggestAssumptionsForCallees>False</CodeContractsSuggestAssumptionsForCallees>
    <CodeContractsSuggestRequires>True</CodeContractsSuggestRequires>
    <CodeContractsNecessaryEnsures>True</CodeContractsNecessaryEnsures>
    <CodeContractsSuggestObjectInvariants>True</CodeContractsSuggestObjectInvariants>
    <CodeContractsSuggestReadonly>True</CodeContractsSuggestReadonly>
    <CodeContractsRunInBackground>False</CodeContractsRunInBackground>
    <CodeContractsShowSquigglies>False</CodeContractsShowSquigglies>
    <CodeContractsUseBaseLine>False</CodeContractsUseBaseLine>
    <CodeContractsEmitXMLDocs>True</CodeContractsEmitXMLDocs>
    <CodeContractsCustomRewriterAssembly />
    <CodeContractsCustomRewriterClass />
    <CodeContractsLibPaths />
    <CodeContractsExtraRewriteOptions />
    <CodeContractsExtraAnalysisOptions />
    <CodeContractsSQLServerOption />
    <CodeContractsBaseLineFile />
    <CodeContractsCacheAnalysisResults>True</CodeContractsCacheAnalysisResults>
    <CodeContractsSkipAnalysisIfCannotConnectToCache>False</CodeContractsSkipAnalysisIfCannotConnectToCache>
    <CodeContractsFailBuildOnWarnings>False</CodeContractsFailBuildOnWarnings>
    <CodeContractsBeingOptimisticOnExternal>True</CodeContractsBeingOptimisticOnExternal>
    <CodeContractsRuntimeCheckingLevel>Full</CodeContractsRuntimeCheckingLevel>
    <CodeContractsReferenceAssembly>%28none%29</CodeContractsReferenceAssembly>
    <CodeContractsAnalysisWarningLevel>0</CodeContractsAnalysisWarningLevel>

    <!-- Sections refer to the official Code Contracts documentation. -->

    <!-- Assembly Mode = Custom Parameter Validation (Section 6.1.1) -->
    <CodeContractsAssemblyMode>0</CodeContractsAssemblyMode>

    <!-- Runtime Checking -->

    <!-- Contract Reference Assembly -->
    <CodeContractsReferenceAssembly>Build</CodeContractsReferenceAssembly>
    <CodeContractsEmitXMLDocs>True</CodeContractsEmitXMLDocs>
    <!--<CodeContractsLibPaths />-->
    <!--<CodeContractsExtraRewriteOptions />-->
    <!--<CodeContractsExtraAnalysisOptions />-->

  </PropertyGroup>

  <!-- ### StyleCop ### -->

  <!--
    The NuGet package for StyleCop does not include StyleCop.CSharp.Rules.dll.
    There is a StyleCop.MSBuild package which has everything we need but we
    do not add it directly to projects since it does ugly transforms
    on the project file. A simple workaround is to add the StyleCop.MSBuild
    package to the solution and import it included targets below.

    Now all projects depend on a specific version and, when StyleCop.MSBuild
    gets updated, all projects will fail to load. This is far from perfect but
    at least we are immediately notified of the problem.
  -->
  <Import Project="$(SolutionDir)packages\StyleCop.MSBuild.4.7.49.0\build\StyleCop.MSBuild.Targets" />

  <Target Name="BeforeStyleCop"
          BeforeTargets="StyleCop"
          Condition="'$(StyleCopEnabled)' == 'true'">
    <Message Text="Running StyleCop Analysis on $(ProjectName)..." Importance="Low" />
  </Target>

  <Target Name="AfterStyleCop"
          AfterTargets="StyleCop"
          Condition="'$(StyleCopEnabled)' == 'true'">
    <Message Text="StyleCop Analysis Complete for $(ProjectName) -- $(StyleCopViolationCount) violation(s)"
             Importance="High" />
  </Target>
</Project>