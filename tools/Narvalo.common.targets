<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Each Visual Studio project imports this file. -->
  <PropertyGroup>
    <!-- $(SolutionDir) is only set inside Visual Studio. -->
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">$(MSBuildThisFileDirectory)..\</SolutionDir>

    <!-- Only enable Source Analysis in Release mode. -->
    <SourceAnalysisEnabled Condition="'$(Configuration)' != 'Release'">false</SourceAnalysisEnabled>
    <SourceAnalysisEnabled Condition="'$(Configuration)' == 'Release'">true</SourceAnalysisEnabled>
    <SourceAnalysisTreatErrorsAsWarnings>false</SourceAnalysisTreatErrorsAsWarnings>
    <SourceAnalysisOverrideSettingsFile>$(SolutionDir)etc\Settings.SourceAnalysis</SourceAnalysisOverrideSettingsFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(BuildingInsideVisualStudio)' != 'true' And $(AnalysisOutDir) != ''">
    <!-- When called from Narvalo.proj, reports are saved in a custom location. -->
    <SourceAnalysisOutputFile>$(AnalysisOutDir)$(AssemblyName).StyleCop.xml</SourceAnalysisOutputFile>
    <CodeAnalysisLogFile>$(AnalysisOutDir)$(AssemblyName).FxCop.xml</CodeAnalysisLogFile>
  </PropertyGroup>

  <!-- ### Code Contracts ### -->

  <PropertyGroup Condition="'$(BuildingInsideVisualStudio)' != 'true' And $(Configuration) == 'CodeContracts'">
    <!-- Disable Source Analysis. -->
    <!--<SourceAnalysisEnabled>false</SourceAnalysisEnabled>-->
    <!-- Disable Code Analysis. -->
    <!--<RunCodeAnalysis>false</RunCodeAnalysis>-->

    <!-- Section number refers to the official Code Contracts documentation. -->

    <!-- 1. Assembly Mode. -->
    <!-- Custom Parameter Validation (6.1.1). -->
    <!--<CodeContractsAssemblyMode>0</CodeContractsAssemblyMode>-->

    <!-- 2. Runtime Checking. -->
    <!-- Perform Runtime Contract Checking (6.2.1). -->
    <!--<CodeContractsEnableRuntimeChecking>True</CodeContractsEnableRuntimeChecking>-->
    <!--<CodeContractsRuntimeCheckingLevel>Full</CodeContractsRuntimeCheckingLevel>-->
    <!-- Only Public Surface Contracts (6.2.2). -->
    <!--<CodeContractsRuntimeOnlyPublicSurface>False</CodeContractsRuntimeOnlyPublicSurface>-->
    <!-- Assert On Contract Failure (6.2.3). -->
    <!--<CodeContractsRuntimeThrowOnFailure>True</CodeContractsRuntimeThrowOnFailure>-->
    <!-- Call-site Requires Checking (6.2.4). -->
    <!--<CodeContractsRuntimeCallSiteRequires>True</CodeContractsRuntimeCallSiteRequires>-->
    <!-- Skip Quantifiers (6.2.5). -->
    <!--<CodeContractsRuntimeSkipQuantifiers>False</CodeContractsRuntimeSkipQuantifiers>-->

    <!-- 3. Static  Checking. -->
    <!-- Perform Static Contract Checking (6.6). -->
    <!--<CodeContractsRunCodeAnalysis>True</CodeContractsRunCodeAnalysis>-->
    <!-- Background checking is not available in terminal.-->
    <CodeContractsRunInBackground>False</CodeContractsRunInBackground>
    <!-- Only useful when running inside VS. -->
    <!--<CodeContractsShowSquigglies>False</CodeContractsShowSquigglies>-->
    <!-- Fail build on warnings. -->
    <!--<CodeContractsFailBuildOnWarnings>False</CodeContractsFailBuildOnWarnings>-->
    <!-- Check non-null. -->
    <!--<CodeContractsNonNullObligations>True</CodeContractsNonNullObligations>-->
    <!-- Check arithmetic. -->
    <!--<CodeContractsArithmeticObligations>True</CodeContractsArithmeticObligations>-->
    <!-- Check array bounds. -->
    <!--<CodeContractsBoundsObligations>True</CodeContractsBoundsObligations>-->
    <!-- Check enum writes. -->
    <!--<CodeContractsEnumObligations>True</CodeContractsEnumObligations>-->
    <!-- Check missing public requires. -->
    <!--<CodeContractsMissingPublicRequiresAsWarnings>True</CodeContractsMissingPublicRequiresAsWarnings>-->
    <!-- Check missing public ensures. -->
    <!--<CodeContractsMissingPublicEnsuresAsWarnings>False</CodeContractsMissingPublicEnsuresAsWarnings>-->
    <!-- Infers. -->
    <!--<CodeContractsInferRequires>True</CodeContractsInferRequires>-->
    <!--<CodeContractsInferEnsures>True</CodeContractsInferEnsures>-->
    <!--<CodeContractsInferEnsuresAutoProperties>True</CodeContractsInferEnsuresAutoProperties>-->
    <!--<CodeContractsInferObjectInvariants>True</CodeContractsInferObjectInvariants>-->
    <!-- "3" represents the highest possible warning level. -->
    <!--<CodeContractsAnalysisWarningLevel>3</CodeContractsAnalysisWarningLevel>-->
    <!--<CodeContractsBeingOptimisticOnExternal>True</CodeContractsBeingOptimisticOnExternal>-->

    <!-- 4. Contract Reference Assembly (6.2.5) -->
    <!--<CodeContractsReferenceAssembly>Build</CodeContractsReferenceAssembly>-->
    <!--<CodeContractsEmitXMLDocs>True</CodeContractsEmitXMLDocs>-->
    <!--<CodeContractsLibPaths />-->
    <!--<CodeContractsExtraRewriteOptions />-->
    <!--<CodeContractsExtraAnalysisOptions />-->
  </PropertyGroup>

  <!-- ### StyleCop ### -->

  <!--
    The NuGet package for StyleCop does not include StyleCop.CSharp.Rules.dll.
    There is a StyleCop.MSBuild package which has everything we need but we
    do not add it directly to projects since it does ugly transforms
    on the project file. A simple workaround is to add the StyleCop.MSBuild
    package to the solution and import it included targets below.

    Now all projects depend on a specific version and, when StyleCop.MSBuild
    gets updated, all projects will fail to load. This is far from perfect but
    at least we are immediately notified of the problem.
  -->
  <Import Project="$(SolutionDir)packages\StyleCop.MSBuild.4.7.49.0\build\StyleCop.MSBuild.Targets" />

  <Target Name="BeforeStyleCop"
          BeforeTargets="StyleCop"
          Condition="'$(StyleCopEnabled)' == 'true'">
    <Message Text="Running StyleCop Analysis on $(ProjectName)..." Importance="Low" />
  </Target>

  <Target Name="AfterStyleCop"
          AfterTargets="StyleCop"
          Condition="'$(StyleCopEnabled)' == 'true'">
    <Message Text="StyleCop Analysis Complete for $(ProjectName) -- $(StyleCopViolationCount) violation(s)"
             Importance="High" />
  </Target>
</Project>