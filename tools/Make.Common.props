<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="12.0"
         TreatAsLocalProperty="Configuration;BuildGeneratedVersion;Lean;SignAssembly;VisibleInternals"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    Options are defined here or in Shared.props.

    Custom build options:
    - BuildGeneratedVersion (default: true)
      Generate assembly version before building.
      A new generated assembly version forces a fresh build.
      For incremental batching to work be sure to use:
        BuildGeneratedVersion=false.

    - Retail (default: false)
      If true, generated results are meant to be published.
      Currently it means:
      * If true, override other properties:
          BuildGeneratedVersion=true
          Configuration=Release
          SignAssembly=true
          VisibleInternals=false
      * If false, NuGet package versions are uniquely created on the fly.
        This ensures that each build creates a distinct package.
      * Use different build metadata for the assembly informational version.
      * Use different text for the AssemblyConfiguration attribute.

    - SignAssembly (default: false)

    - VisibleInternals (default: true)
      Unconditionally hide internals to other assemblies.

    - Lean (default: false)
      Make the build behaves a lot like if it was running inside Visual Studio.
      If true, the other custom build options are ignored (except the standard
      MSBuild ones).
      __Ignored when Retail is true.__

    - SolutionFile (default: none)
      Solution used to restore NuGet packages.

    Common MSBuild options:
    - Configuration (default: Debug)
      Other options: Release and CodeContracts.

    - Platform (default: AnyCPU)
      Right now, AnyCPU is the only supported platform.

    - BuildInParallel (default: false unless the /maxcpucount MSBuild's switch is used)

    Miscs options:
    - RepositoryRoot
      No need to set this manually. If empty, MSBuild will pick up the right value.

    - VisualStudioVersion (default: 12.0)
      Right now, I don't see any circumstances under which we would need
      to override the default value.
      Does not have any effect on some projects (e.g. test projects override this
      property).
  -->

  <!-- Import shared properties. -->
  <Import Project="$(MSBuildThisFileDirectory)Shared.props" />

  <!-- Define common Narvalo project properties. -->
  <PropertyGroup>
    <!-- If true, sign the assemblies. Default to false. -->
    <SignAssembly Condition=" '$(SignAssembly)' != 'true' ">false</SignAssembly>

    <!-- If true, dynamically generate the assemblies' version. Default to true. -->
    <BuildGeneratedVersion Condition=" '$(BuildGeneratedVersion)' != 'false' ">true</BuildGeneratedVersion>

    <!-- If true, internals are visible. Default to true. -->
    <VisibleInternals Condition=" '$(VisibleInternals)' != 'false' ">true</VisibleInternals>

    <SolutionFile Condition=" '$(SolutionFile)' == '' ">$(RepositoryRoot)Narvalo.sln</SolutionFile>
  </PropertyGroup>

  <Choose>
    <!-- WARNING: For retail builds, we unconditionally override many properties. -->
    <When Condition=" '$(Retail)' == 'true' ">
      <PropertyGroup>
        <Lean>false</Lean>

        <Configuration>Release</Configuration>
        <SourceAnalysisEnabled>true</SourceAnalysisEnabled>
        <RunCodeAnalysis>true</RunCodeAnalysis>

        <BuildGeneratedVersion>true</BuildGeneratedVersion>
        <SignAssembly>true</SignAssembly>
        <VisibleInternals>false</VisibleInternals>
      </PropertyGroup>
    </When>

    <Otherwise>
      <PropertyGroup>
        <Retail>false</Retail>

        <!-- If true, builds behave a lot like if they were run inside Visual Studio. Default to false. -->
        <Lean Condition=" '$(Lean)' != 'true' ">false</Lean>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!-- Define layout-related properties. -->
  <PropertyGroup>
    <!-- The root directory for NuGet projects. -->
    <NuProjectsRoot>$(RepositoryRoot)src\NuGet\</NuProjectsRoot>

    <WorkRoot>$(RepositoryRoot)work\</WorkRoot>

    <WorkArtefactsDir>$(WorkRoot)artefacts\</WorkArtefactsDir>
  </PropertyGroup>

  <!-- Define the ConfigurationVariant property. -->
  <PropertyGroup Condition=" '$(Lean)' != 'true' ">
    <!-- This property is useful to distinguish between variants of the same base configuration.
         A variant is a build configuration not available to Visual Studio builds.
         Does not apply to Lean builds since the other options are always ignored. -->
    <ConfigurationVariant Condition=" '$(SignAssembly)' == 'true' ">+Signed</ConfigurationVariant>
    <ConfigurationVariant Condition=" '$(BuildGeneratedVersion)' == 'true' ">$(ConfigurationVariant)+SemVer</ConfigurationVariant>
    <ConfigurationVariant Condition=" '$(VisibleInternals)' == 'false' ">$(ConfigurationVariant)+Closed</ConfigurationVariant>
  </PropertyGroup>

  <!-- Define common MSBuild project properties. -->
  <PropertyGroup>
    <BaseIntermediateOutputPath>$(WorkRoot)obj\</BaseIntermediateOutputPath>
    <IntermediateOutputPath>$(BaseIntermediateOutputPath)$(Configuration)$(ConfigurationVariant)\</IntermediateOutputPath>

    <OutDir>$(WorkRoot)bin\$(Configuration)$(ConfigurationVariant)\</OutDir>
  </PropertyGroup>

  <!-- Define the NuGetCommand property. -->
  <PropertyGroup>
    <NuGetCommand>$(MSBuildThisFileDirectory)nuget.exe</NuGetCommand>
  </PropertyGroup>

  <!-- Define the PEVerify properties. -->
  <PropertyGroup>
    <PEVerifyCommand>$(SDK40ToolsPath)PEVerify.exe</PEVerifyCommand>
    <PEVerifyDummyOutput>$(IntermediateOutputPath)Narvalo.Verify.out</PEVerifyDummyOutput>
    <PEVerifyLogFile>$(WorkArtefactsDir)peverify.log</PEVerifyLogFile>
  </PropertyGroup>

  <!-- Define the SecAnnotate properties. -->
  <PropertyGroup>
    <SecAnnotateCommand>$(SDK40ToolsPath)SecAnnotate.exe</SecAnnotateCommand>
    <SecAnnotateOutput>$(WorkArtefactsDir)secannotate.xml</SecAnnotateOutput>
    <SecAnnotateLogFile>$(WorkArtefactsDir)secannotate.log</SecAnnotateLogFile>
  </PropertyGroup>

  <!-- Define the Xunit properties. -->
  <PropertyGroup>
    <XunitXmlFile>$(WorkArtefactsDir)xunit.xml</XunitXmlFile>
    <XunitHtmlFile>$(WorkArtefactsDir)xunit.html</XunitHtmlFile>
  </PropertyGroup>

  <!-- Define the BuildProperties property. -->
  <PropertyGroup>
    <BuildProperties>
      BuildInParallel=$(BuildInParallel);
      Configuration=$(Configuration);
      Platform=$(Platform);
      RepositoryRoot=$(RepositoryRoot);
      VisualStudioVersion=$(VisualStudioVersion);
    </BuildProperties>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Lean)' != 'true' ">
    <!--
      There is also a legacy OutputPath property but this is no longer in use.
      More documentation here:
        %ProgramFiles(x86)%\MSBuild\$(VisualStudioVersion)\Bin\Microsoft.Common.CurrentVersion.targets

      WARNING: When building a PCL project, MSBuild places its output inside
      a subdirectory of OutDir. To correct this, we instruct MSBuild to
      use the standard behaviour: GenerateProjectSpecificOutputFolder = false.

      WARNING: We force the value of various paths (OutputPath, IntermediateOutputPath).
    -->
    <BuildProperties>
      $(BuildProperties);

      BaseIntermediateOutputPath=$(BaseIntermediateOutputPath);
      IntermediateOutputPath=$(IntermediateOutputPath);
      OutDir=$(OutDir);
      OutputPath=$(OutDir);
      GenerateProjectSpecificOutputFolder=false;

      CustomBeforeNarvaloCommonProps=$(MSBuildThisFileDirectory)Make.CustomBefore.props;
      CustomAfterNarvaloCommonProps=$(MSBuildThisFileDirectory)Make.CustomAfter.props;
      CustomBeforeNarvaloCommonTargets=$(MSBuildThisFileDirectory)Make.CustomBefore.targets;
      CustomAfterNarvaloCommonTargets=$(MSBuildThisFileDirectory)Make.CustomAfter.targets;

      BuildGeneratedVersion=$(BuildGeneratedVersion);
      NuGetCommand=$(NuGetCommand);
      NuProjectsRoot=$(NuProjectsRoot);
      Retail=$(Retail);
      SignAssembly=$(SignAssembly);
      VisibleInternals=$(VisibleInternals);
      WorkArtefactsDir=$(WorkArtefactsDir);
    </BuildProperties>
  </PropertyGroup>

  <!-- Mark Make.Common.props as already imported. -->
  <PropertyGroup>
    <MakeCommonPropsImported>true</MakeCommonPropsImported>
  </PropertyGroup>
</Project>
