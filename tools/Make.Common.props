<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="12.0"
         InitialTargets="__InitializeMakeCommonProps"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    Options are defined here or in Shared.props.

    Custom build options:
    - BuildGeneratedVersion (default: true)
      Generate assembly version before building.
      A new generated assembly version forces a fresh build.
      For incremental batching to work be sure to use:
        BuildGeneratedVersion=false.

    - Retail (default: false)
      If true, generated results are meant to be published.
      Currently it means:
      * If true, override other properties:
          BuildGeneratedVersion=true
          Configuration=Release
          SignAssembly=true
          VisibleInternals=false
      * If false, NuGet package versions are uniquely created on the fly.
        This ensures that each build creates a distinct package.
      * Use different build metadata for the assembly informational version.
      * Use different text for the AssemblyConfiguration attribute.

    - SignAssembly (default: false)

    - VisibleInternals (default: true)
      Unconditionally hide internals to other assemblies.

    - SolutionFile (default: none)
      Solution used to restore NuGet packages.

    Common MSBuild options:
    - Configuration (default: Debug)
      Other options: Release and CodeContracts.

    - Platform (default: AnyCPU)
      Right now, AnyCPU is the only supported platform.

    - BuildInParallel (default: false unless the /maxcpucount MSBuild's switch is used)

    Miscs options:
    - RepositoryRoot
      No need to set this manually. If empty, MSBuild will pick up the right value.

    - VisualStudioVersion (default: 12.0)
      Right now, I don't see any circumstances under which we would need
      to override the default value.
      Does not have any effect on some projects (e.g. test projects override this
      property).
  -->

  <!-- Import shared properties. -->
  <Import Project="$(MSBuildThisFileDirectory)Shared.props" />
  <Import Project="$(MSBuildThisFileDirectory)Make.Shared.props" />

  <!-- Define common Narvalo project properties. -->
  <PropertyGroup>
    <!-- Solution used by NuGet to restore packages. -->
    <SolutionFile Condition=" '$(SolutionFile)' == '' ">$(RepositoryRoot)Narvalo.sln</SolutionFile>
  </PropertyGroup>

  <!-- Define the ConfigurationVariant property. -->
  <PropertyGroup>
    <!-- This property is useful to distinguish between variants of the same base configuration.
         A variant is a build configuration unavailable inside Visual Studio.
         Does not apply to Lean builds since the other options are always ignored. -->
    <ConfigurationVariant Condition=" '$(SignAssembly)' == 'true' ">+Signed</ConfigurationVariant>
    <ConfigurationVariant Condition=" '$(BuildGeneratedVersion)' == 'true' ">$(ConfigurationVariant)+SemVer</ConfigurationVariant>
    <ConfigurationVariant Condition=" '$(VisibleInternals)' == 'false' ">$(ConfigurationVariant)+Closed</ConfigurationVariant>
  </PropertyGroup>

  <!-- Define common MSBuild project properties. -->
  <PropertyGroup>
    <BaseIntermediateOutputPath>$(WorkRoot)obj\</BaseIntermediateOutputPath>
    <IntermediateOutputPath>$(BaseIntermediateOutputPath)$(Configuration)$(ConfigurationVariant)\</IntermediateOutputPath>

    <OutDir>$(WorkRoot)bin\$(Configuration)$(ConfigurationVariant)\</OutDir>
  </PropertyGroup>

  <!-- Define the Xunit properties. -->
  <PropertyGroup>
    <XunitXmlFile>$(WorkLogDir)xunit.xml</XunitXmlFile>
    <XunitHtmlFile>$(WorkLogDir)xunit.html</XunitHtmlFile>
  </PropertyGroup>

  <!-- Define the BuildProperties property. -->
  <PropertyGroup>
    <!-- Optional properties from Shared.props. -->
    <BuildProperties>
      BuildInParallel=$(BuildInParallel);
      Configuration=$(Configuration);
      Platform=$(Platform);
      VisualStudioVersion=$(VisualStudioVersion);

      RepositoryRoot=$(RepositoryRoot);
    </BuildProperties>

    <!-- Optional properties from Make.Shared.props. -->
    <BuildProperties>
      $(BuildProperties);

      BuildGeneratedVersion=$(BuildGeneratedVersion);
      SignAssembly=$(SignAssembly);
      VisibleInternals=$(VisibleInternals)
    </BuildProperties>

    <!--
      Where shall we write the outputs.
      More documentation here:
        %ProgramFiles(x86)%\MSBuild\$(VisualStudioVersion)\Bin\Microsoft.Common.CurrentVersion.targets

      WARNING: When building a PCL project, MSBuild places its output inside
      a subdirectory of OutDir. To correct this, we instruct MSBuild to
      use the standard behaviour: GenerateProjectSpecificOutputFolder = false.

      WARNING: We force the value of various paths. Although not required by the
      standard MSBuild operations, we do use IntermediateOutputPath 
      in Make.CustomAfter.props. Concerning OutputPath, I didn't check if this is
      really necessary to also include it as it is supposed to be a legacy
      property, no longer in use.
    -->
    <BuildProperties>
      $(BuildProperties);

      BaseIntermediateOutputPath=$(BaseIntermediateOutputPath);
      IntermediateOutputPath=$(IntermediateOutputPath);
      OutDir=$(OutDir);
      OutputPath=$(OutDir);
      GenerateProjectSpecificOutputFolder=false;
    </BuildProperties>

    <BuildProperties>
      $(BuildProperties);

      CustomAfterNarvaloCommonProps=$(MSBuildThisFileDirectory)Make.CustomAfter.props;
      CustomAfterNarvaloCommonTargets=$(MSBuildThisFileDirectory)Make.CustomAfter.targets;
    </BuildProperties>
  </PropertyGroup>

  <!-- Mark Make.Common.props as already imported. -->
  <PropertyGroup>
    <MakeCommonPropsImported>true</MakeCommonPropsImported>
  </PropertyGroup>

  <!-- Initial target. -->
  <Target Name="__InitializeMakeCommonProps">
    <ItemGroup Condition=" '@(ProjectsToBuild)' == '' And '$(ProjectsToBuild)' != '' ">
      <ProjectsToBuild Include="$(ProjectsToBuild)" />
    </ItemGroup>

    <Error Text="Each master project (e.g. Make.proj) MUST create its own instance of @(ProjectsToBuild)."
           Condition=" '@(ProjectsToBuild)' == '' " />
  </Target>
</Project>
