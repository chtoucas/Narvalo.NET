<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="12.0"
         DefaultTargets="Build"
         InitialTargets="__InitializeMakeCommonTargets"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  
  <!-- Import common properties, if not already done. -->
  <Import Project="$(MSBuildThisFileDirectory)Make.Common.props"
          Condition=" '$(MakeCommonPropsImported)' != 'true' "/>

  <!-- Import common tasks. -->
  <Import Project="$(MSBuildThisFileDirectory)Make.Common.tasks" />

  <!-- Import Xunit tasks. -->
  <Import Project="$(MSBuildThisFileDirectory)Package.Xunit.tasks" />

  <!-- Clean target. -->
  <Target Name="Clean">
    <!-- Artefacts created during a build. -->
    <ItemGroup>
      <_FilesToDelete Include="$(XunitXmlFile)" />
      <_FilesToDelete Include="$(XunitHtmlFile)" />
    </ItemGroup>

    <Delete Files="@(_FilesToDelete)" />

    <MSBuild Projects="@(ProjectsToBuild)"
             Properties="$(BuildProperties)"
             BuildInParallel="$(BuildInParallel)"
             Targets="Clean" />
  </Target>

  <!-- Build target. -->
  <Target Name="Build" DependsOnTargets="RestorePackages">
    <MSBuild Projects="@(ProjectsToBuild)"
             Properties="$(BuildProperties)"
             BuildInParallel="$(BuildInParallel)"
             Targets="Build"
             StopOnFirstFailure="true">
      <Output ItemName="BuildOutputs" TaskParameter="TargetOutputs" />
    </MSBuild>
  </Target>

  <!-- Rebuild target. -->
  <Target Name="Rebuild" DependsOnTargets="_PatchRebuild;Clean;Build" />

  <!-- _PatchRebuild target. -->
  <Target Name="_PatchRebuild">
    <!--
      StyleCop uses $(RebuildDependsOn) to modify the Build process.
      Here, we define Rebuild as Clean;Build, which means that StyleCop
      modifications of the Rebuild process won't apply since we never call
      the Rebuild target from a project.

      The solution is to copy the original StyleCop modifications
      to BuildProperties.

      Another solution is to define our Rebuild target so that it calls MSBuild
      with the Rebuild target. This is exactly what we do if Lean is set to true.
    -->
    <PropertyGroup>
      <BuildProperties>
        $(BuildProperties);
        SourceAnalysisForceFullAnalysis=true
      </BuildProperties>
    </PropertyGroup>
  </Target>

  <!-- Package target. -->
  <Target Name="Package">
    <!-- WARNING: Child Package target is a non-standard MSBuild target. -->
    <MSBuild Projects="@(ProjectsToBuild)"
             Properties="$(BuildProperties)"
             BuildInParallel="$(BuildInParallel)"
             Targets="Package"
             StopOnFirstFailure="true" />
  </Target>
  
  <!-- PEVerify target. -->
  <Target Name="PEVerify">
    <!-- WARNING: Child PEVerify target is a non-standard MSBuild target. 
         The projects must have imported Narvalo.Common.targets. -->
    <MSBuild Projects="@(ProjectsToBuild)"
             Properties="$(BuildProperties)"
             BuildInParallel="$(BuildInParallel)"
             Targets="PEVerify"
             StopOnFirstFailure="true" />
  </Target>

  <!-- SecAnnotate target. -->
  <Target Name="SecAnnotate">
    <!-- WARNING: Child SecAnnotate target is a non-standard MSBuild target. 
         The projects must have imported Narvalo.Common.targets. -->
    <MSBuild Projects="@(ProjectsToBuild)"
             Properties="$(BuildProperties)"
             BuildInParallel="$(BuildInParallel)"
             Targets="SecAnnotate"
             StopOnFirstFailure="true" />
  </Target>

  <!-- Xunit target. -->
  <Target Name="Xunit"
          DependsOnTargets="Build"
          Inputs="@(BuildOutputs)"
          Outputs="$(XunitXmlFile)">
    <ItemGroup>
      <_TestAssembly Include="%(BuildOutputs.Identity)"
                     Condition=" '@(BuildOutputs->EndsWith('Facts.dll'))' == 'true' " />
    </ItemGroup>

    <xunit Assemblies="@(_TestAssembly)"
           Html="$(XunitHtmlFile)"
           Xml="$(XunitXmlFile)"
           Condition=" '@(_TestAssembly)' != '' " />
  </Target>

  <!-- InstallNuGet target. -->
  <Target Name="InstallNuGet" Condition=" !Exists('$(NuGetCommand)') ">
    <Message Text="Downloading latest version of NuGet..." Importance="high" />

    <DownloadNuGet OutputFile="$(NuGetCommand)" />
  </Target>

  <!-- RestorePackages target. -->
  <Target Name="RestorePackages" DependsOnTargets="InstallNuGet">
    <Message Text="Restoring NuGet packages..." Importance="high" />

    <Exec Command="&quot;$(NuGetCommand)&quot; restore &quot;$(SolutionFile)&quot; -PackagesDirectory &quot;$(RepositoryRoot)packages&quot; -ConfigFile &quot;$(RepositoryRoot).nuget\NuGet.Config&quot; -NonInteractive -Verbosity quiet"
          LogStandardErrorAsError="true" />
  </Target>

  <!-- __InitializeMakeCommonProps target. -->
  <Target Name="__InitializeMakeCommonTargets">
    <MakeDir Directories="$(WorkRoot)" Condition=" !Exists($(WorkRoot)) " />
    <MakeDir Directories="$(WorkLogDir)" Condition=" !Exists($(WorkLogDir)) " />
    <MakeDir Directories="$(WorkPackagesDir)" Condition=" !Exists($(WorkPackagesDir)) " />
  </Target>
</Project>
