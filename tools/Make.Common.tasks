<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Define the CodeTaskFactoryAssemblyFile property. -->
  <PropertyGroup>
    <CodeTaskFactoryAssemblyFile>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</CodeTaskFactoryAssemblyFile>
  </PropertyGroup>

  <UsingTask TaskName="IncrementBuildAndRevisionNumbers" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <BuildNumber ParameterType="System.String" Output="true" />
      <RevisionNumber ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
// The algorithm used by .NET to auto-increment the assembly version is as follows:
//   The default build number increments daily. The default revision number is
//   the number of seconds since midnight local time (without taking into account
//   time zone adjustments for daylight saving time), divided by 2.
// For further informations, see:
// http://msdn.microsoft.com/en-us/library/system.reflection.assemblyversionattribute.aspx
//
// Remarks:
// - this feature is only available to AssemblyVersion not to AssemblyFileVersion.
// - during the same day, two builds may end up with the same assembly version.
// - build and revision numbers must be less or equal to 65534 (UInt16.MaxValue - 1).
//
// Here I implement a slight variation of the same algorithm:
// - use UTC time.
// - count the number of days since 2014-12-01.
// - add a suffix to the build number: "1" in the morning and "2" in the
//   afternoon. We use a suffix to keep the number growing.
// - count the number of seconds since midnight in the morning and since
//   midday in the afternoon.
// This way, there is less chances to get the same numbers during a single day
// on the same build machine. The scheme will break in approximately 27 years...
// Indeed the new prefix takes one digit in the build number, so we are left with
// 4 digits (remember the 65534 limit).
var now = DateTime.UtcNow;
var isMorning = now.Hour < 12;
var buildNumberSuffix = isMorning ? "1" : "2";
var startHour = isMorning ? 0 : 12;

BuildNumber = (now - new DateTime(2014, 12, 1)).Days.ToString() + buildNumberSuffix;
RevisionNumber = ((int)(now - new DateTime(now.Year, now.Month, now.Day, startHour, 0, 0)).TotalSeconds).ToString();

return true;
         ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <OutputFilePath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
try {
    new WebClient().DownloadFile("https://nuget.org/nuget.exe", OutputFilePath);

    return true;
}
catch (Exception ex) {
    Log.LogErrorFromException(ex);

    return false;
}
         ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="CreatePackageSpec" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <TemplateFile ParameterType="System.String" Required="true" />
      <VersionNumber ParameterType="System.String" Required="true" />
      <ReleaseNotes ParameterType="System.String" Required="true" />
      <SpecFile ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
// TODO: Check all inputs.
if (TemplateFile.Length == 0) {
    Log.LogMessage(MessageImportance.High, "You must supply a NuSpec file.");

    return false;
}

try {
    string template = File.ReadAllText(TemplateFile)
      .Replace("$releasenotes$", ReleaseNotes)
      .Replace("$version$", VersionNumber);

    File.WriteAllText(SpecFile, template);
}
catch (IOException ex) {
    Log.LogErrorFromException(ex);
}

return !Log.HasLoggedErrors;
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="SetEnvironmentVariable" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <Variable ParameterType="System.String" Required="true" />
      <Value ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
Environment.SetEnvironmentVariable(Variable, Value);

return true;
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>