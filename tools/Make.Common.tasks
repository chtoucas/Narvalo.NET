<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Define the CodeTaskFactoryAssemblyFile property. -->
  <PropertyGroup>
    <CodeTaskFactoryAssemblyFile>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</CodeTaskFactoryAssemblyFile>
  </PropertyGroup>

  <UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <OutputFilePath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
try {
    new WebClient().DownloadFile("https://nuget.org/nuget.exe", OutputFilePath);

    return true;
}
catch (Exception ex) {
    Log.LogErrorFromException(ex);

    return false;
}
         ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="CreatePackageSpec" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <TemplateFile ParameterType="System.String" Required="true" />
      <VersionNumber ParameterType="System.String" Required="true" />
      <ReleaseNotes ParameterType="System.String" Required="true" />
      <SpecFile ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
// TODO: Check all inputs.
if (TemplateFile.Length == 0) {
    Log.LogMessage(MessageImportance.High, "You must supply a NuSpec file.");

    return false;
}

try {
    string template = File.ReadAllText(TemplateFile)
      .Replace("$releasenotes$", ReleaseNotes)
      .Replace("$version$", VersionNumber);

    File.WriteAllText(SpecFile, template);
}
catch (IOException ex) {
    Log.LogErrorFromException(ex);
}

return !Log.HasLoggedErrors;
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="SetEnvironmentVariable" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <Variable ParameterType="System.String" Required="true" />
      <Value ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
Environment.SetEnvironmentVariable(Variable, Value);

return true;
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>