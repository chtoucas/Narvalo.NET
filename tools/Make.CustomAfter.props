<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="12.0"
         InitialTargets="__InitializeMakeCustomAfterProps"
         TreatAsLocalProperty="BuildGeneratedVersion"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- 
    This file is injected at the end of Narvalo.Common.props by Make.proj.
  -->

  <!-- If any, import project version properties. -->
  <Import Project="$(MSBuildProjectDirectory)\$(AssemblyName).Version.props"
          Condition=" Exists('$(MSBuildProjectDirectory)\$(AssemblyName).Version.props') "/>


  <!-- ### Overrides for common MSBuild properties ### -->

  <PropertyGroup>
    <!-- Treat all warnings as errors. -->
    <CodeAnalysisTreatWarningsAsErrors>true</CodeAnalysisTreatWarningsAsErrors>
    <CodeContractsFailBuildOnWarnings>true</CodeContractsFailBuildOnWarnings>
    <SourceAnalysisTreatErrorsAsWarnings>true</SourceAnalysisTreatErrorsAsWarnings>

    <!-- Reports are saved in a custom location. -->
    <CodeAnalysisLogFile>$(WorkArtefactsDir)$(AssemblyName).FxCop.xml</CodeAnalysisLogFile>
    <SourceAnalysisOutputFile>$(WorkArtefactsDir)$(AssemblyName).StyleCop.xml</SourceAnalysisOutputFile>

    <!-- We don't want the Code Analysis "succeed" file to be written to 
         the custom location but it does not seem to be understood by MSBuild. 
         As a workaround, we simply disable the creation of the success file. -->
    <!--<CodeAnalysisSucceededFile>$(OutDir)$(AssemblyName).FxCop.Succeed</CodeAnalysisSucceededFile>-->
    <CodeAnalysisGenerateSuccessFile>false</CodeAnalysisGenerateSuccessFile>

    <!-- Code Contracts background checking is not available in terminal. -->
    <CodeContractsRunInBackground>False</CodeContractsRunInBackground>
  </PropertyGroup>

  
  <!-- ### Custom Narvalo project properties ### -->

  <!-- Sign the assemblies. -->
  <PropertyGroup Condition=" '$(SignAssembly)' == 'true' ">
    <DefineConstants>$(DefineConstants);SIGNED_ASSEMBLY</DefineConstants>
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>$(RepositorySettingsDir)Narvalo.snk</AssemblyOriginatorKeyFile>
    <DelaySign>false</DelaySign>
  </PropertyGroup>

  <!-- Sign the assemblies. -->
  <PropertyGroup Condition=" '$(VisibleInternals)' == 'false' ">
    <DefineConstants>$(DefineConstants);NO_INTERNALS_VISIBLE_TO</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(DummyGeneratedVersion)' == 'true' ">
    <!-- The DummyGeneratedVersion takes precedence over BuildGeneratedVersion. -->
    <BuildGeneratedVersion>false</BuildGeneratedVersion>
    <DefineConstants>$(DefineConstants);DUMMY_GENERATED_VERSION</DefineConstants>
  </PropertyGroup>

  <PropertyGroup>
    <!-- WARNING: This property requires IntermediateOutputPath to be initialized
         which is true only because we add this property via Make.proj, otherwise
         it is only available after importing Microsoft.Common.targets. -->
    <AssemblyVersionFile>$(IntermediateOutputPath)$(AssemblyName).Version.cs</AssemblyVersionFile>

    <PackagesConfig>$(MSBuildProjectDirectory)\packages.config</PackagesConfig>

    <!-- Original documentation files (before the Code Contracts transformation). -->
    <OldDocumentationFile>$(OutDir)$(AssemblyName).xml.old</OldDocumentationFile>
  </PropertyGroup>

  <!-- NuGet packaging. -->
  <PropertyGroup>
    <NuProjectFile>$(NuProjectsRoot)$(AssemblyName)\$(AssemblyName).nuproj</NuProjectFile>

    <NuProjectExists Condition=" Exists('$(NuProjectFile)') ">true</NuProjectExists>
    <NuProjectExists Condition=" '$(NuProjectExists)' != 'true' ">false</NuProjectExists>

    <NuspecFile>$(OutDir)$(AssemblyName).nuspec</NuspecFile>

    <!-- 
      Only create a NuGet package if:
      - We have a meaningful version, ie BuildGeneratedVersion is true:
        * the assembly gets an actual version
        * the package has a unique version that matchs the assembly version.
      - A NuGet project exists.
    -->
    <SkipNupkgCreation Condition=" '$(BuildGeneratedVersion)' == 'true' And '$(NuProjectExists)' == 'true' ">false</SkipNupkgCreation>
    <SkipNupkgCreation Condition=" '$(SkipNupkgCreation)' != 'false' ">true</SkipNupkgCreation>
  </PropertyGroup>

  <!-- Import NuGet project. -->
  <Import Project="$(NuProjectFile)" Condition=" '$(NuProjectExists)' == 'true' " />


  <!-- ### T4 settings ### -->

  <PropertyGroup>
    <!-- Force T4 re-generation on build.
         REVIEW: Currently disabled since our T4 templates require VS hosting. -->
    <TransformOnBuild>false</TransformOnBuild>
  </PropertyGroup>


  <!-- Initial target. -->
  <Target Name="__InitializeMakeCustomAfterProps">
    <Error Text="Unable to sign the assembly. The strong name key does not exist: $(RepositorySettingsDir)Narvalo.snk"
           ContinueOnError="false"
           Condition=" '$(SignAssembly)' == 'true' And !Exists('$(RepositorySettingsDir)Narvalo.snk') " />
  </Target>
</Project>