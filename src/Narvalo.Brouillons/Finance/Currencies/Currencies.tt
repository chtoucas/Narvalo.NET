<#@ include file="..\..\..\Narvalo.Finance\CodeTemplates\Iso4217.tt" #>
<#

var currencies = ParseCurrent(@"..\..\..\Narvalo.Finance\Resources\ISO4217\20150101\A1.xml");

var codeSet = new HashSet<string>();

#>
// Copyright (c) Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
//
// Runtime Version: <#= System.Environment.Version #>
// </auto-generated>
//------------------------------------------------------------------------------

using global::System.Diagnostics.CodeAnalysis;

[module: SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass",
    Justification = "[GeneratedCode] A T4 template may contain multiple classes.")]
[module: SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1508:ClosingCurlyBracketsMustNotBePrecededByBlankLine",
    Justification = "[GeneratedCode] Newline rule disabled for T4 templates.")]

namespace <#= InferNamespace() #>
{
    using System.Diagnostics.Contracts;

<#
    foreach (var currency in currencies.OrderBy(_ => _.Code))
    {
        if (codeSet.Contains(currency.Code))
        {
            continue;
        }

        codeSet.Add(currency.Code);

        // WARNING: If you change the name of the property "s_Currency",
        // you MUST also change the value of INSTANCE_CURRENCY_FIELD in
        // Internal.CurrencyActivator<TCurrency>.
#>
    /// <summary>
    /// Represents the currency unit for the "<#= currency.EnglishName #>".
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly",
        Justification = "[Intentionally] Exceptionally we prefer to preserve the currency code casing.")]
    public sealed class <#= currency.Code #> : Currency
    {
        private static readonly <#= currency.Code #> s_Currency = new <#= currency.Code #>();

        private static readonly CurrencyInfo s_CurrencyInfo = new CurrencyInfo("<#= currency.Code #>", <#= currency.NumericCode #>) {
            EnglishName = @"<#= currency.EnglishName #>",
<# if (currency.IsFund) { #>
            IsFund = true,
<# } #>
<# if (currency.MinorUnits.HasValue) { #>
            MinorUnits = <#= currency.MinorUnits.Value.ToString() #>
<# } #>
        };

        private <#= currency.Code #>() : base("<#= currency.Code #>") { }

        /// <summary>
        /// Gets the unique instance of the <see cref="Currency" /> class for the "<#= currency.EnglishName #>".
        /// </summary>
        /// <value>The unique instance of the <see cref="Currency" /> class for the "<#= currency.EnglishName #>".</value>
        public static <#= currency.Code #> Currency
        {
            get
            {
                Contract.Ensures(Contract.Result<Currency>() != null);
                return s_Currency;
            }
        }

        /// <summary>
        /// Gets the unique instance of the <see cref="CurrencyInfo" /> class for the "<#= currency.EnglishName #>".
        /// </summary>
        /// <value>The unique instance of the <see cref="CurrencyInfo" /> class for the "<#= currency.EnglishName #>".</value>
        public static CurrencyInfo CurrencyInfo
        {
            get
            {
                Contract.Ensures(Contract.Result<CurrencyInfo>() != null);
                return s_CurrencyInfo;
            }
        }
    }

<#
    }
#>
}
