// Copyright (c) Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
//
// Runtime Version: 4.0.30319.42000
// Microsoft.VisualStudio.TextTemplating: 14.0
// </auto-generated>
//------------------------------------------------------------------------------

namespace Narvalo.Fx
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    using Narvalo.Fx.Internal;
    using Narvalo.Fx.Linq;

    // Provides a set of static methods for Result<T, TError>.
    // T4: EmitHelpers().
    public partial struct Result
    {
        /// <summary>
        /// Obtains an instance of the <see cref="Result{T, TError}"/> class for the specified value.
        /// </summary>
        /// <typeparam name="T">The underlying type of <paramref name="value"/>.</typeparam>
        /// <typeparam name="TError"></typeparam>
        /// <param name="value">A value to be wrapped into an object of type <see cref="Result{T, TError}"/>.</param>
        /// <returns>An instance of the <see cref="Result{T, TError}"/> class for the specified value.</returns>
        public static Result<T, TError> Of<T, TError>(T value)
            => Result<T, TError>.η(value);

        /// <summary>
        /// Removes one level of structure, projecting its bound value into the outer level.
        /// </summary>
        public static Result<T, TError> Flatten<T, TError>(Result<Result<T, TError>, TError> square)
            => Result<T, TError>.μ(square);

        #region Lift()

        /// <summary>
        /// Promotes a function to use and return <see cref="Result{T, TError}" /> values.
        /// </summary>
        /// <seealso cref="ResultExtensions.Select{T, TResult, TError}" />
        public static Func<Result<T, TError>, Result<TResult, TError>> Lift<T, TResult, TError>(
            Func<T, TResult> func)
            => arg =>
            {
                /* T4: NotNull(arg) */
                return arg.Select(func);
            };

        /// <summary>
        /// Promotes a function to use and return <see cref="Result{T, TError}" /> values.
        /// </summary>
        public static Func<Result<T1, TError>, Result<T2, TError>, Result<TResult, TError>>
            Lift<T1, T2, TResult, TError>(Func<T1, T2, TResult> func)
            => (arg1, arg2) =>
            {
                /* T4: NotNull(arg1) */
                return arg1.Zip(arg2, func);
            };

        /// <summary>
        /// Promotes a function to use and return <see cref="Result{T, TError}" /> values.
        /// </summary>
        public static Func<Result<T1, TError>, Result<T2, TError>, Result<T3, TError>, Result<TResult, TError>>
            Lift<T1, T2, T3, TResult, TError>(Func<T1, T2, T3, TResult> func)
            => (arg1, arg2, arg3) =>
            {
                /* T4: NotNull(arg1) */
                return arg1.Zip(arg2, arg3, func);
            };

        /// <summary>
        /// Promotes a function to use and return <see cref="Result{T, TError}" /> values.
        /// </summary>
        public static Func<Result<T1, TError>, Result<T2, TError>, Result<T3, TError>, Result<T4, TError>, Result<TResult, TError>>
            Lift<T1, T2, T3, T4, TResult, TError>(
            Func<T1, T2, T3, T4, TResult> func)
            => (arg1, arg2, arg3, arg4) =>
            {
                /* T4: NotNull(arg1) */
                return arg1.Zip(arg2, arg3, arg4, func);
            };

        /// <summary>
        /// Promotes a function to use and return <see cref="Result{T, TError}" /> values.
        /// </summary>
        public static Func<Result<T1, TError>, Result<T2, TError>, Result<T3, TError>, Result<T4, TError>, Result<T5, TError>, Result<TResult, TError>>
            Lift<T1, T2, T3, T4, T5, TResult, TError>(
            Func<T1, T2, T3, T4, T5, TResult> func)
            => (arg1, arg2, arg3, arg4, arg5) =>
            {
                /* T4: NotNull(arg1) */
                return arg1.Zip(arg2, arg3, arg4, arg5, func);
            };

        #endregion
    }

    // Provides extension methods for Result<T, TError>.
    // T4: EmitExtensions().
    public static partial class ResultExtensions
    {
        /// <seealso cref="Apply{TSource, TResult, TError}" />
        public static Result<TResult, TError> Gather<TSource, TResult, TError>(
            this Result<TSource, TError> @this,
            Result<Func<TSource, TResult>, TError> applicative)
        {
            /* T4: NotNull(@this) */
            /* T4: NotNull(applicative) */
            return applicative.Bind(func => @this.Select(func));
        }

        /// <seealso cref="Gather{TSource, TResult, TError}" />
        public static Result<TResult, TError> Apply<TSource, TResult, TError>(
            this Result<Func<TSource, TResult>, TError> @this,
            Result<TSource, TError> value)
        {
            /* T4: NotNull(value) */
            return value.Gather(@this);
        }

        public static Result<IEnumerable<TSource>, TError> Repeat<TSource, TError>(
            this Result<TSource, TError> @this,
            int count)
        {
            /* T4: NotNull(@this) */
            Require.Range(count >= 1, nameof(count));
            return @this.Select(val => Enumerable.Repeat(val, count));
        }

        public static Result<TResult, TError> ReplaceBy<TSource, TResult, TError>(
            this Result<TSource, TError> @this,
            TResult value)
        {
            /* T4: NotNull(@this) */
            return @this.Select(_ => value);
        }

        public static Result<TResult, TError> Then<TSource, TResult, TError>(
            this Result<TSource, TError> @this,
            Result<TResult, TError> other)
        {
            /* T4: NotNull(@this) */
            return @this.Bind(_ => other);
        }

        public static Result<TSource, TError> Ignore<TSource, TOther, TError>(
            this Result<TSource, TError> @this,
            Result<TOther, TError> other)
        {
            /* T4: NotNull(@this) */
            Func<TSource, TOther, TSource> ignore = (arg, _) => arg;

            return @this.Zip(other, ignore);
        }

        public static Result<global::Narvalo.Fx.Unit, TError> Skip<TSource, TError>(this Result<TSource, TError> @this)
        {
            /* T4: NotNull(@this) */
            return @this.ReplaceBy(global::Narvalo.Fx.Unit.Default);
        }

        public static Result<TResult, TError> Coalesce<TSource, TResult, TError>(
            this Result<TSource, TError> @this,
            Func<TSource, bool> predicate,
            Result<TResult, TError> thenResult,
            Result<TResult, TError> elseResult)
        {
            /* T4: NotNull(@this) */
            Require.NotNull(predicate, nameof(predicate));
            return @this.Bind(val => predicate(val) ? thenResult : elseResult);
        }

        public static Result<TResult, TError> Using<TSource, TResult, TError>(
            this Result<TSource, TError> @this,
            Func<TSource, Result<TResult, TError>> selector)
            where TSource : IDisposable
        {
            /* T4: NotNull(@this) */
            Require.NotNull(selector, nameof(selector));
            return @this.Bind(val => { using (val) { return selector(val); } });
        }

        public static Result<TResult, TError> Using<TSource, TResult, TError>(
            this Result<TSource, TError> @this,
            Func<TSource, TResult> selector)
            where TSource : IDisposable
        {
            /* T4: NotNull(@this) */
            Require.NotNull(selector, nameof(selector));
            return @this.Select(val => { using (val) { return selector(val); } });
        }

        #region Zip()

        public static Result<Tuple<TSource, TOther>, TError> Zip<TSource, TOther, TError>(
            this Result<TSource, TError> @this,
            Result<TOther, TError> other)
        {
            /* T4: NotNull(@this) */
            return @this.Zip(other, Tuple.Create);
        }

        public static Result<TResult, TError> Zip<TFirst, TSecond, TResult, TError>(
            this Result<TFirst, TError> @this,
            Result<TSecond, TError> second,
            Func<TFirst, TSecond, TResult> zipper)
        {
            /* T4: NotNull(@this) */
            /* T4: NotNull(second) */
            Require.NotNull(zipper, nameof(zipper));

            return @this.Bind(
                arg1 => second.Select(
                    arg2 => zipper(arg1, arg2)));
        }

        public static Result<TResult, TError> Zip<T1, T2, T3, TResult, TError>(
            this Result<T1, TError> @this,
            Result<T2, TError> second,
            Result<T3, TError> third,
            Func<T1, T2, T3, TResult> zipper)
        {
            /* T4: NotNull(@this) */
            /* T4: NotNull(second) */
            /* T4: NotNull(third) */
            Require.NotNull(zipper, nameof(zipper));

            return @this.Bind(
                arg1 => second.Bind(
                    arg2 => third.Select(
                        arg3 => zipper(arg1, arg2, arg3))));
        }

        public static Result<TResult, TError> Zip<T1, T2, T3, T4, TResult, TError>(
             this Result<T1, TError> @this,
             Result<T2, TError> second,
             Result<T3, TError> third,
             Result<T4, TError> fourth,
             Func<T1, T2, T3, T4, TResult> zipper)
        {
            /* T4: NotNull(@this) */
            /* T4: NotNull(second) */
            /* T4: NotNull(third) */
            /* T4: NotNull(fourth) */
            Require.NotNull(zipper, nameof(zipper));

            return @this.Bind(
                arg1 => second.Bind(
                    arg2 => third.Bind(
                        arg3 => fourth.Select(
                            arg4 => zipper(arg1, arg2, arg3, arg4)))));
        }

        public static Result<TResult, TError> Zip<T1, T2, T3, T4, T5, TResult, TError>(
            this Result<T1, TError> @this,
            Result<T2, TError> second,
            Result<T3, TError> third,
            Result<T4, TError> fourth,
            Result<T5, TError> fifth,
            Func<T1, T2, T3, T4, T5, TResult> zipper)
        {
            /* T4: NotNull(@this) */
            /* T4: NotNull(second) */
            /* T4: NotNull(third) */
            /* T4: NotNull(fourth) */
            /* T4: NotNull(fifth) */
            Require.NotNull(zipper, nameof(zipper));

            return @this.Bind(
                arg1 => second.Bind(
                    arg2 => third.Bind(
                        arg3 => fourth.Bind(
                            arg4 => fifth.Select(
                                arg5 => zipper(arg1, arg2, arg3, arg4, arg5))))));
        }

        #endregion

        #region LINQ dialect

        public static Result<TResult, TError> Select<TSource, TResult, TError>(
            this Result<TSource, TError> @this,
            Func<TSource, TResult> selector)
        {
            /* T4: NotNull(@this) */
            Require.NotNull(selector, nameof(selector));
            return @this.Bind(val => Result.Of<TResult, TError>(selector(val)));
        }

        // Kind of generalisation of Zip{T1, T2, T3}.
        public static Result<TResult, TError> SelectMany<TSource, TMiddle, TResult, TError>(
            this Result<TSource, TError> @this,
            Func<TSource, Result<TMiddle, TError>> valueSelector,
            Func<TSource, TMiddle, TResult> resultSelector)
        {
            /* T4: NotNull(@this) */
            Require.NotNull(valueSelector, nameof(valueSelector));
            Require.NotNull(resultSelector, nameof(resultSelector));

            return @this.Bind(
                val => valueSelector(val).Select(
                    middle => resultSelector(val, middle)));
        }

        #endregion
    }

    // Provides extension methods for Func<T> in the Kleisli category.
    // T4: EmitKleisli().
    public static partial class Kleisli
    {
        public static Result<IEnumerable<TResult>, TError> InvokeWith<TSource, TResult, TError>(
            this Func<TSource, Result<TResult, TError>> @this,
            IEnumerable<TSource> seq)
            => seq.Select(@this).Collect();

        public static Result<TResult, TError> InvokeWith<TSource, TResult, TError>(
            this Func<TSource, Result<TResult, TError>> @this,
            Result<TSource, TError> value)
        {
            /* T4: NotNull(value) */
            return value.Bind(@this);
        }

        public static Func<TSource, Result<TResult, TError>> Compose<TSource, TMiddle, TResult, TError>(
            this Func<TSource, Result<TMiddle, TError>> @this,
            Func<TMiddle, Result<TResult, TError>> second)
        {
            Require.NotNull(@this, nameof(@this));
            return arg => @this(arg).Bind(second);
        }

        public static Func<TSource, Result<TResult, TError>> ComposeBack<TSource, TMiddle, TResult, TError>(
            this Func<TMiddle, Result<TResult, TError>> @this,
            Func<TSource, Result<TMiddle, TError>> second)
        {
            Require.NotNull(second, nameof(second));
            return arg => second(arg).Bind(@this);
        }
    }

    // Provides extension methods for IEnumerable<Result<T, TError>>.
    // T4: EmitEnumerableExtensions().
    public static partial class ResultExtensions
    {
        public static Result<IEnumerable<TSource>, TError> Collect<TSource, TError>(
            this IEnumerable<Result<TSource, TError>> @this)
            => @this.CollectImpl();
    }
}

namespace Narvalo.Fx.Internal
{
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;

    using Narvalo.Fx.Linq;

    // Provides default implementations for the extension methods for IEnumerable<Result<T, TError>>.
    // You will certainly want to override them to improve performance.
    // T4: EmitEnumerableInternal().
    internal static partial class EnumerableExtensions
    {
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static Result<IEnumerable<TSource>, TError> CollectImpl<TSource, TError>(
            this IEnumerable<Result<TSource, TError>> @this)
        {
            Require.NotNull(@this, nameof(@this));

            return Result.Of<IEnumerable<TSource>, TError>(CollectIterator(@this));
        }

        private static IEnumerable<TSource> CollectIterator<TSource, TError>(IEnumerable<Result<TSource, TError>> source)
        {
            Demand.NotNull(source);

            var unit = Result.Of<Unit, TError>(Unit.Default);
            var item = default(TSource);

            using (var iter = source.GetEnumerator())
            {
                while (iter.MoveNext())
                {
                    var append = false;

                    iter.Current.Bind(
                        val =>
                        {
                            append = true;
                            item = val;

                            return unit;
                        });

                    if (append) { yield return item; }
                }
            }
        }
    }
}
