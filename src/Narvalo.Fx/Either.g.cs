// Copyright (c) Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
//
// Runtime Version: 4.0.30319.42000
// Microsoft.VisualStudio.TextTemplating: 14.0
// </auto-generated>
//------------------------------------------------------------------------------


namespace Narvalo.Fx
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;

    using Narvalo.Fx.Internal;
    using Narvalo.Fx.Linq;


    // Provides a set of static methods for Either<T, TRight>.
    // NB: Sometimes we prefer extension methods over static methods to be able to override them locally.
    public static partial class Either
    {

        /// <summary>
        /// Obtains an instance of the <see cref="Either{T, TRight}"/> class for the specified value.
        /// </summary>
        /// <typeparam name="T">The underlying type of <paramref name="value"/>.</typeparam>
        /// <typeparam name="TRight"></typeparam>
        /// <param name="value">A value to be wrapped into a <see cref="Either{T, TRight}"/> object.</param>
        /// <returns>An instance of the <see cref="Either{T, TRight}"/> class for the specified value.</returns>
        public static Either<T, TRight> Of<T, TRight>(T value)
            /* T4: C# indent */
        {
            Warrant.NotNull<Either<T, TRight>>();

            return Either<T, TRight>.η(value);
        }

        #region Generalisations of list functions

        /// <summary>
        /// Removes one level of structure, projecting its bound value into the outer level.
        /// </summary>
        public static Either<T, TRight> Flatten<T, TRight>(Either<Either<T, TRight>, TRight> square)
            /* T4: C# indent */
        {
            Expect.NotNull(square);

            return Either<T, TRight>.μ(square);
        }

        #endregion

        #region Conditional execution of monadic expressions


        #endregion

        #region Monadic lifting operators

        /// <summary>
        /// Promotes a function to use and return <see cref="Either{T, TRight}" /> values.
        /// </summary>
        public static Func<Either<T, TRight>, Either<TResult, TRight>> Lift<T, TResult, TRight>(
            Func<T, TResult> func)
            /* T4: C# indent */
        {
            Warrant.NotNull<Func<Either<T, TRight>, Either<TResult, TRight>>>();

            return m =>
            {
                Require.NotNull(m, nameof(m));
                return m.Select(func);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="Either{T, TRight}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        public static Func<Either<T1, TRight>, Either<T2, TRight>, Either<TResult, TRight>>
            Lift<T1, T2, TResult, TRight>(Func<T1, T2, TResult> func)
            /* T4: C# indent */
        {
            Warrant.NotNull<Func<Either<T1, TRight>, Either<T2, TRight>, Either<TResult, TRight>>>();

            return (m1, m2) =>
            {
                Require.NotNull(m1, nameof(m1));
                return m1.Zip(m2, func);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="Either{T, TRight}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        public static Func<Either<T1, TRight>, Either<T2, TRight>, Either<T3, TRight>, Either<TResult, TRight>>
            Lift<T1, T2, T3, TResult, TRight>(Func<T1, T2, T3, TResult> func)
            /* T4: C# indent */
        {
            Warrant.NotNull<Func<Either<T1, TRight>, Either<T2, TRight>, Either<T3, TRight>, Either<TResult, TRight>>>();

            return (m1, m2, m3) =>
            {
                Require.NotNull(m1, nameof(m1));
                return m1.Zip(m2, m3, func);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="Either{T, TRight}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        public static Func<Either<T1, TRight>, Either<T2, TRight>, Either<T3, TRight>, Either<T4, TRight>, Either<TResult, TRight>>
            Lift<T1, T2, T3, T4, TResult, TRight>(
            Func<T1, T2, T3, T4, TResult> func)
            /* T4: C# indent */
        {
            Warrant.NotNull<Func<Either<T1, TRight>, Either<T2, TRight>, Either<T3, TRight>, Either<T4, TRight>, Either<TResult, TRight>>>();

            return (m1, m2, m3, m4) =>
            {
                Require.NotNull(m1, nameof(m1));
                return m1.Zip(m2, m3, m4, func);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="Either{T, TRight}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        public static Func<Either<T1, TRight>, Either<T2, TRight>, Either<T3, TRight>, Either<T4, TRight>, Either<T5, TRight>, Either<TResult, TRight>>
            Lift<T1, T2, T3, T4, T5, TResult, TRight>(
            Func<T1, T2, T3, T4, T5, TResult> func)
            /* T4: C# indent */
        {
            Warrant.NotNull<Func<Either<T1, TRight>, Either<T2, TRight>, Either<T3, TRight>, Either<T4, TRight>, Either<T5, TRight>, Either<TResult, TRight>>>();

            return (m1, m2, m3, m4, m5) =>
            {
                Require.NotNull(m1, nameof(m1));
                return m1.Zip(m2, m3, m4, m5, func);
            };
        }

        #endregion
    } // End of Either - T4: EmitMonadCore().

    // Provides extension methods for Either<T, TRight>.
    public static partial class Either
    {
        #region Applicative

        public static Either<TResult, TRight> Replace<TSource, TResult, TRight>(
            this Either<TSource, TRight> @this,
            TResult value)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));

            return @this.Select(_ => value);
        }


        public static Either<TResult, TRight> Gather<TSource, TResult, TRight>(
            this Either<TSource, TRight> @this,
            Either<Func<TSource, TResult>, TRight> applicative)
            /* T4: C# indent */
        {
            Require.NotNull(applicative, nameof(applicative));

            return applicative.Apply(@this);
        }

        public static Either<TResult, TRight> Apply<TSource, TResult, TRight>(
            this Either<Func<TSource, TResult>, TRight> @this,
            Either<TSource, TRight> value)
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(value, nameof(value));

            return @this.Bind(func => value.Select(v => func.Invoke(v)));
        }

        public static Either<Tuple<TSource, TOther>, TRight> Zip<TSource, TOther, TRight>(
            this Either<TSource, TRight> @this,
            Either<TOther, TRight> other)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));

            return @this.Zip(other, Tuple.Create);
        }


        #endregion

        #region Basic Monad functions

        public static Either<TResult, TRight> Select<TSource, TResult, TRight>(
            this Either<TSource, TRight> @this,
            Func<TSource, TResult> selector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(selector, nameof(selector));

            return @this.Bind(_ => Either.Of<TResult, TRight>(selector.Invoke(_)));
        }

        public static Either<TResult, TRight> ReplaceBy<TSource, TResult, TRight>(
            this Either<TSource, TRight> @this,
            Either<TResult, TRight> other)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));

            return @this.Bind(_ => other);
        }

        [SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "this", Justification = "[Intentionally] This method always returns the same result.")]
        public static Either<global::Narvalo.Fx.Unit, TRight> Skip<TSource, TRight>(this Either<TSource, TRight> @this)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Warrant.NotNull<Either<global::Narvalo.Fx.Unit, TRight>>();

            return Either.Of<Unit, TRight>(global::Narvalo.Fx.Unit.Single);
        }

        #endregion

        #region Other extensions

        public static Either<TResult, TRight> Coalesce<TSource, TResult, TRight>(
            this Either<TSource, TRight> @this,
            Func<TSource, bool> predicate,
            Either<TResult, TRight> thenResult,
            Either<TResult, TRight> elseResult)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(predicate, nameof(predicate));

            return @this.Bind(_ => predicate.Invoke(_) ? thenResult : elseResult);
        }


        public static Either<TResult, TRight> Using<TSource, TResult, TRight>(
            this Either<TSource, TRight> @this,
            Func<TSource, Either<TResult, TRight>> selector)
            where TSource : IDisposable
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(selector, nameof(selector));

            return @this.Bind(_ => { using (_) { return selector.Invoke(_); } });
        }

        public static Either<TResult, TRight> Using<TSource, TResult, TRight>(
            this Either<TSource, TRight> @this,
            Func<TSource, TResult> selector)
            where TSource : IDisposable
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(selector, nameof(selector));

            return @this.Select(_ => { using (_) { return selector.Invoke(_); } });
        }

        #endregion

        #region Generalisations of list functions


        public static Either<IEnumerable<TSource>, TRight> Repeat<TSource, TRight>(
            this Either<TSource, TRight> @this,
            int count)
        {
            Require.NotNull(@this, nameof(@this));
            Require.Range(count >= 1, nameof(count));

            return @this.Select(_ => Enumerable.Repeat(_, count));
        }


        #endregion


        #region Applicative lifting operators

        /// <see cref="Lift{T1, T2, T3}" />
        public static Either<TResult, TRight> Zip<TFirst, TSecond, TResult, TRight>(
            this Either<TFirst, TRight> @this,
            Either<TSecond, TRight> second,
            Func<TFirst, TSecond, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));

            return @this.Bind(v1 => second.Select(v2 => resultSelector.Invoke(v1, v2)));
        }

        /// <see cref="Lift{T1, T2, T3, T4}" />
        public static Either<TResult, TRight> Zip<T1, T2, T3, TResult, TRight>(
            this Either<T1, TRight> @this,
            Either<T2, TRight> second,
            Either<T3, TRight> third,
            Func<T1, T2, T3, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));

            Func<T1, Either<TResult, TRight>> g
                = t1 => second.Zip(third, (t2, t3) => resultSelector.Invoke(t1, t2, t3));

            return @this.Bind(g);
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5}" />
        public static Either<TResult, TRight> Zip<T1, T2, T3, T4, TResult, TRight>(
             this Either<T1, TRight> @this,
             Either<T2, TRight> second,
             Either<T3, TRight> third,
             Either<T4, TRight> fourth,
             Func<T1, T2, T3, T4, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));

            Func<T1, Either<TResult, TRight>> g
                = t1 => second.Zip(
                    third,
                    fourth,
                    (t2, t3, t4) => resultSelector.Invoke(t1, t2, t3, t4));

            return @this.Bind(g);
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5, T6}" />
        public static Either<TResult, TRight> Zip<T1, T2, T3, T4, T5, TResult, TRight>(
            this Either<T1, TRight> @this,
            Either<T2, TRight> second,
            Either<T3, TRight> third,
            Either<T4, TRight> fourth,
            Either<T5, TRight> fifth,
            Func<T1, T2, T3, T4, T5, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));

            Func<T1, Either<TResult, TRight>> g
                = t1 => second.Zip(
                    third,
                    fourth,
                    fifth,
                    (t2, t3, t4, t5) => resultSelector.Invoke(t1, t2, t3, t4, t5));

            return @this.Bind(g);
        }

        #endregion

        #region Query Expression Pattern


        /// <remarks>
        /// Kind of generalisation of <see cref="Zip{T1, T2, T3}" />.
        /// </remarks>
        public static Either<TResult, TRight> SelectMany<TSource, TMiddle, TResult, TRight>(
            this Either<TSource, TRight> @this,
            Func<TSource, Either<TMiddle, TRight>> valueSelector,
            Func<TSource, TMiddle, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(valueSelector, nameof(valueSelector));
            Require.NotNull(resultSelector, nameof(resultSelector));

            return @this.Bind(
                _ => valueSelector.Invoke(_).Select(
                    middle => resultSelector.Invoke(_, middle)));
        }


        #endregion

        #region LINQ extensions


        #endregion
    } // End of Either - T4: EmitMonadExtensions().

    // Provides extension methods for Func<T> in the Kleisli category.
    public static partial class Kleisli
    {
        #region Basic Monad functions


        public static Either<IEnumerable<TResult>, TRight> ForEach<TSource, TResult, TRight>(
            this Func<TSource, Either<TResult, TRight>> @this,
            IEnumerable<TSource> seq)
        {
            Expect.NotNull(@this);
            Expect.NotNull(seq);
            Warrant.NotNull<Either<IEnumerable<TResult>, TRight>>();

            return seq.Select(@this).EmptyIfNull().Collect();
        }


        public static Either<TResult, TRight> Invoke<TSource, TResult, TRight>(
            this Func<TSource, Either<TResult, TRight>> @this,
            Either<TSource, TRight> value)
            /* T4: C# indent */
        {
            Expect.NotNull(@this);
            Require.NotNull(value, nameof(value));

            return value.Bind(@this);
        }

        public static Func<TSource, Either<TResult, TRight>> Compose<TSource, TMiddle, TResult, TRight>(
            this Func<TSource, Either<TMiddle, TRight>> @this,
            Func<TMiddle, Either<TResult, TRight>> func)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Expect.NotNull(func);
            Warrant.NotNull<Func<TSource, Either<TResult, TRight>>>();

            return _ => @this.Invoke(_).Bind(func);
        }

        public static Func<TSource, Either<TResult, TRight>> ComposeBack<TSource, TMiddle, TResult, TRight>(
            this Func<TMiddle, Either<TResult, TRight>> @this,
            Func<TSource, Either<TMiddle, TRight>> func)
            /* T4: C# indent */
        {
            Expect.NotNull(@this);
            Require.NotNull(func, nameof(func));
            Warrant.NotNull<Func<TSource, Either<TResult, TRight>>>();

            return _ => func.Invoke(_).Bind(@this);
        }

        #endregion
    } // End of Kleisli - T4: EmitKleisliExtensions().

    // Provides extension methods for IEnumerable<Either<T, TRight>>.
    public static partial class Either
    {
        #region Basic Monad functions


        public static Either<IEnumerable<TSource>, TRight> Collect<TSource, TRight>(
            this IEnumerable<Either<TSource, TRight>> @this)
        {
            Expect.NotNull(@this);
            Warrant.NotNull<Either<IEnumerable<TSource>, TRight>>();

            return @this.CollectImpl();
        }


        #endregion

    } // End of Sequence - T4: EmitMonadEnumerableExtensions().
}

namespace Narvalo.Fx.Internal
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;

    using Narvalo.Fx.Linq;

    // Provides default implementations for the extension methods for IEnumerable<Either<T, TRight>>.
    // You will certainly want to override them to improve performance.
    internal static partial class EnumerableExtensions
    {

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static Either<IEnumerable<TSource>, TRight> CollectImpl<TSource, TRight>(
            this IEnumerable<Either<TSource, TRight>> @this)
        {
            Demand.NotNull(@this);
            Warrant.NotNull<Either<IEnumerable<TSource>, TRight>>();

            var seed = Either.Of<IEnumerable<TSource>, TRight>(Enumerable.Empty<TSource>());
            //var seed = Either.Of(Enumerable.Empty<TSource>());
            // Inlined LINQ Append method:
            Func<IEnumerable<TSource>, TSource, IEnumerable<TSource>> append = (m, item) => m.Append(item);

            // NB: Maybe.Lift(append) is the same as:
            // Func<Either<IEnumerable<TSource>>, Either<TSource>, Either<IEnumerable<TSource>>> liftedAppend
            //     = (m, item) => m.Bind(list => Append(list, item));
            // where Append is defined below.
            var retval = @this.Aggregate(seed, Either.Lift<IEnumerable<TSource>, TSource, IEnumerable<TSource>, TRight>(append));
            System.Diagnostics.Contracts.Contract.Assume(retval != null);

            return retval;
        }

        // NB: We do not inline this method to avoid the creation of an unused private field (CA1823 warning).
        //private static Either<IEnumerable<TSource>> Append<TSource>(
        //    IEnumerable<TSource> list,
        //    Either<TSource> m)
        //{
        //    Demand.NotNull(m);

        //    return m.Bind(item => Either.Of(list.Concat(Enumerable.Repeat(item, 1))));
        //}

    } // End of EnumerableExtensions - T4: EmitMonadEnumerableInternalExtensions().
}
