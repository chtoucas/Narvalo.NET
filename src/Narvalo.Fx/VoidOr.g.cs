// Copyright (c) Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
//
// Runtime Version: 4.0.30319.42000
// Microsoft.VisualStudio.TextTemplating: 14.0
// </auto-generated>
//------------------------------------------------------------------------------


namespace Narvalo.Fx
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;

    /// <summary>
    /// Provides a set of static methods for <see cref="VoidOr{T}"/>.
    /// </summary>
    // NB: Sometimes we prefer extension methods over static methods to be able to override them locally.
    public static partial class VoidOr
    {
        /// <summary>
        /// The unique object of type <c>VoidOr&lt;Unit&gt;</c>.
        /// </summary>
        private static readonly VoidOr<global::Narvalo.Fx.Unit> s_Unit = FromError(global::Narvalo.Fx.Unit.Single);

        /// <summary>
        /// Gets the unique object of type <c>VoidOr&lt;Unit&gt;</c>.
        /// </summary>
        /// <value>The unique object of type <c>VoidOr&lt;Unit&gt;</c>.</value>
        public static VoidOr<global::Narvalo.Fx.Unit> Unit
        {
            get
            {
                Warrant.NotNull<VoidOr<global::Narvalo.Fx.Unit>>();

                return s_Unit;
            }
        }


        /// <summary>
        /// Gets the zero for <see cref="VoidOr{T}"/>.
        /// </summary>
        /// <value>The zero for <see cref="VoidOr{T}"/>.</value>
        // Named "mzero" in Haskell parlance.
        public static VoidOr<global::Narvalo.Fx.Unit> Void
        {
            get
            {
                Warrant.NotNull<VoidOr<global::Narvalo.Fx.Unit>>();

                return VoidOr<global::Narvalo.Fx.Unit>.Void;
            }
        }


        /// <summary>
        /// Obtains an instance of the <see cref="VoidOr{T}"/> class for the specified value.
        /// </summary>
        /// <typeparam name="T">The underlying type of <paramref name="value"/>.</typeparam>
        /// <param name="value">A value to be wrapped into a <see cref="VoidOr{T}"/> object.</param>
        /// <returns>An instance of the <see cref="VoidOr{T}"/> class for the specified value.</returns>
        // Named "return" in Haskell parlance.
        public static VoidOr<T> FromError<T>(T value)
            /* T4: C# indent */
        {
            Warrant.NotNull<VoidOr<T>>();

            return VoidOr<T>.η(value);
        }

        #region Generalisations of list functions (Prelude)

        /// <summary>
        /// Removes one level of structure, projecting its bound value into the outer level.
        /// </summary>
        // Named "join" in Haskell parlance.
        public static VoidOr<T> Flatten<T>(VoidOr<VoidOr<T>> square)
            /* T4: C# indent */
        {
            Expect.NotNull(square);
            Warrant.NotNull<VoidOr<T>>();

            return VoidOr<T>.μ(square);
        }

        #endregion

        #region Conditional execution of monadic expressions (Prelude)


        // Named "guard" in Haskell parlance.
        public static VoidOr<global::Narvalo.Fx.Unit> Guard(bool predicate)
        {
            Warrant.NotNull<VoidOr<global::Narvalo.Fx.Unit>>();

            return predicate ? VoidOr.Unit : VoidOr<global::Narvalo.Fx.Unit>.Void;
        }


        #endregion

        #region Monadic lifting operators (Prelude)

        /// <summary>
        /// Promotes a function to use and return <see cref="VoidOr{T}" /> values.
        /// </summary>
        // Named "liftM" in Haskell parlance.
        public static Func<VoidOr<T>, VoidOr<TResult>> Lift<T, TResult>(
            Func<T, TResult> thunk)
            /* T4: C# indent */
        {
            Warrant.NotNull<Func<VoidOr<T>, VoidOr<TResult>>>();

            return m =>
            {
                Require.NotNull(m, nameof(m));
                return m.Select(thunk);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="VoidOr{T}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        // Named "liftM2" in Haskell parlance.
        public static Func<VoidOr<T1>, VoidOr<T2>, VoidOr<TResult>>
            Lift<T1, T2, TResult>(Func<T1, T2, TResult> thunk)
            /* T4: C# indent */
        {
            Warrant.NotNull<Func<VoidOr<T1>, VoidOr<T2>, VoidOr<TResult>>>();

            return (m1, m2) =>
            {
                Require.NotNull(m1, nameof(m1));
                return m1.Zip(m2, thunk);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="VoidOr{T}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        // Named "liftM3" in Haskell parlance.
        public static Func<VoidOr<T1>, VoidOr<T2>, VoidOr<T3>, VoidOr<TResult>>
            Lift<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> thunk)
            /* T4: C# indent */
        {
            Warrant.NotNull<Func<VoidOr<T1>, VoidOr<T2>, VoidOr<T3>, VoidOr<TResult>>>();

            return (m1, m2, m3) =>
            {
                Require.NotNull(m1, nameof(m1));
                return m1.Zip(m2, m3, thunk);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="VoidOr{T}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        // Named "liftM4" in Haskell parlance.
        public static Func<VoidOr<T1>, VoidOr<T2>, VoidOr<T3>, VoidOr<T4>, VoidOr<TResult>>
            Lift<T1, T2, T3, T4, TResult>(
            Func<T1, T2, T3, T4, TResult> thunk)
            /* T4: C# indent */
        {
            Warrant.NotNull<Func<VoidOr<T1>, VoidOr<T2>, VoidOr<T3>, VoidOr<T4>, VoidOr<TResult>>>();

            return (m1, m2, m3, m4) =>
            {
                Require.NotNull(m1, nameof(m1));
                return m1.Zip(m2, m3, m4, thunk);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="VoidOr{T}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        // Named "liftM5" in Haskell parlance.
        public static Func<VoidOr<T1>, VoidOr<T2>, VoidOr<T3>, VoidOr<T4>, VoidOr<T5>, VoidOr<TResult>>
            Lift<T1, T2, T3, T4, T5, TResult>(
            Func<T1, T2, T3, T4, T5, TResult> thunk)
            /* T4: C# indent */
        {
            Warrant.NotNull<Func<VoidOr<T1>, VoidOr<T2>, VoidOr<T3>, VoidOr<T4>, VoidOr<T5>, VoidOr<TResult>>>();

            return (m1, m2, m3, m4, m5) =>
            {
                Require.NotNull(m1, nameof(m1));
                return m1.Zip(m2, m3, m4, m5, thunk);
            };
        }

        #endregion
    } // End of VoidOr - T4: EmitMonadCore().

    // Provides the core monadic extension methods for VoidOr<T>.
    public static partial class VoidOr
    {
        #region Basic Monad functions (Prelude)

        // Named "fmap", "liftA" or "<$>" in Haskell parlance.
        public static VoidOr<TResult> Select<TSource, TResult>(
            this VoidOr<TSource> @this,
            Func<TSource, TResult> selector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(selector, nameof(selector));
            Warrant.NotNull<VoidOr<TResult>>();

            return @this.Bind(_ => VoidOr.FromError(selector.Invoke(_)));
        }

        // Named ">>" in Haskell parlance.
        public static VoidOr<TResult> Then<TSource, TResult>(
            this VoidOr<TSource> @this,
            VoidOr<TResult> other)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Warrant.NotNull<VoidOr<TResult>>();

            return @this.Bind(_ => other);
        }

        #endregion

        #region Generalisations of list functions (Prelude)


        // Named "mfilter" in Haskell parlance.
        public static VoidOr<TSource> Where<TSource>(
            this VoidOr<TSource> @this,
            Func<TSource, bool> predicate)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(predicate, nameof(predicate));
            Warrant.NotNull<VoidOr<TSource>>();

            return @this.Bind(
                _ => predicate.Invoke(_) ? @this : VoidOr<TSource>.Void);
        }


        // Named "replicateM" in Haskell parlance.
        public static VoidOr<IEnumerable<TSource>> Repeat<TSource>(
            this VoidOr<TSource> @this,
            int count)
        {
            Require.NotNull(@this, nameof(@this));
            Require.Range(count >= 1, nameof(count));
            Warrant.NotNull<VoidOr<IEnumerable<TSource>>>();

            return @this.Select(_ => Enumerable.Repeat(_, count));
        }


        #endregion

        #region Monadic lifting operators (Prelude)

        /// <see cref="Lift{T1, T2, T3}" />
        // Named "liftA2" in Haskell parlance.
        public static VoidOr<TResult> Zip<TFirst, TSecond, TResult>(
            this VoidOr<TFirst> @this,
            VoidOr<TSecond> second,
            Func<TFirst, TSecond, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));
            Warrant.NotNull<VoidOr<TResult>>();

            return @this.Bind(v1 => second.Select(v2 => resultSelector.Invoke(v1, v2)));
        }

        /// <see cref="Lift{T1, T2, T3, T4}" />
        // Named "liftA3" in Haskell parlance.
        public static VoidOr<TResult> Zip<T1, T2, T3, TResult>(
            this VoidOr<T1> @this,
            VoidOr<T2> second,
            VoidOr<T3> third,
            Func<T1, T2, T3, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));
            Warrant.NotNull<VoidOr<TResult>>();

            Func<T1, VoidOr<TResult>> g
                = t1 => second.Zip(third, (t2, t3) => resultSelector.Invoke(t1, t2, t3));

            return @this.Bind(g);
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5}" />
        // Named "liftA4" in Haskell parlance.
        public static VoidOr<TResult> Zip<T1, T2, T3, T4, TResult>(
             this VoidOr<T1> @this,
             VoidOr<T2> second,
             VoidOr<T3> third,
             VoidOr<T4> fourth,
             Func<T1, T2, T3, T4, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));
            Warrant.NotNull<VoidOr<TResult>>();

            Func<T1, VoidOr<TResult>> g
                = t1 => second.Zip(
                    third,
                    fourth,
                    (t2, t3, t4) => resultSelector.Invoke(t1, t2, t3, t4));

            return @this.Bind(g);
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5, T6}" />
        // Named "liftA5" in Haskell parlance.
        public static VoidOr<TResult> Zip<T1, T2, T3, T4, T5, TResult>(
            this VoidOr<T1> @this,
            VoidOr<T2> second,
            VoidOr<T3> third,
            VoidOr<T4> fourth,
            VoidOr<T5> fifth,
            Func<T1, T2, T3, T4, T5, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));
            Warrant.NotNull<VoidOr<TResult>>();

            Func<T1, VoidOr<TResult>> g
                = t1 => second.Zip(
                    third,
                    fourth,
                    fifth,
                    (t2, t3, t4, t5) => resultSelector.Invoke(t1, t2, t3, t4, t5));

            return @this.Bind(g);
        }

        #endregion

        #region Query Expression Pattern


        /// <remarks>
        /// Kind of generalisation of <see cref="Zip{T1, T2, T3}" /> (liftM2).
        /// </remarks>
        public static VoidOr<TResult> SelectMany<TSource, TMiddle, TResult>(
            this VoidOr<TSource> @this,
            Func<TSource, VoidOr<TMiddle>> valueSelector,
            Func<TSource, TMiddle, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(valueSelector, nameof(valueSelector));
            Require.NotNull(resultSelector, nameof(resultSelector));
            Warrant.NotNull<VoidOr<TResult>>();

            return @this.Bind(
                _ => valueSelector.Invoke(_).Select(
                    middle => resultSelector.Invoke(_, middle)));
        }


        public static VoidOr<TResult> Join<TSource, TInner, TKey, TResult>(
            this VoidOr<TSource> @this,
            VoidOr<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Expect.NotNull(inner);
            Expect.NotNull(outerKeySelector);
            Expect.NotNull(innerKeySelector);
            Expect.NotNull(resultSelector);
            Warrant.NotNull<VoidOr<TResult>>();

            return JoinImpl(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                EqualityComparer<TKey>.Default);
        }

        public static VoidOr<TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this VoidOr<TSource> @this,
            VoidOr<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, VoidOr<TInner>, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Expect.NotNull(inner);
            Expect.NotNull(outerKeySelector);
            Expect.NotNull(innerKeySelector);
            Expect.NotNull(resultSelector);
            Warrant.NotNull<VoidOr<TResult>>();

            return GroupJoinImpl(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                EqualityComparer<TKey>.Default);
        }


        #endregion

        #region LINQ extensions


        public static VoidOr<TResult> Join<TSource, TInner, TKey, TResult>(
            this VoidOr<TSource> @this,
            VoidOr<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
            /* T4: C# indent */
        {
            Expect.NotNull(@this);
            Expect.NotNull(inner);
            Expect.NotNull(outerKeySelector);
            Expect.NotNull(innerKeySelector);
            Expect.NotNull(resultSelector);
            Warrant.NotNull<VoidOr<TResult>>();

            return JoinImpl(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                comparer ?? EqualityComparer<TKey>.Default);
        }

        public static VoidOr<TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this VoidOr<TSource> @this,
            VoidOr<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, VoidOr<TInner>, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
            /* T4: C# indent */
        {
            Expect.NotNull(@this);
            Expect.NotNull(inner);
            Expect.NotNull(outerKeySelector);
            Expect.NotNull(innerKeySelector);
            Expect.NotNull(resultSelector);
            Warrant.NotNull<VoidOr<TResult>>();

            return GroupJoinImpl(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                comparer ?? EqualityComparer<TKey>.Default);
        }


        private static VoidOr<TResult> JoinImpl<TSource, TInner, TKey, TResult>(
            VoidOr<TSource> seq,
            VoidOr<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
            /* T4: C# indent */
        {
            Require.NotNull(seq, nameof(seq));
            Require.NotNull(resultSelector, nameof(resultSelector));
            Demand.NotNull(inner);
            Demand.NotNull(outerKeySelector);
            Demand.NotNull(innerKeySelector);
            Demand.NotNull(comparer);
            Warrant.NotNull<VoidOr<TResult>>();

            var keyLookupM = GetKeyLookup(inner, outerKeySelector, innerKeySelector, comparer);

            return from outerValue in seq
                   from innerValue in keyLookupM.Invoke(outerValue).Then(inner)
                   select resultSelector.Invoke(outerValue, innerValue);
        }

        private static VoidOr<TResult> GroupJoinImpl<TSource, TInner, TKey, TResult>(
            VoidOr<TSource> seq,
            VoidOr<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, VoidOr<TInner>, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
            /* T4: C# indent */
        {
            Require.NotNull(seq, nameof(seq));
            Require.NotNull(resultSelector, nameof(resultSelector));
            Demand.NotNull(inner);
            Demand.NotNull(outerKeySelector);
            Demand.NotNull(innerKeySelector);
            Demand.NotNull(comparer);
            Warrant.NotNull<VoidOr<TResult>>();

            var keyLookupM = GetKeyLookup(inner, outerKeySelector, innerKeySelector, comparer);

            return from outerValue in seq
                   select resultSelector.Invoke(outerValue, keyLookupM.Invoke(outerValue).Then(inner));
        }

        private static Func<TSource, VoidOr<TKey>> GetKeyLookup<TSource, TInner, TKey>(
            VoidOr<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            IEqualityComparer<TKey> comparer)
            /* T4: C# indent */
        {
            Require.NotNull(inner, nameof(inner));
            Require.NotNull(outerKeySelector, nameof(outerKeySelector));
            Require.NotNull(comparer, nameof(comparer));
            Demand.NotNull(innerKeySelector);
            Warrant.NotNull<Func<TSource, VoidOr<TKey>>>();

            return source =>
            {
                TKey outerKey = outerKeySelector.Invoke(source);

                return inner.Select(innerKeySelector).Where(_ => comparer.Equals(_, outerKey));
            };
        }


        #endregion
    } // End of VoidOr - T4: EmitMonadExtensions().

    // Provides extension methods for Func<T> in the Kleisli category.
    public static partial class Func
    {
        #region Basic Monad functions (Prelude)


        // Named "=<<" in Haskell parlance. Same as Bind (>>=) with its arguments flipped.
        public static VoidOr<TResult> Invoke<TSource, TResult>(
            this Func<TSource, VoidOr<TResult>> @this,
            VoidOr<TSource> value)
            /* T4: C# indent */
        {
            Expect.NotNull(@this);
            Require.NotNull(value, nameof(value));
            Warrant.NotNull<VoidOr<TResult>>();

            return value.Bind(@this);
        }

        // Named ">=>" in Haskell parlance.
        public static Func<TSource, VoidOr<TResult>> Compose<TSource, TMiddle, TResult>(
            this Func<TSource, VoidOr<TMiddle>> @this,
            Func<TMiddle, VoidOr<TResult>> thunk)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Expect.NotNull(thunk);
            Warrant.NotNull<Func<TSource, VoidOr<TResult>>>();

            return _ => @this.Invoke(_).Bind(thunk);
        }

        // Named "<=<" in Haskell parlance.
        public static Func<TSource, VoidOr<TResult>> ComposeBack<TSource, TMiddle, TResult>(
            this Func<TMiddle, VoidOr<TResult>> @this,
            Func<TSource, VoidOr<TMiddle>> thunk)
            /* T4: C# indent */
        {
            Expect.NotNull(@this);
            Require.NotNull(thunk, nameof(thunk));
            Warrant.NotNull<Func<TSource, VoidOr<TResult>>>();

            return _ => thunk.Invoke(_).Bind(@this);
        }

        #endregion
    } // End of Func - T4: EmitKleisliExtensions().
}

namespace Narvalo.Fx.Extensions
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;

    // Provides more extension methods for VoidOr<T>.
    public static partial class VoidOrExtensions
    {
        #region Basic Monad functions (Prelude)

        // Named "forever" in Haskell parlance.
        public static VoidOr<TResult> Forever<TSource, TResult>(
            this VoidOr<TSource> @this,
            Func<VoidOr<TResult>> thunk
            )
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Warrant.NotNull<VoidOr<TResult>>();

            return @this.Then(@this.Forever(thunk));
        }

        // Named "void" in Haskell parlance.
        [SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "this", Justification = "[Intentionally] This method always returns the same result.")]
        public static VoidOr<global::Narvalo.Fx.Unit> Forget<TSource>(this VoidOr<TSource> @this)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Warrant.NotNull<VoidOr<global::Narvalo.Fx.Unit>>();

            return VoidOr.Unit;
        }

        #endregion

        #region Conditional execution of monadic expressions (Prelude)

        // Named "when" in Haskell parlance. Haskell uses a different signature.
        public static void When<TSource>(
            this VoidOr<TSource> @this,
            Func<TSource, bool> predicate,
            Action<TSource> action)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(predicate, nameof(predicate));
            Require.NotNull(action, nameof(action));

            @this.Bind(_ => { if (predicate.Invoke(_)) { action.Invoke(_); } return VoidOr.Unit; });
        }

        // Named "unless" in Haskell parlance. Haskell uses a different signature.
        public static void Unless<TSource>(
            this VoidOr<TSource> @this,
            Func<TSource, bool> predicate,
            Action<TSource> action)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(predicate, nameof(predicate));
            Require.NotNull(action, nameof(action));

            @this.Bind(_ => { if (!predicate.Invoke(_)) { action.Invoke(_); } return VoidOr.Unit; });
        }

        #endregion

        #region Applicative

        // Named "<$" in Haskell parlance.
        public static VoidOr<TSource> Replace<TSource>(
            this VoidOr<TSource> @this,
            TSource value)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Warrant.NotNull<VoidOr<TSource>>();

            return @this.Select(_ => value);
        }


        // Named "<**>" in Haskell parlance.
        public static VoidOr<Tuple<TSource, TOther>> Merge<TSource, TOther>(
            this VoidOr<TSource> @this,
            VoidOr<TOther> other)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));

            return @this.Zip(other, Tuple.Create);
        }


        #endregion

        public static VoidOr<TResult> Coalesce<TSource, TResult>(
            this VoidOr<TSource> @this,
            Func<TSource, bool> predicate,
            VoidOr<TResult> then,
            VoidOr<TResult> otherwise)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(predicate, nameof(predicate));
            Warrant.NotNull<VoidOr<TResult>>();

            return @this.Bind(_ => predicate.Invoke(_) ? then : otherwise);
        }


        // Generalizes the standard Then().
        public static VoidOr<TResult> Then<TSource, TResult>(
            this VoidOr<TSource> @this,
            Func<TSource, bool> predicate,
            VoidOr<TResult> other)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(predicate, nameof(predicate));
            Warrant.NotNull<VoidOr<TResult>>();

            return @this.Bind(_ => predicate.Invoke(_) ? other : VoidOr<TResult>.Void);
        }

        public static VoidOr<TResult> Otherwise<TSource, TResult>(
            this VoidOr<TSource> @this,
            Func<TSource, bool> predicate,
            VoidOr<TResult> other)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(predicate, nameof(predicate));
            Warrant.NotNull<VoidOr<TResult>>();

            return @this.Bind(_ => !predicate.Invoke(_) ? other : VoidOr<TResult>.Void);
        }

        public static void Do<TSource>(
            this VoidOr<TSource> @this,
            Action<TSource> action)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(action, nameof(action));
            Warrant.NotNull<VoidOr<TSource>>();

            @this.Bind(_ => { action.Invoke(_); return VoidOr.Unit; });
        }
    } // End of VoidOr - T4: EmitMonadExtraExtensions().
}

