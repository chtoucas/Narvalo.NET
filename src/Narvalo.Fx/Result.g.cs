// Copyright (c) Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
//
// Runtime Version: 4.0.30319.42000
// Microsoft.VisualStudio.TextTemplating: 14.0
// </auto-generated>
//------------------------------------------------------------------------------


namespace Narvalo.Fx
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;

    using Narvalo.Fx.Internal;
    using Narvalo.Fx.Linq;

    // Provides a set of static methods for Result<T, TError>.
    // NB: Sometimes we prefer extension methods over static methods to be able to override them locally.
    public static partial class Result
    {

        /// <summary>
        /// Obtains an instance of the <see cref="Result{T, TError}"/> class for the specified value.
        /// </summary>
        /// <typeparam name="T">The underlying type of <paramref name="value"/>.</typeparam>
        /// <typeparam name="TError"></typeparam>
        /// <param name="value">A value to be wrapped into a <see cref="Result{T, TError}"/> object.</param>
        /// <returns>An instance of the <see cref="Result{T, TError}"/> class for the specified value.</returns>
        // Named "return" (Monad) or "pure" (Applicative) in Haskell parlance.
        public static Result<T, TError> Of<T, TError>(T value)
            /* T4: C# indent */
        {
            Warrant.NotNull<Result<T, TError>>();

            return Result<T, TError>.η(value);
        }

        #region Generalisations of list functions

        /// <summary>
        /// Removes one level of structure, projecting its bound value into the outer level.
        /// </summary>
        // Named "join" in Haskell parlance.
        public static Result<T, TError> Flatten<T, TError>(Result<Result<T, TError>, TError> square)
            /* T4: C# indent */
        {
            Expect.NotNull(square);

            return Result<T, TError>.μ(square);
        }

        #endregion

        #region Conditional execution of monadic expressions


        #endregion

        #region Monadic lifting operators

        /// <summary>
        /// Promotes a function to use and return <see cref="Result{T, TError}" /> values.
        /// </summary>
        // Named "liftM" in Haskell parlance.
        public static Func<Result<T, TError>, Result<TResult, TError>> Lift<T, TResult, TError>(
            Func<T, TResult> thunk)
            /* T4: C# indent */
        {
            Warrant.NotNull<Func<Result<T, TError>, Result<TResult, TError>>>();

            return m =>
            {
                Require.NotNull(m, nameof(m));
                return m.Select(thunk);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="Result{T, TError}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        // Named "liftM2" in Haskell parlance.
        public static Func<Result<T1, TError>, Result<T2, TError>, Result<TResult, TError>>
            Lift<T1, T2, TResult, TError>(Func<T1, T2, TResult> thunk)
            /* T4: C# indent */
        {
            Warrant.NotNull<Func<Result<T1, TError>, Result<T2, TError>, Result<TResult, TError>>>();

            return (m1, m2) =>
            {
                Require.NotNull(m1, nameof(m1));
                return m1.Zip(m2, thunk);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="Result{T, TError}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        // Named "liftM3" in Haskell parlance.
        public static Func<Result<T1, TError>, Result<T2, TError>, Result<T3, TError>, Result<TResult, TError>>
            Lift<T1, T2, T3, TResult, TError>(Func<T1, T2, T3, TResult> thunk)
            /* T4: C# indent */
        {
            Warrant.NotNull<Func<Result<T1, TError>, Result<T2, TError>, Result<T3, TError>, Result<TResult, TError>>>();

            return (m1, m2, m3) =>
            {
                Require.NotNull(m1, nameof(m1));
                return m1.Zip(m2, m3, thunk);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="Result{T, TError}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        // Named "liftM4" in Haskell parlance.
        public static Func<Result<T1, TError>, Result<T2, TError>, Result<T3, TError>, Result<T4, TError>, Result<TResult, TError>>
            Lift<T1, T2, T3, T4, TResult, TError>(
            Func<T1, T2, T3, T4, TResult> thunk)
            /* T4: C# indent */
        {
            Warrant.NotNull<Func<Result<T1, TError>, Result<T2, TError>, Result<T3, TError>, Result<T4, TError>, Result<TResult, TError>>>();

            return (m1, m2, m3, m4) =>
            {
                Require.NotNull(m1, nameof(m1));
                return m1.Zip(m2, m3, m4, thunk);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="Result{T, TError}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        // Named "liftM5" in Haskell parlance.
        public static Func<Result<T1, TError>, Result<T2, TError>, Result<T3, TError>, Result<T4, TError>, Result<T5, TError>, Result<TResult, TError>>
            Lift<T1, T2, T3, T4, T5, TResult, TError>(
            Func<T1, T2, T3, T4, T5, TResult> thunk)
            /* T4: C# indent */
        {
            Warrant.NotNull<Func<Result<T1, TError>, Result<T2, TError>, Result<T3, TError>, Result<T4, TError>, Result<T5, TError>, Result<TResult, TError>>>();

            return (m1, m2, m3, m4, m5) =>
            {
                Require.NotNull(m1, nameof(m1));
                return m1.Zip(m2, m3, m4, m5, thunk);
            };
        }

        #endregion
    } // End of Result - T4: EmitMonadCore().

    // Provides extension methods for Result<T, TError>.
    public static partial class Result
    {
        #region Applicative

        // Named "<$" (Applicative) in Haskell parlance.
        public static Result<TResult, TError> Replace<TSource, TResult, TError>(
            this Result<TSource, TError> @this,
            TResult value)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));

            return @this.Select(_ => value);
        }


        // Named "<*>" in Haskell parlance. Same as Apply (<**>) with its arguments flipped.
        public static Result<TResult, TError> Gather<TSource, TResult, TError>(
            this Result<TSource, TError> @this,
            Result<Func<TSource, TResult>, TError> applicative)
            /* T4: C# indent */
        {
            Require.NotNull(applicative, nameof(applicative));

            return applicative.Apply(@this);
        }

        // Named "<**>" in Haskell parlance. Same as Gather (<*>) with its arguments flipped.
        public static Result<TResult, TError> Apply<TSource, TResult, TError>(
            this Result<Func<TSource, TResult>, TError> @this,
            Result<TSource, TError> value)
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(value, nameof(value));

            return @this.Bind(thunk => value.Select(v => thunk.Invoke(v)));
        }

        public static Result<Tuple<TSource, TOther>, TError> Zip<TSource, TOther, TError>(
            this Result<TSource, TError> @this,
            Result<TOther, TError> other)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));

            return @this.Zip(other, Tuple.Create);
        }


        #endregion

        #region Basic Monad functions

        // Named "fmap", "liftA" or "<$>" (Applicative) in Haskell parlance.
        public static Result<TResult, TError> Select<TSource, TResult, TError>(
            this Result<TSource, TError> @this,
            Func<TSource, TResult> selector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(selector, nameof(selector));

            return @this.Bind(_ => Result.Of<TResult, TError>(selector.Invoke(_)));
        }

        // Named ">>" (Monad) or "*>" (Applicative) in Haskell parlance.
        public static Result<TResult, TError> ReplaceBy<TSource, TResult, TError>(
            this Result<TSource, TError> @this,
            Result<TResult, TError> other)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));

            return @this.Bind(_ => other);
        }

        // Named "void" in Haskell parlance.
        [SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "this", Justification = "[Intentionally] This method always returns the same result.")]
        public static Result<global::Narvalo.Fx.Unit, TError> Skip<TSource, TError>(this Result<TSource, TError> @this)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Warrant.NotNull<Result<global::Narvalo.Fx.Unit, TError>>();

            return Result.Of<Unit, TError>(global::Narvalo.Fx.Unit.Single);
        }

        // Named "forever" in Haskell parlance.
        public static Result<TResult, TError> Forever<TSource, TResult, TError>(
            this Result<TSource, TError> @this,
            Func<Result<TResult, TError>> thunk)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));

            return @this.ReplaceBy(@this.Forever(thunk));
        }

        #endregion

        #region Other extensions

        public static Result<TResult, TError> Coalesce<TSource, TResult, TError>(
            this Result<TSource, TError> @this,
            Func<TSource, bool> predicate,
            Result<TResult, TError> thenResult,
            Result<TResult, TError> elseResult)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(predicate, nameof(predicate));

            return @this.Bind(_ => predicate.Invoke(_) ? thenResult : elseResult);
        }


        public static Result<TResult, TError> Using<TSource, TResult, TError>(
            this Result<TSource, TError> @this,
            Func<TSource, Result<TResult, TError>> selector)
            where TSource : IDisposable
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(selector, nameof(selector));

            return @this.Bind(_ => { using (_) { return selector.Invoke(_); } });
        }

        public static Result<TResult, TError> Using<TSource, TResult, TError>(
            this Result<TSource, TError> @this,
            Func<TSource, TResult> selector)
            where TSource : IDisposable
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(selector, nameof(selector));

            return @this.Select(_ => { using (_) { return selector.Invoke(_); } });
        }

        #endregion

        #region Generalisations of list functions


        // Named "replicateM" in Haskell parlance.
        public static Result<IEnumerable<TSource>, TError> Repeat<TSource, TError>(
            this Result<TSource, TError> @this,
            int count)
        {
            Require.NotNull(@this, nameof(@this));
            Require.Range(count >= 1, nameof(count));

            return @this.Select(_ => Enumerable.Repeat(_, count));
        }


        #endregion

        #region Conditional execution of monadic expressions

        // Named "when" in Haskell parlance. Haskell uses a different signature.
        public static void When<TSource, TError>(
            this Result<TSource, TError> @this,
            Func<TSource, bool> predicate,
            Action<TSource> action)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(predicate, nameof(predicate));
            Require.NotNull(action, nameof(action));

            @this.Bind(
                _ => {
                    if (predicate.Invoke(_)) { action.Invoke(_); }

                    return @this.Skip();
                });
        }

        // Named "unless" in Haskell parlance. Haskell uses a different signature.
        public static void Unless<TSource, TError>(
            this Result<TSource, TError> @this,
            Func<TSource, bool> predicate,
            Action<TSource> action)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Expect.NotNull(predicate);
            Expect.NotNull(action);

            @this.When(_ => !predicate.Invoke(_), action);
        }

        #endregion

        #region Applicative lifting operators

        /// <see cref="Lift{T1, T2, T3}" />
        // Named "liftA2" (Applicative) in Haskell parlance.
        public static Result<TResult, TError> Zip<TFirst, TSecond, TResult, TError>(
            this Result<TFirst, TError> @this,
            Result<TSecond, TError> second,
            Func<TFirst, TSecond, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));

            return @this.Bind(v1 => second.Select(v2 => resultSelector.Invoke(v1, v2)));
        }

        /// <see cref="Lift{T1, T2, T3, T4}" />
        // Named "liftA3" (Applicative) in Haskell parlance.
        public static Result<TResult, TError> Zip<T1, T2, T3, TResult, TError>(
            this Result<T1, TError> @this,
            Result<T2, TError> second,
            Result<T3, TError> third,
            Func<T1, T2, T3, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));

            Func<T1, Result<TResult, TError>> g
                = t1 => second.Zip(third, (t2, t3) => resultSelector.Invoke(t1, t2, t3));

            return @this.Bind(g);
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5}" />
        // Named "liftA4" (Applicative) in Haskell parlance.
        public static Result<TResult, TError> Zip<T1, T2, T3, T4, TResult, TError>(
             this Result<T1, TError> @this,
             Result<T2, TError> second,
             Result<T3, TError> third,
             Result<T4, TError> fourth,
             Func<T1, T2, T3, T4, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));

            Func<T1, Result<TResult, TError>> g
                = t1 => second.Zip(
                    third,
                    fourth,
                    (t2, t3, t4) => resultSelector.Invoke(t1, t2, t3, t4));

            return @this.Bind(g);
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5, T6}" />
        // Named "liftA5" (Applicative) in Haskell parlance.
        public static Result<TResult, TError> Zip<T1, T2, T3, T4, T5, TResult, TError>(
            this Result<T1, TError> @this,
            Result<T2, TError> second,
            Result<T3, TError> third,
            Result<T4, TError> fourth,
            Result<T5, TError> fifth,
            Func<T1, T2, T3, T4, T5, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));

            Func<T1, Result<TResult, TError>> g
                = t1 => second.Zip(
                    third,
                    fourth,
                    fifth,
                    (t2, t3, t4, t5) => resultSelector.Invoke(t1, t2, t3, t4, t5));

            return @this.Bind(g);
        }

        #endregion

        #region Query Expression Pattern


        /// <remarks>
        /// Kind of generalisation of <see cref="Zip{T1, T2, T3}" />.
        /// </remarks>
        public static Result<TResult, TError> SelectMany<TSource, TMiddle, TResult, TError>(
            this Result<TSource, TError> @this,
            Func<TSource, Result<TMiddle, TError>> valueSelector,
            Func<TSource, TMiddle, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(valueSelector, nameof(valueSelector));
            Require.NotNull(resultSelector, nameof(resultSelector));

            return @this.Bind(
                _ => valueSelector.Invoke(_).Select(
                    middle => resultSelector.Invoke(_, middle)));
        }


        #endregion

        #region LINQ extensions


        #endregion
    } // End of Result - T4: EmitMonadExtensions().

    // Provides extension methods for Func<T> in the Kleisli category.
    public static partial class Kunc
    {
        #region Basic Monad functions


        // Named "forM" in Haskell parlance. Same as SelectWith (mapM) with its arguments flipped.
        public static Result<IEnumerable<TResult>, TError> ForEach<TSource, TResult, TError>(
            this Func<TSource, Result<TResult, TError>> @this,
            IEnumerable<TSource> seq)
        {
            Expect.NotNull(@this);
            Expect.NotNull(seq);
            Warrant.NotNull<Result<IEnumerable<TResult>, TError>>();

            return seq.Select(@this).EmptyIfNull().Collect();
        }


        // Named "=<<" in Haskell parlance. Same as Bind (>>=) with its arguments flipped.
        public static Result<TResult, TError> Invoke<TSource, TResult, TError>(
            this Func<TSource, Result<TResult, TError>> @this,
            Result<TSource, TError> value)
            /* T4: C# indent */
        {
            Expect.NotNull(@this);
            Require.NotNull(value, nameof(value));

            return value.Bind(@this);
        }

        // Named ">=>" in Haskell parlance.
        public static Func<TSource, Result<TResult, TError>> Compose<TSource, TMiddle, TResult, TError>(
            this Func<TSource, Result<TMiddle, TError>> @this,
            Func<TMiddle, Result<TResult, TError>> thunk)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Expect.NotNull(thunk);
            Warrant.NotNull<Func<TSource, Result<TResult, TError>>>();

            return _ => @this.Invoke(_).Bind(thunk);
        }

        // Named "<=<" in Haskell parlance.
        public static Func<TSource, Result<TResult, TError>> ComposeBack<TSource, TMiddle, TResult, TError>(
            this Func<TMiddle, Result<TResult, TError>> @this,
            Func<TSource, Result<TMiddle, TError>> thunk)
            /* T4: C# indent */
        {
            Expect.NotNull(@this);
            Require.NotNull(thunk, nameof(thunk));
            Warrant.NotNull<Func<TSource, Result<TResult, TError>>>();

            return _ => thunk.Invoke(_).Bind(@this);
        }

        #endregion
    } // End of Func - T4: EmitKleisliExtensions().

    // Provides extension methods for IEnumerable<Result<T, TError>>.
    public static partial class Result
    {
        #region Basic Monad functions


        // Named "sequence" in Haskell parlance.
        public static Result<IEnumerable<TSource>, TError> Collect<TSource, TError>(
            this IEnumerable<Result<TSource, TError>> @this)
        {
            Expect.NotNull(@this);
            Warrant.NotNull<Result<IEnumerable<TSource>, TError>>();

            return @this.CollectImpl();
        }


        #endregion

    } // End of Sequence - T4: EmitMonadEnumerableExtensions().
}

namespace Narvalo.Fx.Internal
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;

    using Narvalo.Fx.Linq;

    // Provides default implementations for the extension methods for IEnumerable<Result<T, TError>>.
    // You will certainly want to override them to improve performance.
    internal static partial class EnumerableExtensions
    {

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static Result<IEnumerable<TSource>, TError> CollectImpl<TSource, TError>(
            this IEnumerable<Result<TSource, TError>> @this)
        {
            Demand.NotNull(@this);
            Warrant.NotNull<Result<IEnumerable<TSource>, TError>>();

            var seed = Result.Of<IEnumerable<TSource>, TError>(Enumerable.Empty<TSource>());
            //var seed = Result.Of(Enumerable.Empty<TSource>());
            // Inlined LINQ Append method:
            Func<IEnumerable<TSource>, TSource, IEnumerable<TSource>> append = (m, item) => m.Append(item);

            // NB: Maybe.Lift(append) is the same as:
            // Func<Result<IEnumerable<TSource>>, Result<TSource>, Result<IEnumerable<TSource>>> liftedAppend
            //     = (m, item) => m.Bind(list => Append(list, item));
            // where Append is defined below.
            var retval = @this.Aggregate(seed, Result.Lift<IEnumerable<TSource>, TSource, IEnumerable<TSource>, TError>(append));
            System.Diagnostics.Contracts.Contract.Assume(retval != null);

            return retval;
        }

        // NB: We do not inline this method to avoid the creation of an unused private field (CA1823 warning).
        //private static Result<IEnumerable<TSource>> Append<TSource>(
        //    IEnumerable<TSource> list,
        //    Result<TSource> m)
        //{
        //    Demand.NotNull(m);

        //    return m.Bind(item => Result.Of(list.Concat(Enumerable.Repeat(item, 1))));
        //}

    } // End of EnumerableExtensions - T4: EmitMonadEnumerableInternalExtensions().
}
