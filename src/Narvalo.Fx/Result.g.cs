// Copyright (c) Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
//
// Runtime Version: 4.0.30319.42000
// Microsoft.VisualStudio.TextTemplating: 14.0
// </auto-generated>
//------------------------------------------------------------------------------


namespace Narvalo.Fx
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;

    using Narvalo.Fx.Internal;

    // Provides the core monadic extension methods for Result<T>.
    public static partial class Result
    {
        #region Applicative

        // Named "<$" in Haskell parlance.
        public static Result<TResult, TError> Replace<TSource, TResult, TError>(
            this Result<TSource, TError> @this,
            TResult value)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));

            return @this.Select(_ => value);
        }

        #endregion

        #region Basic Monad functions (Prelude)

        // Named "fmap", "liftA" or "<$>" in Haskell parlance.
        public static Result<TResult, TError> Select<TSource, TResult, TError>(
            this Result<TSource, TError> @this,
            Func<TSource, TResult> selector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(selector, nameof(selector));

            return @this.Bind(_ => Result.Of<TResult, TError>(selector.Invoke(_)));
            //return @this.Bind(_ => Result.Of<TResult, TError>(selector.Invoke(_)));
        }

        // Named ">>" in Haskell parlance.
        public static Result<TResult, TError> Then<TSource, TResult, TError>(
            this Result<TSource, TError> @this,
            Result<TResult, TError> other)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));

            return @this.Bind(_ => other);
        }

        // Named "void" in Haskell parlance.
        [SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "this", Justification = "[Intentionally] This method always returns the same result.")]
        public static Result<global::Narvalo.Fx.Unit, TError> Forget<TSource, TError>(this Result<TSource, TError> @this)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Warrant.NotNull<Result<global::Narvalo.Fx.Unit, TError>>();

            return Result.Of<Unit, TError>(global::Narvalo.Fx.Unit.Single);
        }

        #endregion

        #region Generalisations of list functions (Prelude)


        // Named "replicateM" in Haskell parlance.
        public static Result<IEnumerable<TSource>, TError> Repeat<TSource, TError>(
            this Result<TSource, TError> @this,
            int count)
        {
            Require.NotNull(@this, nameof(@this));
            Require.Range(count >= 1, nameof(count));

            return @this.Select(_ => Enumerable.Repeat(_, count));
        }


        #endregion

        #region Monadic lifting operators (Prelude)

        /// <see cref="Lift{T1, T2, T3}" />
        // Named "liftA2" in Haskell parlance.
        public static Result<TResult, TError> Zip<TFirst, TSecond, TResult, TError>(
            this Result<TFirst, TError> @this,
            Result<TSecond, TError> second,
            Func<TFirst, TSecond, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));

            return @this.Bind(v1 => second.Select(v2 => resultSelector.Invoke(v1, v2)));
        }

        /// <see cref="Lift{T1, T2, T3, T4}" />
        // Named "liftA3" in Haskell parlance.
        public static Result<TResult, TError> Zip<T1, T2, T3, TResult, TError>(
            this Result<T1, TError> @this,
            Result<T2, TError> second,
            Result<T3, TError> third,
            Func<T1, T2, T3, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));

            Func<T1, Result<TResult, TError>> g
                = t1 => second.Zip(third, (t2, t3) => resultSelector.Invoke(t1, t2, t3));

            return @this.Bind(g);
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5}" />
        // Named "liftA4" in Haskell parlance.
        public static Result<TResult, TError> Zip<T1, T2, T3, T4, TResult, TError>(
             this Result<T1, TError> @this,
             Result<T2, TError> second,
             Result<T3, TError> third,
             Result<T4, TError> fourth,
             Func<T1, T2, T3, T4, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));

            Func<T1, Result<TResult, TError>> g
                = t1 => second.Zip(
                    third,
                    fourth,
                    (t2, t3, t4) => resultSelector.Invoke(t1, t2, t3, t4));

            return @this.Bind(g);
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5, T6}" />
        // Named "liftA5" in Haskell parlance.
        public static Result<TResult, TError> Zip<T1, T2, T3, T4, T5, TResult, TError>(
            this Result<T1, TError> @this,
            Result<T2, TError> second,
            Result<T3, TError> third,
            Result<T4, TError> fourth,
            Result<T5, TError> fifth,
            Func<T1, T2, T3, T4, T5, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));

            Func<T1, Result<TResult, TError>> g
                = t1 => second.Zip(
                    third,
                    fourth,
                    fifth,
                    (t2, t3, t4, t5) => resultSelector.Invoke(t1, t2, t3, t4, t5));

            return @this.Bind(g);
        }

        #endregion

        #region Query Expression Pattern


        /// <remarks>
        /// Kind of generalisation of <see cref="Zip{T1, T2, T3}" /> (liftM2).
        /// </remarks>
        public static Result<TResult, TError> SelectMany<TSource, TMiddle, TResult, TError>(
            this Result<TSource, TError> @this,
            Func<TSource, Result<TMiddle, TError>> valueSelector,
            Func<TSource, TMiddle, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.NotNull(@this, nameof(@this));
            Require.NotNull(valueSelector, nameof(valueSelector));
            Require.NotNull(resultSelector, nameof(resultSelector));

            return @this.Bind(
                _ => valueSelector.Invoke(_).Select(
                    middle => resultSelector.Invoke(_, middle)));
        }


        #endregion

        #region LINQ extensions


        #endregion
    } // End of Result - T4: EmitMonadExtensions().
}
