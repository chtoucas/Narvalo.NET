<#@ template language="C#" debug="true" hostspecific="true" inherits="Narvalo.T4.MonadTemplate" #>
<#@ output extension=".g.cs" #>
<#@ include file="Monad\EmitMonadCore.tt" #>
<#@ include file="Monad\EmitMonadExtensions.tt" #>
<#@ include file="Monad\EmitKleisliExtensions.tt" #>
<#@ include file="Monad\EmitMonadEnumerableExtensions.tt" #>
<#@ include file="Monad\EmitMonadEnumerableInternalExtensions.tt" #>
<#@ include file="Monad\EmitEnumerableExtensions.tt" #>
<#@ include file="Monad\EmitEnumerableInternalExtensions.tt" #>
<#@ include file="Monad\EmitComonadCore.tt" #>
<#@ assembly name="$(ProjectDir)\..\Narvalo.T4\bin\$(Configuration)\Narvalo.T4.dll" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #><#+
// Copyright (c) Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

    private bool _headerWritten = false;

    // EmitMonad -----------------------------------------------------------------------------------

    // Generates a Monad.
    public void EmitMonad()
    {
        WriteHeader_();
#>
namespace <#= Namespace #>
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.Contracts;
    using System.Linq;

    using global::Narvalo;

<#+ EmitMonadCore(); #>

<#+ EmitMonadExtensions(); #>

<#+ EmitKleisliExtensions(); #>
}
<#+
    } // End of EmitMonad().

    // EmitComonad ---------------------------------------------------------------------------------
    
    // Generates a Comonad.
    public void EmitComonad()
    {
        WriteHeader_();
#>
namespace <#= Namespace #>
{
    using System.Diagnostics.Contracts;

<#+ EmitComonadCore(); #>
}
<#+
    } // End of EmitComonad().

    // EmitLinq ------------------------------------------------------------------------------------
    
    // Generates the LINQ extensions.
    public void EmitLinq()
    {
        WriteHeader_();
#>
namespace <#= Namespace #>
{
    using System.Collections.Generic;
    using System.Diagnostics.Contracts;

    using <#= Namespace #>.Internal;

<#+ EmitMonadEnumerableExtensions(); #>
}

namespace <#= AdvancedNamespace #>
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.Contracts;

    using <#= Namespace #>;
    using <#= Namespace #>.Internal;

<#+ EmitEnumerableExtensions(); #>
}

namespace <#= Namespace #>.Internal
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.Contracts;
    using System.Linq;

    using global::Narvalo;
    using Narvalo.Fx; // Necessary for EmptyIfNull().
<#+ if (Namespace != "Narvalo.Fx") { #>   
    using <#= Namespace #>;
<#+ } #>   
<#+ if (Namespace != AdvancedNamespace) { #>   
    using <#= AdvancedNamespace #>;
<#+ } #>   

<#+ EmitMonadEnumerableInternalExtensions(); #>

<#+ EmitEnumerableInternalExtensions(); #>
}
<#+
    } // End of EmitLinq().
    
    /* ========================================================================================== *
     * Private Methods
     * ========================================================================================== */

    private void WriteHeader_()
    {
        if (_headerWritten) {
            return;
        }
#>
<#= HeaderText #>

using global::System.Diagnostics.CodeAnalysis;

// See http://msdn.microsoft.com/en-us/library/ms244717.aspx for an explanation 
// of the effect of the SuppressMessage attribute at module scope.
// This suppresses the corresponding warnings for the code inside the generated file.
// We either favour T4 readibility over StyleCop rules or disable rules that do not make sense 
// for files generated by a Text Template.
[module: SuppressMessage("StyleCop.CSharp.OrderingRules", "SA1202:ElementsMustBeOrderedByAccess",
    Justification = "[GeneratedCode] Elements are correctly ordered in the T4 source file.")]
[module: SuppressMessage("StyleCop.CSharp.OrderingRules", "SA1210:UsingDirectivesMustBeOrderedAlphabeticallyByNamespace",
    Justification = "[GeneratedCode] Directives are correctly ordered in the T4 source file.")]
[module: SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass",
    Justification = "[GeneratedCode] A T4 template may contain multiple classes.")]
[module: SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1403:FileMayOnlyContainASingleNamespace",
    Justification = "[GeneratedCode] A T4 template may contain multiple namespaces.")]
[module: SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1505:OpeningCurlyBracketsMustNotBeFollowedByBlankLine",
    Justification = "[GeneratedCode] Newline rules are disabled for T4 templates.")]
[module: SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1507:CodeMustNotContainMultipleBlankLinesInARow",
    Justification = "[GeneratedCode] Newline rules are disabled for T4 templates.")]

<#+
        _headerWritten = true;
    } // End of WriteHeader_().
    
    private void WriteCompilerAttributes_()
    {
        var serviceProvider = (IServiceProvider)this.Host;
        var dte = serviceProvider.GetService(typeof(DTE)) as DTE;  
#>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "<#= dte.Version #>")]
    [global::System.Diagnostics.DebuggerNonUserCode]
<#+
    } // End of WriteCompilerAttributes_().
    
    private void WriteTypeConstraints_(params string[] names)
    {
        if (HasUnderlyingTypeConstraint) {
            foreach (var name in names) {
#>
            where <#= name #> : <#= UnderlyingTypeConstraint #>
<#+
            }
        }
    } // End of WriteTypeConstraints_().

    private void WriteObjectNotNull_(bool force = false) 
    {
        if (force || IsNullable) {
#>
            Require.Object(@this);
<#+
        }
    } // End of WriteObjectNotNull_().
    
    private void WriteNotNull_(string name) 
    {
        if (IsNullable) {
#>
            Require.NotNull(<#= name #>, "<#= name #>");
<#+
        }
    } // End of WriteNotNull_().
#>
