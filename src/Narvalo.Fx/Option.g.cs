// Copyright (c) Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
//
// Runtime Version: 4.0.30319.34209
// </auto-generated>
//------------------------------------------------------------------------------

using global::System.Diagnostics.CodeAnalysis;

// See http://msdn.microsoft.com/en-us/library/ms244717.aspx for an explanation 
// of the effect of the SuppressMessage attribute at module scope.
// This suppresses the corresponding warnings for the code inside the generated file.
// We either favour T4 readibility over StyleCop rules or disable rules that do not make sense 
// for files generated by a Text Template.
[module: SuppressMessage("StyleCop.CSharp.OrderingRules", "SA1202:ElementsMustBeOrderedByAccess",
    Justification = "[GeneratedCode] Elements are correctly ordered in the T4 source file.")]
[module: SuppressMessage("StyleCop.CSharp.OrderingRules", "SA1210:UsingDirectivesMustBeOrderedAlphabeticallyByNamespace",
    Justification = "[GeneratedCode] Directives are correctly ordered in the T4 source file.")]
[module: SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass",
    Justification = "[GeneratedCode] A T4 template may contain multiple classes.")]
[module: SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1403:FileMayOnlyContainASingleNamespace",
    Justification = "[GeneratedCode] A T4 template may contain multiple namespaces.")]
[module: SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1505:OpeningCurlyBracketsMustNotBeFollowedByBlankLine",
    Justification = "[GeneratedCode] Newline rules are disabled for T4 templates.")]
[module: SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1507:CodeMustNotContainMultipleBlankLinesInARow",
    Justification = "[GeneratedCode] Newline rules are disabled for T4 templates.")]

namespace Narvalo.Fx
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.Contracts;
    using System.Linq;

    using global::Narvalo;

    /// <content>
    /// Provides a set of static methods for <see cref="Option{T}" />.
    /// </content>
    /// <remarks>
    /// Sometimes we prefer to use extension methods over static methods to be able to locally override them.
    /// </remarks>
    public static partial class Option
    {
        private static readonly Option<global::Narvalo.Fx.Unit> s_Unit = Of(global::Narvalo.Fx.Unit.Single);
        private static readonly Option<global::Narvalo.Fx.Unit> s_None = Option<global::Narvalo.Fx.Unit>.None;

        /// <summary>
        /// Gets the unique object of type <c>Option&lt;Unit&gt;</c>.
        /// </summary>
        /// <value>The unique object of type <c>Option&lt;Unit&gt;</c>.</value>
        public static Option<global::Narvalo.Fx.Unit> Unit { get { return s_Unit; } }

        /// <summary>
        /// Gets the zero for <see cref="Option{T}"/>.
        /// </summary>
        /// <remarks>
        /// Named <c>mzero</c> in Haskell parlance.
        /// </remarks>
        /// <value>The zero for <see cref="Option{T}"/>.</value>
        public static Option<global::Narvalo.Fx.Unit> None { get { return s_None; } }

        /// <summary>
        /// Obtains an instance of the <see cref="Option{T}"/> class for the specified value.
        /// </summary>
        /// <remarks>
        /// Named <c>return</c> in Haskell parlance.
        /// </remarks>
        /// <typeparam name="T">The underlying type of <paramref name="value"/>.</typeparam>
        /// <param name="value">A value to be wrapped into a <see cref="Option{T}"/> object.</param>
        /// <returns>An instance of the <see cref="Option{T}"/> class for the specified value.</returns>
        public static Option<T> Of<T>(T value)
        {

            return Option<T>.η(value);
        }
        
        #region Generalisations of list functions (Prelude)

        /// <summary>
        /// Removes one level of structure, projecting its bound value into the outer level.
        /// </summary>
        /// <remarks>
        /// Named <c>join</c> in Haskell parlance.
        /// </remarks>
        public static Option<T> Flatten<T>(Option<Option<T>> square)
        {

            return Option<T>.μ(square);
        }

        #endregion

        #region Monadic lifting operators (Prelude)

        /// <summary>
        /// Promotes a function to use and return <see cref="Option{T}" /> values.
        /// </summary>
        /// <remarks>
        /// Named <c>liftM</c> in Haskell parlance.
        /// </remarks>
        public static Func<Option<T>, Option<TResult>> Lift<T, TResult>(
            Func<T, TResult> fun)
        {
            Contract.Ensures(Contract.Result<Func<Option<T>, Option<TResult>>>() != null);

            return m =>
            {
                return m.Select(fun);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="Option{T}" /> values, scanning the 
        /// monadic arguments from left to right.
        /// </summary>
        /// <remarks>
        /// Named <c>liftM2</c> in Haskell parlance.
        /// </remarks>
        public static Func<Option<T1>, Option<T2>, Option<TResult>>
            Lift<T1, T2, TResult>(Func<T1, T2, TResult> fun)
        {
            Contract.Ensures(Contract.Result<Func<Option<T1>, Option<T2>, Option<TResult>>>() != null);

            return (m1, m2) =>
            {
                return m1.Zip(m2, fun);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="Option{T}" /> values, scanning the 
        /// monadic arguments from left to right.
        /// </summary>
        /// <remarks>
        /// Named <c>liftM3</c> in Haskell parlance.
        /// </remarks>
        public static Func<Option<T1>, Option<T2>, Option<T3>, Option<TResult>>
            Lift<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> fun)
        {
            Contract.Ensures(Contract.Result<Func<Option<T1>, Option<T2>, Option<T3>, Option<TResult>>>() != null);

            return (m1, m2, m3) =>
            {
                return m1.Zip(m2, m3, fun);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="Option{T}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        /// <remarks>
        /// Named <c>liftM4</c> in Haskell parlance.
        /// </remarks>
        public static Func<Option<T1>, Option<T2>, Option<T3>, Option<T4>, Option<TResult>>
            Lift<T1, T2, T3, T4, TResult>(
            Func<T1, T2, T3, T4, TResult> fun)
        {
            Contract.Ensures(Contract.Result<Func<Option<T1>, Option<T2>, Option<T3>, Option<T4>, Option<TResult>>>() != null);
            
            return (m1, m2, m3, m4) =>
            {
                return m1.Zip(m2, m3, m4, fun);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="Option{T}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        /// <remarks>
        /// Named <c>liftM5</c> in Haskell parlance.
        /// </remarks>
        public static Func<Option<T1>, Option<T2>, Option<T3>, Option<T4>, Option<T5>, Option<TResult>>
            Lift<T1, T2, T3, T4, T5, TResult>(
            Func<T1, T2, T3, T4, T5, TResult> fun)
        {
            Contract.Ensures(Contract.Result<Func<Option<T1>, Option<T2>, Option<T3>, Option<T4>, Option<T5>, Option<TResult>>>() != null);
       
            return (m1, m2, m3, m4, m5) =>
            {
                return m1.Zip(m2, m3, m4, m5, fun);
            };
        }

        #endregion
    } // End of the class Option.

    /// <content>
    /// Provides the core monadic extension methods for <see cref="Option{T}" />.
    /// </content>
    public static partial class Option
    {
        #region Basic Monad functions (Prelude)

        /// <remarks>
        /// Named <c>fmap</c> in Haskell parlance.
        /// </remarks>
        public static Option<TResult> Select<TSource, TResult>(
            this Option<TSource> @this,
            Func<TSource, TResult> selector)
        {
            Require.NotNull(selector, "selector");

            return @this.Bind(_ => Option.Of(selector.Invoke(_)));
        }

        /// <remarks>
        /// Named <c>&gt;&gt;</c> in Haskell parlance.
        /// </remarks>
        public static Option<TResult> Then<TSource, TResult>(
            this Option<TSource> @this,
            Option<TResult> other)
        {

            return @this.Bind(_ => other);
        }
        
        #endregion

        #region Generalisations of list functions (Prelude)

        /// <remarks>
        /// Named <c>mfilter</c> in Haskell parlance.
        /// </remarks>
        public static Option<TSource> Where<TSource>(
            this Option<TSource> @this,
            Func<TSource, bool> predicate)
        {
            Require.NotNull(predicate, "predicate");

            return @this.Bind(
                _ => predicate.Invoke(_) ? @this : Option<TSource>.None);
        }

        /// <remarks>
        /// Named <c>replicateM</c> in Haskell parlance.
        /// </remarks>
        public static Option<IEnumerable<TSource>> Repeat<TSource>(
            this Option<TSource> @this,
            int count)
        {
            Require.GreaterThanOrEqualTo(count, 1, "count");

            return @this.Select(_ => Enumerable.Repeat(_, count));
        }
        
        #endregion

        #region Conditional execution of monadic expressions (Prelude)

        /// <remarks>
        /// Named <c>guard</c> in Haskell parlance.
        /// </remarks>
        public static Option<global::Narvalo.Fx.Unit> Guard(bool predicate)
        {

            return predicate ? Option.Unit : Option.None;
        }

        /// <remarks>
        /// <para>Named <c>when</c> in Haskell parlance.</para>
        /// <para>Haskell use a different signature. The method should return a <see cref="Narvalo.Fx.Unit"/>.</para>
        /// </remarks>
        public static Option<TSource> When<TSource>(
            this Option<TSource> @this,
            bool predicate,
            Action action)
        {
            Acknowledge.Object(@this);
            Require.NotNull(action, "action");

            if (predicate)
            {
                action.Invoke();
            }

            return @this;
        }

        /// <remarks>
        /// <para>Named <c>unless</c> in Haskell parlance.</para>
        /// <para>Haskell use a different signature. The method should return a <see cref="Narvalo.Fx.Unit"/>.</para>
        /// </remarks>
        public static Option<TSource> Unless<TSource>(
            this Option<TSource> @this,
            bool predicate,
            Action action)
        {
            Acknowledge.Object(@this);
            Require.NotNull(action, "action");

            if (!predicate)
            {
                action.Invoke();
            }

            return @this;
        }

        #endregion

        #region Monadic lifting operators (Prelude)

        /// <see cref="Lift{T1, T2, T3}" />
        public static Option<TResult> Zip<TFirst, TSecond, TResult>(
            this Option<TFirst> @this,
            Option<TSecond> second,
            Func<TFirst, TSecond, TResult> resultSelector)
        {
            Require.NotNull(resultSelector, "resultSelector");

            return @this.Bind(v1 => second.Select(v2 => resultSelector.Invoke(v1, v2)));
        }

        /// <see cref="Lift{T1, T2, T3, T4}" />
        public static Option<TResult> Zip<T1, T2, T3, TResult>(
            this Option<T1> @this,
            Option<T2> second,
            Option<T3> third,
            Func<T1, T2, T3, TResult> resultSelector)
        {
            Require.NotNull(resultSelector, "resultSelector");

            Func<T1, Option<TResult>> g
                = t1 => second.Zip(third, (t2, t3) => resultSelector.Invoke(t1, t2, t3));

            return @this.Bind(g);
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5}" />
        public static Option<TResult> Zip<T1, T2, T3, T4, TResult>(
             this Option<T1> @this,
             Option<T2> second,
             Option<T3> third,
             Option<T4> fourth,
             Func<T1, T2, T3, T4, TResult> resultSelector)
        {
            Require.NotNull(resultSelector, "resultSelector");

            Func<T1, Option<TResult>> g
                = t1 => second.Zip(
                    third,
                    fourth,
                    (t2, t3, t4) => resultSelector.Invoke(t1, t2, t3, t4));

            return @this.Bind(g);
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5, T6}" />
        public static Option<TResult> Zip<T1, T2, T3, T4, T5, TResult>(
            this Option<T1> @this,
            Option<T2> second,
            Option<T3> third,
            Option<T4> fourth,
            Option<T5> fifth,
            Func<T1, T2, T3, T4, T5, TResult> resultSelector)
        {
            Require.NotNull(resultSelector, "resultSelector");

            Func<T1, Option<TResult>> g
                = t1 => second.Zip(
                    third,
                    fourth,
                    fifth,
                    (t2, t3, t4, t5) => resultSelector.Invoke(t1, t2, t3, t4, t5));

            return @this.Bind(g);
        }

        #endregion

        #region Query Expression Pattern


        /// <remarks>
        /// Kind of generalisation of Zip (liftM2).
        /// </remarks>
        public static Option<TResult> SelectMany<TSource, TMiddle, TResult>(
            this Option<TSource> @this,
            Func<TSource, Option<TMiddle>> valueSelectorM,
            Func<TSource, TMiddle, TResult> resultSelector)
        {
            Require.NotNull(valueSelectorM, "valueSelectorM");
            Require.NotNull(resultSelector, "resultSelector");

            return @this.Bind(
                _ => valueSelectorM.Invoke(_).Select(
                    middle => resultSelector.Invoke(_, middle)));
        }

        public static Option<TResult> Join<TSource, TInner, TKey, TResult>(
            this Option<TSource> @this,
            Option<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector)
        {
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(resultSelector != null);

            return @this.Join(
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                EqualityComparer<TKey>.Default);
        }
        
        public static Option<TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this Option<TSource> @this,
            Option<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, Option<TInner>, TResult> resultSelector)
        {
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(resultSelector != null);

            return @this.GroupJoin(
                inner,
                outerKeySelector,
                innerKeySelector, 
                resultSelector, 
                EqualityComparer<TKey>.Default);
        }

        #endregion
        
        #region LINQ extensions

        public static Option<TResult> Join<TSource, TInner, TKey, TResult>(
            this Option<TSource> @this,
            Option<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
        {
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(resultSelector != null);

            return JoinCore(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                comparer ?? EqualityComparer<TKey>.Default);
        }
        
        public static Option<TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this Option<TSource> @this,
            Option<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, Option<TInner>, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
        {
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(resultSelector != null);

            return GroupJoinCore(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                comparer ?? EqualityComparer<TKey>.Default);
        }
        
        
        private static Option<TResult> JoinCore<TSource, TInner, TKey, TResult>(
            Option<TSource> seq,
            Option<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
        {
            Require.NotNull(resultSelector, "resultSelector");
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(comparer != null);
            
            var keyLookupM = GetKeyLookup(inner, outerKeySelector, innerKeySelector, comparer);

            return from outerValue in seq
                   from innerValue in keyLookupM.Invoke(outerValue).Then(inner)
                   select resultSelector.Invoke(outerValue, innerValue);
        }
        
        private static Option<TResult> GroupJoinCore<TSource, TInner, TKey, TResult>(
            Option<TSource> seq,
            Option<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, Option<TInner>, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
        {
            Require.NotNull(resultSelector, "resultSelector");
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(comparer != null);

            var keyLookupM = GetKeyLookup(inner, outerKeySelector, innerKeySelector, comparer);

            return from outerValue in seq
                   select resultSelector.Invoke(outerValue, keyLookupM.Invoke(outerValue).Then(inner));
        }

        private static Func<TSource, Option<TKey>> GetKeyLookup<TSource, TInner, TKey>(
            Option<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            IEqualityComparer<TKey> comparer)
        {
            Require.NotNull(outerKeySelector, "outerKeySelector");
            Require.NotNull(comparer, "comparer");
            Contract.Requires(innerKeySelector != null);
            Contract.Ensures(Contract.Result<Func<TSource, Option<TKey>>>() != null);

            return source =>
            {
                TKey outerKey = outerKeySelector.Invoke(source);
            
                return inner.Select(innerKeySelector).Where(_ => comparer.Equals(_, outerKey));
            };
        }

        #endregion

        #region Non-standard extensions
        
        public static Option<TResult> Coalesce<TSource, TResult>(
            this Option<TSource> @this,
            Func<TSource, bool> predicate,
            Option<TResult> then,
            Option<TResult> otherwise)
        {
            Require.NotNull(predicate, "predicate");

            return @this.Bind(_ => predicate.Invoke(_) ? then : otherwise);
        }

        public static Option<TResult> Then<TSource, TResult>(
            this Option<TSource> @this,
            Func<TSource, bool> predicate,
            Option<TResult> other)
        {
            Contract.Requires(predicate != null);

            return @this.Coalesce(predicate, other, Option<TResult>.None);
        }

        public static Option<TResult> Otherwise<TSource, TResult>(
            this Option<TSource> @this,
            Func<TSource, bool> predicate,
            Option<TResult> other)
        {
            Contract.Requires(predicate != null);

            return @this.Coalesce(predicate, Option<TResult>.None, other);
        }

        public static void Invoke<TSource>(
            this Option<TSource> @this,
            Action<TSource> action)
        {
            Require.NotNull(action, "action");

            @this.Bind(_ => { action.Invoke(_); return @this; });
        }


        public static void OnNone<TSource>(
            this Option<TSource> @this,
            Action action)
        {
            Require.NotNull(action, "action");

            @this.Then(Option.Unit).Invoke(_ => action.Invoke());
        }

        public static void Invoke<TSource>(
            this Option<TSource> @this,
            Action<TSource> action,
            Action caseNone)
        {
            Require.NotNull(action, "action");

            @this.Bind(_ => { action.Invoke(_); return @this; })
                .Then(Option.Unit)
                .Bind(_ => { caseNone.Invoke(); return Unit; });
        }

        #endregion
    } // End of the class Option.

    /// <content>
    /// Provides extension methods for <see cref="Func{T}"/> that depend on the <see cref="Option{T}"/> class.
    /// </content>
    public static partial class FuncExtensions
    {
        #region Basic Monad functions (Prelude)

        /// <remarks>
        /// Named <c>=&lt;&lt;</c> in Haskell parlance.
        /// </remarks>
        public static Option<TResult> Invoke<TSource, TResult>(
            this Func<TSource, Option<TResult>> @this,
            Option<TSource> value)
        {
            Acknowledge.Object(@this);

            return value.Bind(@this);
        }

        /// <remarks>
        /// Named <c>&gt;=&gt;</c> in Haskell parlance.
        /// </remarks>
        public static Func<TSource, Option<TResult>> Compose<TSource, TMiddle, TResult>(
            this Func<TSource, Option<TMiddle>> @this,
            Func<TMiddle, Option<TResult>> funM)
        {
            Require.Object(@this);
            Contract.Requires(funM != null);
            Contract.Ensures(Contract.Result<Func<TSource, Option<TResult>>>() != null);

            return _ => @this.Invoke(_).Bind(funM);
        }

        /// <remarks>
        /// Named <c>&lt;=&lt;</c> in Haskell parlance.
        /// </remarks>
        public static Func<TSource, Option<TResult>> ComposeBack<TSource, TMiddle, TResult>(
            this Func<TMiddle, Option<TResult>> @this,
            Func<TSource, Option<TMiddle>> funM)
        {
            Acknowledge.Object(@this);
            Require.NotNull(funM, "funM");
            Contract.Ensures(Contract.Result<Func<TSource, Option<TResult>>>() != null);

            return _ => funM.Invoke(_).Bind(@this);
        }

        #endregion
    } // End of the class FuncExtensions.
}

namespace Narvalo.Fx
{
    using System.Collections.Generic;
    using System.Diagnostics.Contracts;

    using Narvalo.Fx.Internal;

    /// <content>
    /// Provides extension methods for <see cref="IEnumerable{T}"/> that depend on the <see cref="Option{T}"/> class.
    /// </content>
    public static partial class EnumerableExtensions
    {
        #region Basic Monad functions (Prelude)

        /// <remarks>
        /// Named <c>sequence</c> in Haskell parlance.
        /// </remarks>
        public static Option<IEnumerable<TSource>> Collect<TSource>(
            this IEnumerable<Option<TSource>> @this)
        {
            Acknowledge.Object(@this);

            return @this.CollectCore();
        }

        #endregion

        #region Generalisations of list functions (Prelude)

        /// <remarks>
        /// Named <c>msum</c> in Haskell parlance.
        /// </remarks>
        public static Option<TSource> Sum<TSource>(
            this IEnumerable<Option<TSource>> @this)
        {
            Acknowledge.Object(@this);

            return @this.SumCore();
        }

        #endregion
    } // End of the class EnumerableExtensions.
}

namespace Narvalo.Fx.Advanced
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.Contracts;

    using Narvalo.Fx;
    using Narvalo.Fx.Internal;

    /// <content>
    /// Provides extension methods for <see cref="IEnumerable{T}"/>.
    /// </content>
    public static partial class EnumerableExtensions
    {
        #region Basic Monad functions (Prelude)

        /// <remarks>
        /// Named <c>mapM</c> in Haskell parlance.
        /// </remarks>
        public static Option<IEnumerable<TResult>> Map<TSource, TResult>(
            this IEnumerable<TSource> @this,
            Func<TSource, Option<TResult>> funM)
        {
            Acknowledge.Object(@this);
            Contract.Requires(funM != null);

            return @this.MapCore(funM);
        }

        #endregion

        #region Generalisations of list functions (Prelude)

        /// <remarks>
        /// <para>Named <c>filterM</c> in Haskell parlance.</para>
        /// <para>Haskell use a different signature.</para>
        /// </remarks>
        public static IEnumerable<TSource> Filter<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, Option<bool>> predicateM)
        {
            Acknowledge.Object(@this);
            Contract.Requires(predicateM != null);
            Contract.Ensures(Contract.Result<IEnumerable<TSource>>() != null);

            return @this.FilterCore(predicateM);
        }

        /// <remarks>
        /// Named <c>mapAndUnzipM</c> in Haskell parlance.
        /// </remarks>
        public static Option<Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>>
            MapAndUnzip<TSource, TFirst, TSecond>(
            this IEnumerable<TSource> @this,
            Func<TSource, Option<Tuple<TFirst, TSecond>>> funM)
        {
            Acknowledge.Object(@this);
            Contract.Requires(funM != null);

            return @this.MapAndUnzipCore(funM);
        }

        /// <remarks>
        /// Named <c>zipWithM</c> in Haskell parlance.
        /// </remarks>
        public static Option<IEnumerable<TResult>> Zip<TFirst, TSecond, TResult>(
            this IEnumerable<TFirst> @this,
            IEnumerable<TSecond> second,
            Func<TFirst, TSecond, Option<TResult>> resultSelectorM)
        {
            Acknowledge.Object(@this);
            Contract.Requires(second != null);
            Contract.Requires(resultSelectorM != null);

            return @this.ZipCore(second, resultSelectorM);
        }

        /// <remarks>
        /// Named <c>foldM</c> in Haskell parlance.
        /// </remarks>
        public static Option<TAccumulate> Fold<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, Option<TAccumulate>> accumulatorM)
        {
            Acknowledge.Object(@this);
            Contract.Requires(accumulatorM != null);

            return @this.FoldCore(seed, accumulatorM);
        }

        #endregion

        #region Aggregate Operators
        
        public static Option<TAccumulate> FoldBack<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, Option<TAccumulate>> accumulatorM)
        {
            Acknowledge.Object(@this);
            Contract.Requires(accumulatorM != null);

            return @this.FoldBackCore(seed, accumulatorM);
        }
        
        public static Option<TSource> Reduce<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, Option<TSource>> accumulatorM)
        {
            Acknowledge.Object(@this);
            Contract.Requires(accumulatorM != null);

            return @this.ReduceCore(accumulatorM);
        }
        
        public static Option<TSource> ReduceBack<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, Option<TSource>> accumulatorM)
        {
            Acknowledge.Object(@this);
            Contract.Requires(accumulatorM != null);

            return @this.ReduceBackCore(accumulatorM);
        }

        #endregion

        #region Catamorphisms

        /// <remarks>
        /// <para>Haskell use a different signature.</para>
        /// </remarks>
        public static Option<TAccumulate> Fold<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, Option<TAccumulate>> accumulatorM,
            Func<Option<TAccumulate>, bool> predicate)
        {
            Acknowledge.Object(@this);
            Contract.Requires(accumulatorM != null);
            Contract.Requires(predicate != null);

            return @this.FoldCore(seed, accumulatorM, predicate);
        }

        /// <remarks>
        /// <para>Haskell use a different signature.</para>
        /// </remarks>
        public static Option<TSource> Reduce<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, Option<TSource>> accumulatorM,
            Func<Option<TSource>, bool> predicate)
        {
            Acknowledge.Object(@this);
            Contract.Requires(accumulatorM != null);
            Contract.Requires(predicate != null);

            return @this.ReduceCore(accumulatorM, predicate);
        }

        #endregion
    } // End of the class EnumerableExtensions.
}

namespace Narvalo.Fx.Internal
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.Contracts;
    using System.Linq;

    using global::Narvalo;
    using Narvalo.Fx; // Necessary for EmptyIfNull().
   
   
    using Narvalo.Fx.Advanced;
   

    /// <content>
    /// Provides the core extension methods for <see cref="IEnumerable{T}"/> that depend on the <see cref="Option{T}"/> class.
    /// </content>
    internal static partial class EnumerableExtensions
    {
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static Option<IEnumerable<TSource>> CollectCore<TSource>(
            this IEnumerable<Option<TSource>> @this)
        {
            Acknowledge.Object(@this);

            var seed = Option.Of(Enumerable.Empty<TSource>());
            Func<Option<IEnumerable<TSource>>, Option<TSource>, Option<IEnumerable<TSource>>> fun
                = (m, n) => m.Bind(list => CollectCore(n, list));

            var retval = @this.Aggregate(seed, fun);

            return retval;
        }
        
        // NB: We do not inline this method to avoid the creation of an unused private field (CA1823 warning).
        private static Option<IEnumerable<TSource>> CollectCore<TSource>(
            Option<TSource> m,
            IEnumerable<TSource> list)
        {

            return m.Bind(item => Option.Of(list.Concat(Enumerable.Repeat(item, 1))));
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static Option<TSource> SumCore<TSource>(
            this IEnumerable<Option<TSource>> @this)
        {
            Acknowledge.Object(@this);

            var retval = @this.Aggregate(Option<TSource>.None, (m, n) => m.OrElse(n));

            return retval;
        }
    } // End of the class EnumerableExtensions.

    /// <content>
    /// Provides the core extension methods for <see cref="IEnumerable{T}"/>.
    /// </content>
    internal static partial class EnumerableExtensions
    {
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static Option<IEnumerable<TResult>> MapCore<TSource, TResult>(
            this IEnumerable<TSource> @this,
            Func<TSource, Option<TResult>> funM)
        {
            Acknowledge.Object(@this);
            Contract.Requires(funM != null);

            return @this.Select(funM).EmptyIfNull().Collect();
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static IEnumerable<TSource> FilterCore<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, Option<bool>> predicateM)
        {
            Require.Object(@this);
            Require.NotNull(predicateM, "predicateM");
            Contract.Ensures(Contract.Result<IEnumerable<TSource>>() != null);

            // NB: Haskell uses tail recursion, we don't.
            var list = new List<TSource>();

            foreach (var item in @this)
            {
                var m = predicateM.Invoke(item);

                m.Invoke(
                    _ =>
                    {
                        if (_ == true)
                        {
                            list.Add(item);
                        }
                    });
            }

            return list;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static Option<Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>>
            MapAndUnzipCore<TSource, TFirst, TSecond>(
            this IEnumerable<TSource> @this,
            Func<TSource, Option<Tuple<TFirst, TSecond>>> funM)
        {
            Acknowledge.Object(@this);
            Contract.Requires(funM != null);

            var m = @this.Select(funM).EmptyIfNull().Collect();

            return m.Select(
                tuples =>
                {
                    IEnumerable<TFirst> list1 = tuples.Select(_ => _.Item1);
                    IEnumerable<TSecond> list2 = tuples.Select(_ => _.Item2);

                    return new Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>(list1, list2);
                });
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static Option<IEnumerable<TResult>> ZipCore<TFirst, TSecond, TResult>(
            this IEnumerable<TFirst> @this,
            IEnumerable<TSecond> second,
            Func<TFirst, TSecond, Option<TResult>> resultSelectorM)
        {
            Require.NotNull(resultSelectorM, "resultSelectorM");

            Acknowledge.Object(@this);
            Contract.Requires(second != null);

            Func<TFirst, TSecond, Option<TResult>> resultSelector
                = (v1, v2) => resultSelectorM.Invoke(v1, v2);

            // WARNING: Do not remove "resultSelector", otherwise .NET will make a recursive call
            // instead of using the Zip from LINQ.
            return @this.Zip(second, resultSelector: resultSelector).EmptyIfNull().Collect();
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static Option<TAccumulate> FoldCore<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, Option<TAccumulate>> accumulatorM)
        {
            Require.Object(@this);
            Require.NotNull(accumulatorM, "accumulatorM");

            Option<TAccumulate> retval = Option.Of(seed);

            foreach (TSource item in @this)
            {
                retval = retval.Bind(_ => accumulatorM.Invoke(_, item));
            }

            return retval;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static Option<TAccumulate> FoldBackCore<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, Option<TAccumulate>> accumulatorM)
        {
            Acknowledge.Object(@this);
            Contract.Requires(accumulatorM != null);

            return @this.Reverse().EmptyIfNull().Fold(seed, accumulatorM);
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static Option<TSource> ReduceCore<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, Option<TSource>> accumulatorM)
        {
            Require.Object(@this);
            Require.NotNull(accumulatorM, "accumulatorM");

            using (var iter = @this.GetEnumerator())
            {
                if (!iter.MoveNext())
                {
                    throw new InvalidOperationException("Source sequence was empty.");
                }

                Option<TSource> retval = Option.Of(iter.Current);

                while (iter.MoveNext())
                {
                    retval = retval.Bind(_ => accumulatorM.Invoke(_, iter.Current));
                }

                return retval;
            }
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static Option<TSource> ReduceBackCore<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, Option<TSource>> accumulatorM)
        {
            Acknowledge.Object(@this);
            Contract.Requires(accumulatorM != null);

            return @this.Reverse().EmptyIfNull().Reduce(accumulatorM);
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static Option<TAccumulate> FoldCore<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, Option<TAccumulate>> accumulatorM,
            Func<Option<TAccumulate>, bool> predicate)
        {
            Require.Object(@this);
            Require.NotNull(accumulatorM, "accumulatorM");
            Require.NotNull(predicate, "predicate");

            Option<TAccumulate> retval = Option.Of(seed);

            using (var iter = @this.GetEnumerator())
            {
                while (predicate.Invoke(retval) && iter.MoveNext())
                {
                    retval = retval.Bind(_ => accumulatorM.Invoke(_, iter.Current));
                }
            }

            return retval;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static Option<TSource> ReduceCore<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, Option<TSource>> accumulatorM,
            Func<Option<TSource>, bool> predicate)
        {
            Require.Object(@this);
            Require.NotNull(accumulatorM, "accumulatorM");
            Require.NotNull(predicate, "predicate");

            using (var iter = @this.GetEnumerator())
            {
                if (!iter.MoveNext())
                {
                    throw new InvalidOperationException("Source sequence was empty.");
                }

                Option<TSource> retval = Option.Of(iter.Current);

                while (predicate.Invoke(retval) && iter.MoveNext())
                {
                    retval = retval.Bind(_ => accumulatorM.Invoke(_, iter.Current));
                }

                return retval;
            }
        }
    } // End of the class EnumerableExtensions.
}
