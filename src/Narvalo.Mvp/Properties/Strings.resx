<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CompositePresenterDiscoveryStrategy_StrategiesArrayIsEmpty" xml:space="preserve">
    <value>You must supply at least one strategy.</value>
  </data>
  <data name="CompositeViewTypeBuilder_EventHandlerTypeMismatch" xml:space="preserve">
    <value>The supplied event {0} from {1} does not have the event handler type specified.</value>
  </data>
  <data name="CompositeViewTypeResolver_ViewTypeContainsPublicMethods" xml:space="preserve">
    <value>To be used with shared presenters, the view type must not define public methods. The supplied type ({0}) is not.</value>
  </data>
  <data name="CompositeViewTypeResolver_ViewTypeIsNotAssignable" xml:space="preserve">
    <value>To be used with shared presenters, the view type must inherit from {0}. The supplied type ({1}) does not.</value>
  </data>
  <data name="CompositeViewTypeResolver_ViewTypeIsNotInterface" xml:space="preserve">
    <value>To be used with shared presenters, the view type must be an interface, but {0} was supplied instead.</value>
  </data>
  <data name="CompositeViewTypeResolver_ViewTypeIsNotPublic" xml:space="preserve">
    <value>To be used with shared presenters, the view type must be public. The supplied type ({0}) is not.</value>
  </data>
  <data name="CompositeView_TypeMismatch" xml:space="preserve">
    <value>Expected a view of type {0} but {1} was supplied.</value>
  </data>
  <data name="DefaultPlatformServices_BadPropertyInitialization" xml:space="preserve">
    <value>One of the properties has been initialized with a null value.</value>
  </data>
  <data name="LazyValueHolder_BadInitialization" xml:space="preserve">
    <value>The value factory must not return a null value.</value>
  </data>
  <data name="LazyValueHolder_CannotReset" xml:space="preserve">
    <value>Once the value has been accessed, you can no longer change the underlying value factory.</value>
  </data>
  <data name="MessageCoordinator_Closed" xml:space="preserve">
    <value>Messages can't be published or subscribed to after the message bus has been closed.</value>
  </data>
  <data name="MvpCommand_ModelIsNull" xml:space="preserve">
    <value>The Model property is currently null, however it should have been initialized by the presenter.</value>
  </data>
  <data name="PresenterBinder_NoPresenterFoundForView" xml:space="preserve">
    <value>Failed to find presenter for view of type {0}.</value>
  </data>
  <data name="PresenterBindingAttributesResolver_MissingViewType" xml:space="preserve">
    <value>When shared presenter binding is requested, the view type must be explicitly specified. One of the bindings on '{0}' violates this restriction.</value>
  </data>
  <data name="PresenterConstructorResolver_MissingPublicCtor" xml:space="preserve">
    <value>{0} is missing an expected constructor, or the constructor is not accessible. We tried to execute code equivalent to: new {0}({1} view). Add a public constructor with a compatible signature, or use a IPresenterFactory that can supply constructor dependencies.</value>
  </data>
  <data name="PresenterConstructorResolver_PresenterIsNotPublic" xml:space="preserve">
    <value>{0} does not meet accessibility requirements. For the framework to be able to call it, it must be public. Make the type public, or use a IPresenterFactory that can access this type.</value>
  </data>
  <data name="PresenterFactory_PresenterCtorFailed" xml:space="preserve">
    <value>An exception was thrown whilst trying to create an instance of {0}. Check the inner exception for more information.</value>
  </data>
  <data name="ResolverCache_ValueFactoryReturnsNull" xml:space="preserve">
    <value>The value factory must not return a null value.</value>
  </data>
</root>