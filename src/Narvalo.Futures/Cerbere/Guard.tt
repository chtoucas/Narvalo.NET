<#@ template language="C#" debug="false" hostspecific="true" inherits="VSTemplate" #>
<#@ output extension=".g.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(T4NarvaloLibrary)" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Narvalo.T4" #>
<#

// REVIEW: Add unsafe types.
// REVIEW: For doubles, should we check for NaN?
var numTypes = new string[] {
    "byte",
    "char",
    "decimal",
    "double",
    "int",
    "float",
    "long",
    //"sbyte",
    "short",
    //"uint",
    //"ulong",
    //"ushort",
};

WriteHeader();

#>
namespace <#= Namespace #>
{
    using System.Diagnostics.Contracts;

    using Narvalo.Internal;
<# for (int i = 0; i < numTypes.Length; i++) { #>

    public static partial class Guard
    {
        /// <summary>
        /// Validates that the specified argument is in a given range, range borders included.
        /// </summary>
        /// <param name="value">The argument to check.</param>
        /// <param name="minInclusive">The minimum value (inclusive).</param>
        /// <param name="maxInclusive">The maximum value (inclusive).</param>
        /// <param name="parameterName">The name of the parameter.</param>
        /// <exception cref="System.ArgumentException">Thrown if <paramref name="minInclusive"/> is greater than
        /// or equal to <paramref name="maxInclusive"/>.</exception>
        /// <exception cref="System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is outside
        /// the allowable range of values.</exception>
        [ContractArgumentValidator]
        public static void Range(<#=numTypes[i]#> value, <#=numTypes[i]#> minInclusive, <#=numTypes[i]#> maxInclusive, string parameterName)
        {
            if (value < minInclusive || value > maxInclusive)
            {
                throw Failure.OutOfRange(value, minInclusive, maxInclusive, parameterName);
            }

            Contract.EndContractBlock();
        }

        /// <summary>
        /// Validates that the specified argument is greater than a minimum value.
        /// </summary>
        /// <param name="value">The argument to check.</param>
        /// <param name="minValue">The minimum value.</param>
        /// <param name="parameterName">The name of the parameter.</param>
        /// <exception cref="System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is less than
        /// or equal to the minimum value.</exception>
        [ContractArgumentValidator]
        public static void GreaterThan(<#=numTypes[i]#> value, <#=numTypes[i]#> minValue, string parameterName)
        {
            if (value <= minValue)
            {
                throw Failure.NotGreaterThan(value, minValue, parameterName);
            }

            Contract.EndContractBlock();
        }

        /// <summary>
        /// Validates that the specified argument is greater than or equal to a minimum value.
        /// </summary>
        /// <param name="value">The argument to check.</param>
        /// <param name="minValue">The minimum value (inclusive).</param>
        /// <param name="parameterName">The name of the parameter.</param>
        /// <exception cref="System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is less than
        /// the minimum value.</exception>
        [ContractArgumentValidator]
        public static void GreaterThanOrEqualTo(<#=numTypes[i]#> value, <#=numTypes[i]#> minValue, string parameterName)
        {
            if (value < minValue)
            {
                throw Failure.NotGreaterThanOrEqualTo(value, minValue, parameterName);
            }

            Contract.EndContractBlock();
        }

        /// <summary>
        /// Validates that the specified argument is less than a maximum value.
        /// </summary>
        /// <param name="value">The argument to check.</param>
        /// <param name="maxValue">The maximum value.</param>
        /// <param name="parameterName">The name of the parameter.</param>
        /// <exception cref="System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is greater than
        /// or equal the maximum value.</exception>
        [ContractArgumentValidator]
        public static void LessThan(<#=numTypes[i]#> value, <#=numTypes[i]#> maxValue, string parameterName)
        {
            if (value >= maxValue)
            {
                throw Failure.NotLessThan(value, maxValue, parameterName);
            }

            Contract.EndContractBlock();
        }

        /// <summary>
        /// Validates that the specified argument is less or equal to a maximum value.
        /// </summary>
        /// <param name="value">The argument to check.</param>
        /// <param name="maxValue">The maximum value (inclusive).</param>
        /// <param name="parameterName">The name of the parameter.</param>
        /// <exception cref="System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is greater than
        /// the maximum value.</exception>
        [ContractArgumentValidator]
        public static void LessThanOrEqualTo(<#=numTypes[i]#> value, <#=numTypes[i]#> maxValue, string parameterName)
        {
            if (value > maxValue)
            {
                throw Failure.NotLessThanOrEqualTo(value, maxValue, parameterName);
            }

            Contract.EndContractBlock();
        }
    }
<# } #>
}