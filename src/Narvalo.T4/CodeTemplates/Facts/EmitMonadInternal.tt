<#+

public partial class MonadTemplate
{
    public void EmitMonadInternal()
    {
#>
#if !NO_INTERNALS_VISIBLE_TO

    // Provides tests for <#= Name #><T<#= RTDecl #>> that need access to internals.
    // T4: EmitMonadInternal().
    public static partial class <#= Name #>Facts
    {
        #region Bind()

        [fact("Bind() applies the binder to the underlying value.")]
        public static void Bind_calls_binder()
        {
            var source = <#+ WriteFactory("int"); #>(1);
            Func<int, <#= Name #><int<#= RTDecl #>>> binder = val => <#+ WriteFactory("int"); #>(2 * val);

            var me = source.Bind(binder);

            Assert.Equal(2, me.<#= ValueProperty #>);
        }

        #endregion

        #region Select()

        [fact("Select() applies the selector to the underlying value.")]
        public static void Select_calls_selector()
        {
            var source = <#+ WriteFactory("int"); #>(1);
            Func<int, int> selector = val => 2 * val;

            var me = source.Select(selector);

            Assert.Equal(2, me.<#= ValueProperty #>);
        }

        #endregion
    }

#endif
<#+
    } // T4: End of EmitMonadInternal().
} // T4: End of MonadTemplate.

#>