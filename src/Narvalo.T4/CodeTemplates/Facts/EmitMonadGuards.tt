<#+

public partial class MonadTemplate
{
    public void EmitMonadGuards()
    {
#>
<#+ if (!HasRightGenerics) { #>
#if !NO_INTERNALS_VISIBLE_TO

<#+ } #>
    // T4: EmitMonadGuards().
    public static partial class <#= Name #>Facts {
        [t("Compose() guards.")]
        public static void Compose0() {
            Func<int, <#= Name #><int<#= RTDecl #>>> first = null;
            Func<int, <#= Name #><int<#= RTDecl #>>> second = i => <#+ WriteFactory("int"); #>(1);

            Assert.Throws<ArgumentNullException>("this", () => first.Compose(second));
        }

        [t("Compose() guards.")]
        public static void ComposeBack0() {
            Func<int, <#= Name #><int<#= RTDecl #>>> first = i => <#+ WriteFactory("int"); #>(1);
            Func<int, <#= Name #><int<#= RTDecl #>>> second = null;

            Assert.Throws<ArgumentNullException>("second", () => first.ComposeBack(second));
        }

        [t("Repeat() guards.")]
        public static void Repeat0() {
            var source = <#+ WriteFactory("int"); #>(1);

            Assert.Throws<ArgumentOutOfRangeException>("count", () => <#= Name #>.Repeat(source, -1));
        }

        [t("Collect() guards.")]
        public static void Collect0() {
            IEnumerable<<#= Name #><int<#= RTDecl #>>> source = null;

            Assert.Throws<ArgumentNullException>("source", () => <#= Name #>.Collect(source));
        }

        [t("Filter() guards.")]
        public static void Filter0() {
            Func<int, <#= Name #><bool<#= RTDecl #>>> predicate = _ => <#+ WriteFactory("bool"); #>(true);

            IEnumerable<int> nil = null;
            Assert.Throws<ArgumentNullException>("source", () => <#= Name #>.Filter(nil, predicate));

            var source = Enumerable.Range(0, 1);
            Assert.Throws<ArgumentNullException>("predicate", () => <#= Name #>.Filter(source, default(Func<int, <#= Name #><bool<#= RTDecl #>>>)));
        }

        [t("ZipWith() guards.")]
        public static void ZipWith0() {
            var first = <#+ WriteFactory("int"); #>(1);
            var second = <#+ WriteFactory("int"); #>(2);
            var third = <#+ WriteFactory("int"); #>(3);
            var fourth = <#+ WriteFactory("int"); #>(4);
            var fifth = <#+ WriteFactory("int"); #>(5);
            Func<int, int, int> zipper2 = null;
            Func<int, int, int, int> zipper3 = null;
            Func<int, int, int, int, int> zipper4 = null;
            Func<int, int, int, int, int, int> zipper5 = null;

            // Extension method.
            Assert.Throws<ArgumentNullException>("zipper", () => first.ZipWith(second, zipper2));
            Assert.Throws<ArgumentNullException>("zipper", () => first.ZipWith(second, third, zipper3));
            Assert.Throws<ArgumentNullException>("zipper", () => first.ZipWith(second, third, fourth, zipper4));
            Assert.Throws<ArgumentNullException>("zipper", () => first.ZipWith(second, third, fourth, fifth, zipper5));
            // Static method.
            Assert.Throws<ArgumentNullException>("zipper", () => <#= ExtensionsClsName #>.ZipWith(first, second, zipper2));
            Assert.Throws<ArgumentNullException>("zipper", () => <#= ExtensionsClsName #>.ZipWith(first, second, third, zipper3));
            Assert.Throws<ArgumentNullException>("zipper", () => <#= ExtensionsClsName #>.ZipWith(first, second, third, fourth, zipper4));
            Assert.Throws<ArgumentNullException>("zipper", () => <#= ExtensionsClsName #>.ZipWith(first, second, third, fourth, fifth, zipper5));
        }

        [t("<#= MapName #>() guards.")]
        public static void <#= MapName #>0() {
            var source = <#+ WriteFactory("int"); #>(1);
            Func<int, long> selector = null;

            Assert.Throws<ArgumentNullException>("selector", () => source.Select(selector));
            Assert.Throws<ArgumentNullException>("selector", () => <#= ExtensionsClsName #>.Select(source, selector));
        }

        [t("Using() guards.")]
        public static void Using0() {
            var source = <#+ WriteFactory("DisposableObj"); #>(new DisposableObj());
            Func<DisposableObj, <#= Name #><int<#= RTDecl #>>> binder = null;
            Func<DisposableObj, int> selector = null;

            Assert.Throws<ArgumentNullException>("binder", () => source.Using(binder));
            Assert.Throws<ArgumentNullException>("binder", () => <#= ExtensionsClsName #>.Using(source, binder));

            Assert.Throws<ArgumentNullException>("selector", () => source.Using(selector));
            Assert.Throws<ArgumentNullException>("selector", () => <#= ExtensionsClsName #>.Using(source, selector));
        }

<#+ if (HasFilter) { #>
        [t("<#= FilterName #>() guards.")]
        public static void <#= FilterName #>0() {
            var source = <#+ WriteFactory("int"); #>(1);

            Assert.Throws<ArgumentNullException>("predicate", () => source.<#= FilterName #>(null));
            Assert.Throws<ArgumentNullException>("predicate", () => <#= ExtensionsClsName #>.Where(source, null));
        }

<#+ } // T4: End of HasFilter. #>
        [t("SelectMany() guards.")]
        public static void SelectMany0() {
            var source = <#+ WriteFactory("short"); #>(1);
            var middle = <#+ WriteFactory("int"); #>(2);
            Func<short, <#= Name #><int<#= RTDecl #>>> valueSelector = i => <#+ WriteFactory("int"); #>(i);
            Func<short, int, long> resultSelector = (i, j) => i + j;

            // Extension method.
            Assert.Throws<ArgumentNullException>("selector", () => source.SelectMany(null, resultSelector));
            Assert.Throws<ArgumentNullException>("resultSelector", () => source.SelectMany(valueSelector, (Func<short, int, long>)null));
            // Static method.
            Assert.Throws<ArgumentNullException>("selector", () => <#= ExtensionsClsName #>.SelectMany(source, null, resultSelector));
            Assert.Throws<ArgumentNullException>("resultSelector", () => <#= ExtensionsClsName #>.SelectMany(source, valueSelector, (Func<short, int, long>)null));
        }

<#+ if (HasJoin) { #>
        [t("Join() guards.")]
        public static void Join0() {
            var source = <#+ WriteFactory("int"); #>(1);
            var inner = <#+ WriteFactory("int"); #>(2);
            Func<int, int> outerKeySelector = val => val;
            Func<int, int> innerKeySelector = val => val;
            Func<int, int, int> resultSelector = (i, j) => i + j;

            // Extension method.
            Assert.Throws<ArgumentNullException>("outerKeySelector",
                () => source.Join(inner, (Func<int, int>)null, innerKeySelector, resultSelector));
            Assert.Throws<ArgumentNullException>("innerKeySelector",
                () => source.Join(inner, outerKeySelector, (Func<int, int>)null, resultSelector));
            Assert.Throws<ArgumentNullException>("resultSelector",
                () => source.Join(inner, outerKeySelector, innerKeySelector, (Func<int, int, int>)null));
            // Static method.
            Assert.Throws<ArgumentNullException>("outerKeySelector",
                () => <#= ExtensionsClsName #>.Join(source, inner, (Func<int, int>)null, innerKeySelector, resultSelector));
            Assert.Throws<ArgumentNullException>("innerKeySelector",
                () => <#= ExtensionsClsName #>.Join(source, inner, outerKeySelector, (Func<int, int>)null, resultSelector));
            Assert.Throws<ArgumentNullException>("resultSelector",
                () => <#= ExtensionsClsName #>.Join(source, inner, outerKeySelector, innerKeySelector, (Func<int, int, int>)null));
        }

        /* DISABLED: GroupJoin() is currently disabled.
        [t("GroupJoin() guards.")]
        public static void GroupJoin0() {
            var source = <#+ WriteFactory("int"); #>(1);
            var inner = <#+ WriteFactory("int"); #>(2);
            Func<int, int> outerKeySelector = val => val;
            Func<int, int> innerKeySelector = val => val;
            Func<int, <#= Name #><int>, int> resultSelector = (i, m) => 1;

            // Extension method.
            Assert.Throws<ArgumentNullException>("outerKeySelector",
                () => source.GroupJoin(inner, (Func<int, int>)null, innerKeySelector, resultSelector));
            Assert.Throws<ArgumentNullException>("innerKeySelector",
                () => source.GroupJoin(inner, outerKeySelector, (Func<int, int>)null, resultSelector));
            Assert.Throws<ArgumentNullException>("resultSelector",
                () => source.GroupJoin(inner, outerKeySelector, innerKeySelector, (Func<int, <#= Name #><int>, int>)null));
            // Static method.
            Assert.Throws<ArgumentNullException>("outerKeySelector",
                () => <#= ExtensionsClsName #>.GroupJoin(source, inner, (Func<int, int>)null, innerKeySelector, resultSelector));
            Assert.Throws<ArgumentNullException>("innerKeySelector",
                () => <#= ExtensionsClsName #>.GroupJoin(source, inner, outerKeySelector, (Func<int, int>)null, resultSelector));
            Assert.Throws<ArgumentNullException>("resultSelector",
                () => <#= ExtensionsClsName #>.GroupJoin(source, inner, outerKeySelector, innerKeySelector, (Func<int, <#= Name #><int>, int>)null));
        }
        */
<#+ } // T4: End of HasJoin. #>
    }
<#+ if (!HasRightGenerics) { #>

#endif
<#+ } #>
<#+
    } // T4: End of EmitMonadGuards().
} // T4: End of MonadTemplate.

#>