<#+

public partial class MonadTemplate
{
    public void EmitMonadRules()
    {
#>
<#+ if (!HasRightGenerics) { #>
#if !NO_INTERNALS_VISIBLE_TO

<#+ } #>
    // Provides tests for <#= Name #><T<#= RTDecl #>>: functor, monoid and monad laws.
    // T4: EmitMonadRules().
    public static partial class <#= Name #>Facts {
        #region Functor Rules

        [q("The identity map is a fixed point for <#= MapName #>() (first functor rule).")]
        public static bool <#= MapName #>01(int arg) {
            var m = <#+ WriteFactory("int"); #>(arg);

            // fmap id  ==  id
            var left = m.<#= MapName #>(x => x);
            var right = m;

            return left.Equals(right);
        }

        [q("<#= MapName #>() preserves the composition operator (second functor rule).")]
        public static bool <#= MapName #>02(short arg0, int arg1, long arg2) {
            var m = <#+ WriteFactory("short"); #>(arg0);
            Func<short, int> g = x => arg1 * x;
            Func<int, long> f = x => arg2 * x;

            // fmap (f . g)  ==  fmap f . fmap g
            var left = m.<#= MapName #>(val => f(g(val)));
            var right = m.<#= MapName #>(g).<#= MapName #>(f);

            return left.Equals(right);
        }

        #endregion

<#+ if (HasZero && HasPlus) { #>
        #region Monoïd Rules

        [q("<#= ZeroName #> is a left identity for <#= PlusName #>().")]
        public static bool <#= ZeroName #>01(int arg) {
            var m = <#+ WriteFactory("int"); #>(arg);

            // mappend mempty x  ==  x
            var left = <#= Name #><int>.<#= ZeroName #>.<#= PlusName #>(m);
            var right = m;

            return left.Equals(right);
        }

        [q("<#= ZeroName #> is a right identity for <#= PlusName #>().")]
        public static bool <#= ZeroName #>02(int arg) {
            var m = <#+ WriteFactory("int"); #>(arg);

            // mappend x mempty ==  x
            var left = m.<#= PlusName #>(<#= Name #><int>.<#= ZeroName #>);
            var right = m;

            return left.Equals(right);
        }

        [q("<#= PlusName #>() is associative.")]
        public static bool <#= PlusName #>01(int arg0, int arg1, int arg2) {
            var x = <#+ WriteFactory("int"); #>(arg0);
            var y = <#+ WriteFactory("int"); #>(arg1);
            var z = <#+ WriteFactory("int"); #>(arg2);

            // mappend x (mappend y z)  ==  mappend (mappend x y) z
            var left = x.<#= PlusName #>(y.<#= PlusName #>(z));
            var right = x.<#= PlusName #>(y).<#= PlusName #>(z);

            return left.Equals(right);
        }

        #endregion

<#+ } // T4: End of HasZero && HasPlus. #>
        #region Monad Rules

        [q("<#= ReturnName #>() is a left identity for Bind() (first monad rule).")]
        public static bool <#= ReturnName #>01(int arg0, float arg1) {
            Func<int, <#= Name #><float<#= RTDecl #>>> f = x => <#+ WriteFactory("float"); #>(arg1 * x);

            // return a >>= k  ==  k a
            var left = <#+ WriteFactory("int"); #>(arg0).Bind(f);
            var right = f(arg0);

            return left.Equals(right);
        }

        [q("<#= ReturnName #>() is a left identity for Compose() (first monad rule).")]
        public static bool <#= ReturnName #>02a(int arg0, float arg1) {
            Func<int, <#= Name #><int<#= RTDecl #>>> of = <#+ WriteFactory("int"); #>;
            Func<int, <#= Name #><float<#= RTDecl #>>> f = x => <#+ WriteFactory("float"); #>(arg1 * x);

            // return >=> g  ==  g
            var left = of.Compose(f).Invoke(arg0);
            var right = f(arg0);

            return left.Equals(right);
        }

        [q("<#= ReturnName #>() is a right identity for ComposeBack() (first monad rule).")]
        public static bool <#= ReturnName #>02b(int arg0, float arg1) {
            Func<int, <#= Name #><int<#= RTDecl #>>> of = <#+ WriteFactory("int"); #>;
            Func<int, <#= Name #><float<#= RTDecl #>>> f = x => <#+ WriteFactory("float"); #>(arg1 * x);

            // g <=< return  ==  g
            var left = f.ComposeBack(of).Invoke(arg0);
            var right = f(arg0);

            return left.Equals(right);
        }

        [q("<#= ReturnName #>() is a right identity for Bind() (second monad rule).")]
        public static bool <#= ReturnName #>03(int arg0) {
            var m = <#+ WriteFactory("int"); #>(arg0);

            // m >>= return  ==  m
            var left = m.Bind(<#+ WriteFactory("int"); #>);
            var right = m;

            return left.Equals(right);
        }

        [q("<#= ReturnName #>() is a right identity for Compose() (second monad rule).")]
        public static bool <#= ReturnName #>04a(int arg0, float arg1) {
            Func<int, <#= Name #><float<#= RTDecl #>>> f = x => <#+ WriteFactory("float"); #>(arg1 * x);

            // f >=> return  ==  f
            var left = f.Compose(<#+ WriteFactory("float"); #>).Invoke(arg0);
            var right = f(arg0);

            return left.Equals(right);
        }

        [q("<#= ReturnName #>() is a left identity for ComposeBack() (second monad rule).")]
        public static bool <#= ReturnName #>04b(int arg0, float arg1) {
            Func<float, <#= Name #><float<#= RTDecl #>>> of = <#+ WriteFactory("float"); #>;
            Func<int, <#= Name #><float<#= RTDecl #>>> f = x => <#+ WriteFactory("float"); #>(arg1 * x);

            // return <=< f  ==  f
            var left = of.ComposeBack(f).Invoke(arg0);
            var right = f(arg0);

            return left.Equals(right);
        }

        [q("Bind() is associative (third monad rule).")]
        public static bool Bind01(short arg0, int arg1, long arg2) {
            var m = <#+ WriteFactory("short"); #>(arg0);

            Func<short, <#= Name #><int<#= RTDecl #>>> f = x => <#+ WriteFactory("int"); #>(arg1 * x);
            Func<int, <#= Name #><long<#= RTDecl #>>> g = x => <#+ WriteFactory("long"); #>(arg2 * x);

            // m >>= (\x -> f x >>= g)  ==  (m >>= f) >>= g
            var left = m.Bind(f).Bind(g);
            var right = m.Bind(val => f(val).Bind(g));

            return left.Equals(right);
        }

        [q("Compose() is associative (third monad rule).")]
        public static bool Compose01a(short arg0, int arg1, long arg2, double arg3) {
            Func<short, <#= Name #><int<#= RTDecl #>>> f = x => <#+ WriteFactory("int"); #>(arg1 * x);
            Func<int, <#= Name #><long<#= RTDecl #>>> g = x => <#+ WriteFactory("long"); #>(arg2 * x);
            Func<long, <#= Name #><double<#= RTDecl #>>> h = x => <#+ WriteFactory("double"); #>(arg3 * x);

            // f >=> (g >=> h)  ==  (f >=> g) >=> h
            var left = f.Compose(g.Compose(h)).Invoke(arg0);
            var right = f.Compose(g).Compose(h).Invoke(arg0);

            return left.Equals(right);
        }

        [q("ComposeBack() is associative (third monad rule).")]
        public static bool Compose01b(short arg0, int arg1, long arg2, double arg3) {
            Func<short, <#= Name #><int<#= RTDecl #>>> f = x => <#+ WriteFactory("int"); #>(arg1 * x);
            Func<int, <#= Name #><long<#= RTDecl #>>> g = x => <#+ WriteFactory("long"); #>(arg2 * x);
            Func<long, <#= Name #><double<#= RTDecl #>>> h = x => <#+ WriteFactory("double"); #>(arg3 * x);

            // f <=< (g <=< h)  ==  (f <=< g) <=< h
            var left = h.ComposeBack(g).ComposeBack(f).Invoke(arg0);
            var right = h.ComposeBack(g.ComposeBack(f)).Invoke(arg0);

            return left.Equals(right);
        }

        #endregion
<#+ if (HasZero) { #>

        #region Monad Zero, Plus and More Rules

        [q("<#= ZeroName #> is is a left zero for Bind() (monad-zero rule).")]
        public static bool <#= ZeroName #>03(long arg0) {
            Func<int, <#= Name #><long>> f = x => <#+ WriteFactory("long"); #>(arg0 * x);

            // mzero >>= f  ==  mzero
            var left = <#= Name #><int>.<#= ZeroName #>.Bind(f);
            var right = <#= Name #><long>.<#= ZeroName #>;

            return left.Equals(right);
        }

        [q("<#= ZeroName #> is is a right zero for Bind() (monad-more rule).")]
        public static bool <#= ZeroName #>04(int arg0) {
            // m >>= (\x -> mzero) = mzero
            var left = <#+ WriteFactory("int"); #>(arg0).Bind(_ => <#= Name #><long>.<#= ZeroName #>);
            var right = <#= Name #><long>.<#= ZeroName #>;

            return left.Equals(right);
        }
<#+ } // T4: End of HasZero. #>
<#+ if (HasZero && HasPlus) { #>

        [q("<#= ReturnName #>() is a left zero for <#= PlusName #>() (monad-or rule (1)).")]
        public static bool <#= ReturnName #>05(int arg0, int arg1) {
            var m = <#+ WriteFactory("int"); #>(arg0);
            var right = m;

            // morelse (return a) b  ==  return a
            var left = m.<#= PlusName #>(<#+ WriteFactory("int"); #>(arg1));

            return left.Equals(right);
        }

        [q("<#= ReturnName #>() is a left zero for <#= PlusName #>() (monad-or rule (2)).")]
        public static bool <#= ReturnName #>06(int arg0) {
            var m = <#+ WriteFactory("int"); #>(arg0);
            var right = m;

            // morelse (return a) b  ==  return a
            var left = m.<#= PlusName #>(<#= Name #><int>.<#= ZeroName #>);

            return left.Equals(right);
        }

        [q("<#= ReturnName #>() is a right zero for <#= PlusName #>() (monad-plus rule (1)).")]
        public static bool <#= ReturnName #>07(int arg0) {
            var m = <#+ WriteFactory("int"); #>(arg0);
            var right = m;

            // morelse b (return a)  ==  return a
            var left = <#= Name #><int>.<#= ZeroName #>.<#= PlusName #>(m);

            return left.Equals(right);
        }

        [q("<#= ReturnName #>() is NOT a right zero for <#= PlusName #>() (monad-plus rule (2)).")]
        public static bool <#= ReturnName #>08(int arg0, int arg1) {
            // FIXME: filter before?
            if (arg0 == arg1) { return true; }

            var m = <#+ WriteFactory("int"); #>(arg0);
            var right = m;

            // morelse b (return a)  !=  return a
            var left = <#+ WriteFactory("int"); #>(arg1).<#= PlusName #>(m);

            // NB: Fails here the "Unit is a right zero for Plus".
            return !left.Equals(right);
        }

        #endregion
<#+ } // T4: End of HasZero && HasPlus. #>
    }
<#+ if (!HasRightGenerics) { #>

#endif
<#+ } #>
<#+
    } // T4: End of EmitMonadRules().
} // T4: End of MonadTemplate.

#>