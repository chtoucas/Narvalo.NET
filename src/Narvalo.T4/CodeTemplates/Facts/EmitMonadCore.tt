<#+

public partial class MonadTemplate
{
    public void EmitMonadCore()
    {
#>
    // Provides tests for <#= Name #><T<#= RTDecl #>>.
    // T4: EmitCore().
    public static partial class <#= Name #>Facts
    {
        #region Repeat()

        [Fact]
        public static void Repeat_Guards()
        {
            var source = <#+ WriteFactory("int"); #>(1);

            Assert.Throws<ArgumentOutOfRangeException>("count", () => <#= Name #>.Repeat(source, -1));
        }

        #endregion

        #region Zip()

        [Fact]
        public static void Zip_Guards()
        {
            var first = <#+ WriteFactory("int"); #>(1);
            var second = <#+ WriteFactory("int"); #>(2);
            var third = <#+ WriteFactory("int"); #>(3);
            var fourth = <#+ WriteFactory("int"); #>(4);
            var fifth = <#+ WriteFactory("int"); #>(5);
            Func<int, int, int> zipper2 = null;
            Func<int, int, int, int> zipper3 = null;
            Func<int, int, int, int, int> zipper4 = null;
            Func<int, int, int, int, int, int> zipper5 = null;

            Assert.Throws<ArgumentNullException>("zipper", () => first.Zip(second, zipper2));
            Assert.Throws<ArgumentNullException>("zipper", () => first.Zip(second, third, zipper3));
            Assert.Throws<ArgumentNullException>("zipper", () => first.Zip(second, third, fourth, zipper4));
            Assert.Throws<ArgumentNullException>("zipper", () => first.Zip(second, third, fourth, fifth, zipper5));

            Assert.Throws<ArgumentNullException>("zipper", () => <#= ExtensionsClsName #>.Zip(first, second, zipper2));
            Assert.Throws<ArgumentNullException>("zipper", () => <#= ExtensionsClsName #>.Zip(first, second, third, zipper3));
            Assert.Throws<ArgumentNullException>("zipper", () => <#= ExtensionsClsName #>.Zip(first, second, third, fourth, zipper4));
            Assert.Throws<ArgumentNullException>("zipper", () => <#= ExtensionsClsName #>.Zip(first, second, third, fourth, fifth, zipper5));
        }

        #endregion

        #region <#= MapName #>()

        [Fact]
        public static void <#= MapName #>_Guards()
        {
            var source = <#+ WriteFactory("int"); #>(1);
            Func<int, long> selector = null;

            Assert.Throws<ArgumentNullException>("selector", () => source.Select(selector));
            Assert.Throws<ArgumentNullException>("selector", () => <#= ExtensionsClsName #>.Select(source, selector));
        }

        #endregion

<#+ if (HasFilter) { #>
        #region <#= FilterName #>()

        [Fact]
        public static void <#= FilterName #>_Guards()
        {
            var source = <#+ WriteFactory("int"); #>(1);

            Assert.Throws<ArgumentNullException>("predicate", () => source.<#= FilterName #>(null));
            Assert.Throws<ArgumentNullException>("predicate", () => <#= ExtensionsClsName #>.Where(source, null));
        }

        #endregion

<#+ } // T4: End of HasFilter. #>
        #region SelectMany()

        [Fact]
        public static void SelectMany_Guards()
        {
            var source = <#+ WriteFactory("short"); #>(1);
            var middle = <#+ WriteFactory("int"); #>(2);
            Func<short, <#= Name #><int<#= RTDecl #>>> valueSelector =  i => <#+ WriteFactory("int"); #>(i);
            Func<short, int, long> resultSelector = (i, j) => i + j;

            Assert.Throws<ArgumentNullException>("selector", () => source.SelectMany(null, resultSelector));
            Assert.Throws<ArgumentNullException>("resultSelector", () => source.SelectMany(valueSelector, (Func<short, int, long>)null));

            Assert.Throws<ArgumentNullException>("selector", () => <#= ExtensionsClsName #>.SelectMany(source, null, resultSelector));
            Assert.Throws<ArgumentNullException>("resultSelector", () => <#= ExtensionsClsName #>.SelectMany(source, valueSelector, (Func<short, int, long>)null));
        }

        #endregion

<#+ if (HasJoin) { #>
        #region Join()

        [Fact]
        public static void Join_Guards()
        {
            var source = <#+ WriteFactory("int"); #>(1);
            var inner = <#+ WriteFactory("int"); #>(2);
            Func<int, int> outerKeySelector = val => val;
            Func<int, int> innerKeySelector = val => val;
            Func<int, int, int> resultSelector = (i, j) => i + j;

            Assert.Throws<ArgumentNullException>("outerKeySelector",
                () => source.Join(inner, (Func<int, int>)null, innerKeySelector, resultSelector));
            Assert.Throws<ArgumentNullException>("innerKeySelector",
                () => source.Join(inner, outerKeySelector, (Func<int, int>)null, resultSelector));
            Assert.Throws<ArgumentNullException>("resultSelector",
                () => source.Join(inner, outerKeySelector, innerKeySelector, (Func<int, int, int>)null));
            Assert.Throws<ArgumentNullException>("comparer",
                () => source.Join(inner, outerKeySelector, innerKeySelector, resultSelector, null));

            Assert.Throws<ArgumentNullException>("outerKeySelector",
                () => <#= ExtensionsClsName #>.Join(source, inner, (Func<int, int>)null, innerKeySelector, resultSelector));
            Assert.Throws<ArgumentNullException>("innerKeySelector",
                () => <#= ExtensionsClsName #>.Join(source, inner, outerKeySelector, (Func<int, int>)null, resultSelector));
            Assert.Throws<ArgumentNullException>("resultSelector",
                () => <#= ExtensionsClsName #>.Join(source, inner, outerKeySelector, innerKeySelector, (Func<int, int, int>)null));
            Assert.Throws<ArgumentNullException>("comparer",
                () => <#= ExtensionsClsName #>.Join(source, inner, outerKeySelector, innerKeySelector, resultSelector, null));
        }

        #endregion

        #region GroupJoin()

        [Fact]
        public static void GroupJoin_Guards()
        {
            var source = <#+ WriteFactory("int"); #>(1);
            var inner = <#+ WriteFactory("int"); #>(2);
            Func<int, int> outerKeySelector = val => val;
            Func<int, int> innerKeySelector = val => val;
            Func<int, <#= Name #><int>, int> resultSelector = (i, m) => 1;

            Assert.Throws<ArgumentNullException>("outerKeySelector",
                () => source.GroupJoin(inner, (Func<int, int>)null, innerKeySelector, resultSelector));
            Assert.Throws<ArgumentNullException>("innerKeySelector",
                () => source.GroupJoin(inner, outerKeySelector, (Func<int, int>)null, resultSelector));
            Assert.Throws<ArgumentNullException>("resultSelector",
                () => source.GroupJoin(inner, outerKeySelector, innerKeySelector, (Func<int, <#= Name #><int>, int>)null));
            Assert.Throws<ArgumentNullException>("comparer",
                () => source.GroupJoin(inner, outerKeySelector, innerKeySelector, resultSelector, null));

            Assert.Throws<ArgumentNullException>("outerKeySelector",
                () => <#= ExtensionsClsName #>.GroupJoin(source, inner, (Func<int, int>)null, innerKeySelector, resultSelector));
            Assert.Throws<ArgumentNullException>("innerKeySelector",
                () => <#= ExtensionsClsName #>.GroupJoin(source, inner, outerKeySelector, (Func<int, int>)null, resultSelector));
            Assert.Throws<ArgumentNullException>("resultSelector",
                () => <#= ExtensionsClsName #>.GroupJoin(source, inner, outerKeySelector, innerKeySelector, (Func<int, <#= Name #><int>, int>)null));
            Assert.Throws<ArgumentNullException>("comparer",
                () => <#= ExtensionsClsName #>.GroupJoin(source, inner, outerKeySelector, innerKeySelector, resultSelector, null));
        }

        #endregion

<#+ } // T4: End of HasJoin. #>
    }
<#+
    } // T4: End of EmitCore().
} // T4: End of MonadTemplate.

#>