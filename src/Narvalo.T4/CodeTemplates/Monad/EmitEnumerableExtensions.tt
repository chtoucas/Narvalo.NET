<#+

public partial class MonadTemplate
{
    protected void EmitEnumerableExtensions()
    {
#>
    // Provides extension methods for IEnumerable<<#= Name #><T<#= RTDecl #>>>.
    // T4: EmitEnumerableExtensions().
    public static partial class <#= ExtensionsClsName #>
    {
        public static IEnumerable<TSource> CollectAny<TSource<#= RTDecl #>>(
            this IEnumerable<<#= Name #><TSource<#= RTDecl #>>> source)
        {
            <#+ WriteNotNull("source", true); #>
            return source.CollectAnyImpl();
        }

        // Hidden because this operator is not composable.
        // Do not disable, we use it in Kleisli.InvokeWith().
        internal static <#= Name #><IEnumerable<TSource><#= RTDecl #>> Collect<TSource<#= RTDecl #>>(
            this IEnumerable<<#= Name #><TSource<#= RTDecl #>>> source)
        {
            <#+ WriteNotNull("source", true); #>
            return source.CollectImpl();
        }
<#+ if (HasSum) { #>

        public static <#= Name #><TSource> Sum<TSource>(this IEnumerable<<#= Name #><TSource>> source)
            => source.SumImpl();
<#+ } // T4: End of HasSum. #>
    }
<#+
    } // T4: End of EmitEnumerableExtensions().
} // T4: End of MonadTemplate.

#>