<#+

public partial class MonadTemplate
{
    // WARNING: This template does not handle types with more than one generic parameter.
    protected void EmitLinqInternal()
    {
#>
    // Provides default implementations for the extension methods for IEnumerable<T>.
    // You will certainly want to override them to improve performance.
    internal static partial class EnumerableExtensions
    {
<#+ if (!HasTypeConstraints) { #>
<#+ if (!SuppressMessage) { #>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "[GeneratedCode] This method has been overridden locally.")]
<#+ } #>
        internal static <#= Name #><IEnumerable<TResult>> SelectWithImpl<TSource, TResult>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><TResult>> selector)
        {
            Demand.NotNull(@this);
            Demand.NotNull(selector);

            return @this.Select(selector).Collect();
        }

<#+ if (!SuppressMessage) { #>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "[GeneratedCode] This method has been overridden locally.")]
<#+ } #>
        internal static <#= Name #><IEnumerable<TSource>> WhereByImpl<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><bool>> predicate)
            <#+ WriteTypeConstraints("TSource"); #>
        {
            <#+ WriteNotNull(true); #>
            Require.NotNull(predicate, nameof(predicate));

            return <#+ WriteFactory("IEnumerable<TSource>"); #>(WhereByIterator(@this, predicate));
        }

        private static IEnumerable<TSource> WhereByIterator<TSource>(
            IEnumerable<TSource> source,
            Func<TSource, <#= Name #><bool>> predicate)
        {
            Demand.NotNull(source);
            Demand.NotNull(predicate);
<#+ if (HasRightGenerics) { #>

            var unit = <#+ WriteFactory("Unit"); #>(Unit.Default);
<#+ } #>

            using (var iter = source.GetEnumerator())
            {
                while (iter.MoveNext())
                {
                    bool pass = false;
                    TSource item = iter.Current;

                    predicate(item).Bind(val =>
                    {
                        pass = val;

<#+ if (HasRightGenerics) { #>
                        return unit;
<#+ } else { #>
                        return <#= Name #>.Unit;
<#+ } #>
                    });

                    if (pass) { yield return item; }
                }
            }
        }

<#+ if (!SuppressMessage) { #>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "[GeneratedCode] This method has been overridden locally.")]
<#+ } #>
        internal static <#= Name #><IEnumerable<TResult>> ZipWithImpl<TFirst, TSecond, TResult>(
            this IEnumerable<TFirst> @this,
            IEnumerable<TSecond> second,
            Func<TFirst, TSecond, <#= Name #><TResult>> resultSelector)
        {
            Demand.NotNull(resultSelector);
            Demand.NotNull(@this);
            Demand.NotNull(second);

            return @this.Zip(second, resultSelector).Collect();
        }

<#+ } // T4: End of !HasTypeConstraints. #>

<#+ if (!SuppressMessage) { #>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "[GeneratedCode] This method has been overridden locally.")]
<#+ } #>
        internal static <#= Name #><TAccumulate> FoldImpl<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulator)
            <#+ WriteTypeConstraints("TSource", "TAccumulate"); #>
        {
            <#+ WriteNotNull(true); #>
            Require.NotNull(accumulator, nameof(accumulator));

            <#= Name #><TAccumulate> retval = <#= Name #>.<#= ReturnName #>(seed);

            using (var iter = @this.GetEnumerator())
            {
                while (iter.MoveNext())
                {
<#+ if (IsNullable) { #>
                    if (retval == null) { continue; }

<#+ } #>
                    retval = retval.Bind(val => accumulator(val, iter.Current));
                }
            }

            return retval;
        }

<#+ if (!SuppressMessage) { #>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "[GeneratedCode] This method has been overridden locally.")]
<#+ } #>
        internal static <#= Name #><TAccumulate> FoldImpl<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulator,
            Func<<#= Name #><TAccumulate>, bool> predicate)
            <#+ WriteTypeConstraints("TSource", "TAccumulate"); #>
        {
            <#+ WriteNotNull(true); #>
            Require.NotNull(accumulator, nameof(accumulator));
            Require.NotNull(predicate, nameof(predicate));

            <#= Name #><TAccumulate> retval = <#= Name #>.<#= ReturnName #>(seed);

            using (var iter = @this.GetEnumerator())
            {
                while (predicate(retval) && iter.MoveNext())
                {
<#+ if (IsNullable) { #>
                    if (retval == null) { continue; }

<#+ } #>
                    retval = retval.Bind(val => accumulator(val, iter.Current));
                }
            }

            return retval;
        }

<#+ if (!SuppressMessage) { #>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "[GeneratedCode] This method has been overridden locally.")]
<#+ } #>
        internal static <#= Name #><TSource> ReduceImpl<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulator)
            <#+ WriteTypeConstraints("TSource"); #>
        {
            <#+ WriteNotNull(true); #>
            Require.NotNull(accumulator, nameof(accumulator));

            using (var iter = @this.GetEnumerator())
            {
                if (!iter.MoveNext())
                {
                    throw new InvalidOperationException("Source sequence was empty.");
                }

                <#= Name #><TSource> retval = <#= Name #>.<#= ReturnName #>(iter.Current);

                while (iter.MoveNext())
                {
<#+ if (IsNullable) { #>
                    if (retval == null) { continue; }

<#+ } #>
                    retval = retval.Bind(val => accumulator(val, iter.Current));
                }

                return retval;
            }
        }

<#+ if (!SuppressMessage) { #>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "[GeneratedCode] This method has been overridden locally.")]
<#+ } #>
        internal static <#= Name #><TSource> ReduceImpl<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulator,
            Func<<#= Name #><TSource>, bool> predicate)
            <#+ WriteTypeConstraints("TSource"); #>
        {
            <#+ WriteNotNull(true); #>
            Require.NotNull(accumulator, nameof(accumulator));
            Require.NotNull(predicate, nameof(predicate));

            using (var iter = @this.GetEnumerator())
            {
                if (!iter.MoveNext())
                {
                    throw new InvalidOperationException("Source sequence was empty.");
                }

                <#= Name #><TSource> retval = <#= Name #>.<#= ReturnName #>(iter.Current);

                while (predicate(retval) && iter.MoveNext())
                {
<#+ if (IsNullable) { #>
                    if (retval == null) { continue; }

<#+ } #>
                    retval = retval.Bind(val => accumulator(val, iter.Current));
                }

                return retval;
            }
        }
    } // End of EnumerableExtensions - T4: EmitLinqInternal().
<#+
    } // T4: End of EmitLinqInternal().
} // T4: End of MonadTemplate.

#>