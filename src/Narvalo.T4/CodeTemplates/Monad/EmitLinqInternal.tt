<#+

public partial class MonadTemplate
{
    protected void EmitLinqInternal()
    {
#>
    // Provides default implementations for extension methods on IEnumerable<T>
    // and IEnumerable<<#= Name #><T<#= RTDecl #>>>.
    // You will certainly want to shadow them to improve performance.
    // T4: EmitLinqInternal().
    internal static partial class EnumerableExtensions
    {
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static IEnumerable<TSource> CollectAnyImpl<TSource<#= RTDecl #>>(
            this IEnumerable<<#= Name #><TSource<#= RTDecl #>>> source)
        {
            Debug.Assert(source != null);

<#+ if (HasRightGenerics) { #>
            var unit = <#+ WriteFactory("Unit"); #>(Unit.Default);
<#+ } #>
            var item = default(TSource);

            using (var iter = source.GetEnumerator())
            {
                while (iter.MoveNext())
                {
                    bool append = false;
                    var current = iter.Current;
<#+ if (IsNullable) { #>

                    if (current == null) { continue; }
<#+ } #>

                    current.Bind(val =>
                    {
                        append = true;
                        item = val;

<#+ if (HasRightGenerics) { #>
                        return unit;
<#+ } else { #>
                        return <#= Name #>.Unit;
<#+ } #>
                    });

                    if (append) { yield return item; }
                }
            }
        }
<#+ if (HasSum) { #>

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static <#= Name #><TSource> SumImpl<TSource>(
            this IEnumerable<<#= Name #><TSource>> source)
        {
            Debug.Assert(source != null);
            return source.Aggregate(<#= Name #><TSource>.<#= ZeroName #>, (m, n) => m.<#= PlusName #>(n));
        }
<#+ } // T4: End of HasSum. #>

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static IEnumerable<TResult> SelectAnyImpl<TSource, TResult<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            Func<TSource, <#= Name #><TResult<#= RTDecl #>>> selector)
        {
            Debug.Assert(source != null);
            Debug.Assert(selector != null);

<#+ if (HasRightGenerics) { #>
            var unit = <#+ WriteFactory("Unit"); #>(Unit.Default);
<#+ } #>
            var result = default(TResult);

            using (var iter = source.GetEnumerator())
            {
                while (iter.MoveNext())
                {
                    bool append = false;

                    var item = selector(iter.Current);
<#+ if (IsNullable) { #>
                    if (item == null) { continue; }
<#+ } #>

                    item.Bind(val =>
                    {
                        append = true;
                        result = val;

<#+ if (HasRightGenerics) { #>
                        return unit;
<#+ } else { #>
                        return <#= Name #>.Unit;
<#+ } #>
                    });

                    if (append) { yield return result; }
                }
            }
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static IEnumerable<TSource> WhereAnyImpl<TSource<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            Func<TSource, <#= Name #><bool<#= RTDecl #>>> predicate)
        {
            Debug.Assert(source != null);
            Debug.Assert(predicate != null);
<#+ if (HasRightGenerics) { #>

            var unit = <#+ WriteFactory("Unit"); #>(Unit.Default);
<#+ } #>

            using (var iter = source.GetEnumerator())
            {
                while (iter.MoveNext())
                {
                    bool pass = false;
                    TSource current = iter.Current;

                    var item = predicate(current);
<#+ if (IsNullable) { #>
                    if (item == null) { continue; }
<#+ } #>

                    item.Bind(val =>
                    {
                        pass = val;

<#+ if (HasRightGenerics) { #>
                        return unit;
<#+ } else { #>
                        return <#= Name #>.Unit;
<#+ } #>
                    });

                    if (pass) { yield return current; }
                }
            }
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static <#= Name #><TAccumulate<#= RTDecl #>> FoldImpl<TSource, TAccumulate<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate<#= RTDecl #>>> accumulator)
        {
            Debug.Assert(source != null);
            Debug.Assert(accumulator != null);

            <#= Name #><TAccumulate<#= RTDecl #>> retval = <#+ WriteFactory("TAccumulate"); #>(seed);

            using (var iter = source.GetEnumerator())
            {
                while (iter.MoveNext())
                {
<#+ if (IsNullable) { #>
                    if (retval == null) { continue; }

<#+ } #>
                    retval = retval.Bind(val => accumulator(val, iter.Current));
                }
            }

            return retval;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static <#= Name #><TAccumulate<#= RTDecl #>> FoldImpl<TSource, TAccumulate<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate<#= RTDecl #>>> accumulator,
            Func<<#= Name #><TAccumulate<#= RTDecl #>>, bool> predicate)
        {
            Debug.Assert(source != null);
            Debug.Assert(accumulator != null);
            Debug.Assert(predicate != null);

            <#= Name #><TAccumulate<#= RTDecl #>> retval = <#+ WriteFactory("TAccumulate"); #>(seed);

            using (var iter = source.GetEnumerator())
            {
                while (predicate(retval) && iter.MoveNext())
                {
<#+ if (IsNullable) { #>
                    if (retval == null) { continue; }

<#+ } #>
                    retval = retval.Bind(val => accumulator(val, iter.Current));
                }
            }

            return retval;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static <#= Name #><TSource<#= RTDecl #>> ReduceImpl<TSource<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            Func<TSource, TSource, <#= Name #><TSource<#= RTDecl #>>> accumulator)
        {
            Debug.Assert(source != null);
            Debug.Assert(accumulator != null);

            using (var iter = source.GetEnumerator())
            {
                if (!iter.MoveNext())
                {
                    throw new InvalidOperationException("Source sequence was empty.");
                }

                <#= Name #><TSource<#= RTDecl #>> retval = <#+ WriteFactory("TSource"); #>(iter.Current);

                while (iter.MoveNext())
                {
<#+ if (IsNullable) { #>
                    if (retval == null) { continue; }

<#+ } #>
                    retval = retval.Bind(val => accumulator(val, iter.Current));
                }

                return retval;
            }
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static <#= Name #><TSource<#= RTDecl #>> ReduceImpl<TSource<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            Func<TSource, TSource, <#= Name #><TSource<#= RTDecl #>>> accumulator,
            Func<<#= Name #><TSource<#= RTDecl #>>, bool> predicate)
        {
            Debug.Assert(source != null);
            Debug.Assert(accumulator != null);
            Debug.Assert(predicate != null);

            using (var iter = source.GetEnumerator())
            {
                if (!iter.MoveNext())
                {
                    throw new InvalidOperationException("Source sequence was empty.");
                }

                <#= Name #><TSource<#= RTDecl #>> retval = <#+ WriteFactory("TSource"); #>(iter.Current);

                while (predicate(retval) && iter.MoveNext())
                {
<#+ if (IsNullable) { #>
                    if (retval == null) { continue; }

<#+ } #>
                    retval = retval.Bind(val => accumulator(val, iter.Current));
                }

                return retval;
            }
        }
    }
<#+
    } // T4: End of EmitLinqInternal().
} // T4: End of MonadTemplate.

#>