<#+

public partial class MonadTemplate
{
    public void EmitKleisli()
    {
#>
    // Provides extension methods for functions in the Kleisli category.
    // T4: EmitKleisli().
    public static partial class Kleisli
    {
        public static <#= Name #><IEnumerable<TResult><#= RTDecl #>> InvokeWith<TSource, TResult<#= RTDecl #>>(
            this Func<TSource, <#= Name #><TResult<#= RTDecl #>>> @this,
            IEnumerable<TSource> seq)
<#+ if (EmitExtendedLinq) { #>
            => seq.SelectWith(@this);
<#+ } else { #>
            => seq.Select(@this).Collect();
<#+ } #>

        public static <#= Name #><TResult<#= RTDecl #>> InvokeWith<TSource, TResult<#= RTDecl #>>(
            this Func<TSource, <#= Name #><TResult<#= RTDecl #>>> @this,
            <#= Name #><TSource<#= RTDecl #>> value)
        {
            <#+ WriteNotNull("value"); #>
            return value.Bind(@this);
        }

        public static Func<TSource, <#= Name #><TResult<#= RTDecl #>>> Compose<TSource, TMiddle, TResult<#= RTDecl #>>(
            this Func<TSource, <#= Name #><TMiddle<#= RTDecl #>>> @this,
            Func<TMiddle, <#= Name #><TResult<#= RTDecl #>>> second)
        {
            Require.NotNull(@this, nameof(@this));
            return arg => @this(arg).Bind(second);
        }

        public static Func<TSource, <#= Name #><TResult<#= RTDecl #>>> ComposeBack<TSource, TMiddle, TResult<#= RTDecl #>>(
            this Func<TMiddle, <#= Name #><TResult<#= RTDecl #>>> @this,
            Func<TSource, <#= Name #><TMiddle<#= RTDecl #>>> second)
        {
            Require.NotNull(second, nameof(second));
            return arg => second(arg).Bind(@this);
        }
    }
<#+
    } // T4: End of EmitKleisli().
} // T4: End of MonadTemplate.

#>