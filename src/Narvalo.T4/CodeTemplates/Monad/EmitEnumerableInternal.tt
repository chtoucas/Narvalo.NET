<#+

public partial class MonadTemplate
{
    protected void EmitEnumerableInternal()
    {
#>
    // Provides default implementations for extension methods on IEnumerable<<#= Name #><T<#= RTDecl #>>>.
    // You will certainly want to shadow them to improve performance.
    // T4: EmitEnumerableInternal().
    internal static partial class EnumerableExtensions
    {
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static <#= Name #><IEnumerable<TSource><#= RTDecl #>> CollectImpl<TSource<#= RTDecl #>>(
            this IEnumerable<<#= Name #><TSource<#= RTDecl #>>> source)
        {
            Debug.Assert(source != null);

            var seed = <#+ WriteFactory("IEnumerable<TSource>"); #>(Enumerable.Empty<TSource>());
            Func<IEnumerable<TSource>, TSource, IEnumerable<TSource>> append
                = (seq, item) => seq.Append(item);

            var accumulator = <#= Name #>.Lift<IEnumerable<TSource>, TSource, IEnumerable<TSource><#= RTDecl #>>(append);

            return source.Aggregate(seed, accumulator);
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static <#= Name #><IEnumerable<TSource><#= RTDecl #>> WhereImpl<TSource<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            Func<TSource, <#= Name #><bool<#= RTDecl #>>> predicate)
        {
            Debug.Assert(source != null);
            Debug.Assert(predicate != null);

            var seed = <#+ WriteFactory("IEnumerable<TSource>"); #>(Enumerable.Empty<TSource>());

            Func<TSource, Func<bool, IEnumerable<TSource>, IEnumerable<TSource>>> func
                = item => (b, seq) => b ? seq.Append(item) : seq;

            Func<<#= Name #><IEnumerable<TSource><#= RTDecl #>>, TSource, <#= Name #><IEnumerable<TSource><#= RTDecl #>>> accumulator
                = (mseq, item) => predicate(item).Zip(mseq, func(item));

            return source.Aggregate(seed, accumulator);
        }
    }
<#+
    } // T4: End of EmitEnumerableInternal().
} // T4: End of MonadTemplate.

#>