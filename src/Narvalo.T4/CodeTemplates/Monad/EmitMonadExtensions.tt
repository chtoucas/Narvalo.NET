<#+

public partial class MonadTemplate
{
    protected void EmitMonadExtensions()
    {
#>
    /// <content>
    /// Provides the core monadic extension methods for <see cref="<#= Name #>{T}" />.
    /// </content>
    public static partial class <#= Name #>
    {
        #region Basic Monad functions (Prelude)

        /// <remarks>
        /// Named <c>fmap</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><TResult> <#= MapName #><TSource, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, TResult> selector)
            <#+ WriteTypeConstraints("TSource", "TResult"); #>
        {
            <#+ WriteNotNull(); #>
            Require.NotNull(selector, "selector");
<#+ if (PostBindEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.Bind(_ => <#= Name #>.<#= ReturnName #>(selector.Invoke(_)));
        }

        /// <remarks>
        /// Named <c>&gt;&gt;</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><TResult> Then<TSource, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TResult> other)
            <#+ WriteTypeConstraints("TSource", "TResult"); #>
        {
            <#+ WriteNotNull(); #>
<#+ if (PostBindEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.Bind(_ => other);
        }

        /// <remarks>
        /// Named <c>forever</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><TResult> Forever<TSource, TResult>(
            this <#= Name #><TSource> @this,
            Func<<#= Name #><TResult>> fun
            )
            <#+ WriteTypeConstraints("TSource", "TResult"); #>
        {
            <#+ WriteNotNull(); #>
<#+ if (IsNullable) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            // http://stackoverflow.com/questions/24042977/how-does-forever-monad-work

            return @this.Then(@this.Forever(fun));
        }

        /// <remarks>
        /// Named <c>void</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><global::Narvalo.Fx.Unit> Forget<TSource>(this <#= Name #><TSource> @this)
            <#+ WriteTypeConstraints("TSource"); #>
        {
            <#+ WriteNotNull(); #>
<#+ if (IsNullable) { #>
            Contract.Ensures(Contract.Result<<#= Name #><global::Narvalo.Fx.Unit>>() != null);
<#+ } #>

            return <#= Name #>.Unit;
        }

        #endregion

        #region Generalisations of list functions (Prelude)

<#+ if (HasZero) { #>

        /// <remarks>
        /// Named <c>mfilter</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><TSource> <#= FilterName #><TSource>(
            this <#= Name #><TSource> @this,
            Func<TSource, bool> predicate)
            <#+ WriteTypeConstraints("TSource"); #>
        {
            <#+ WriteNotNull(); #>
            Require.NotNull(predicate, "predicate");
<#+ if (PostBindEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            return @this.Bind(
                _ => predicate.Invoke(_) ? @this : <#= Name #><TSource>.<#= ZeroName #>);
        }

<#+ } // T4: End of HasZero. #>

<#+ if (!HasTypeConstraints) { #>

        /// <remarks>
        /// Named <c>replicateM</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><IEnumerable<TSource>> Repeat<TSource>(
            this <#= Name #><TSource> @this,
            int count)
        {
            <#+ WriteNotNull(); #>
            Require.GreaterThanOrEqualTo(count, 1, "count");
<#+ if (PostMapEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><IEnumerable<TSource>>>() != null);
<#+ } #>

            return @this.<#= MapName #>(_ => Enumerable.Repeat(_, count));
        }

<#+ } // T4: End of !HasTypeConstraints. #>

        #endregion

        #region Monadic lifting operators (Prelude)

        /// <see cref="Lift{T1, T2, T3}" />
        public static <#= Name #><TResult> Zip<TFirst, TSecond, TResult>(
            this <#= Name #><TFirst> @this,
            <#= Name #><TSecond> second,
            Func<TFirst, TSecond, TResult> resultSelector)
            <#+ WriteTypeConstraints("TFirst", "TSecond", "TResult"); #>
        {
            <#+ WriteNotNull(); #>
            <#+ WriteNotNull("second"); #>
            Require.NotNull(resultSelector, "resultSelector");
<#+ if (PostBindEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.Bind(v1 => second.<#= MapName #>(v2 => resultSelector.Invoke(v1, v2)));
        }

        /// <see cref="Lift{T1, T2, T3, T4}" />
        public static <#= Name #><TResult> Zip<T1, T2, T3, TResult>(
            this <#= Name #><T1> @this,
            <#= Name #><T2> second,
            <#= Name #><T3> third,
            Func<T1, T2, T3, TResult> resultSelector)
            <#+ WriteTypeConstraints("T1", "T2", "T3", "TResult"); #>
        {
            <#+ WriteNotNull(); #>
            <#+ WriteNotNull("second"); #>
            Require.NotNull(resultSelector, "resultSelector");
<#+ if (PostBindEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            Func<T1, <#= Name #><TResult>> g
                = t1 => second.Zip(third, (t2, t3) => resultSelector.Invoke(t1, t2, t3));

            return @this.Bind(g);
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5}" />
        public static <#= Name #><TResult> Zip<T1, T2, T3, T4, TResult>(
             this <#= Name #><T1> @this,
             <#= Name #><T2> second,
             <#= Name #><T3> third,
             <#= Name #><T4> fourth,
             Func<T1, T2, T3, T4, TResult> resultSelector)
            <#+ WriteTypeConstraints("T1", "T2", "T3", "T4", "TResult"); #>
        {
            <#+ WriteNotNull(); #>
            <#+ WriteNotNull("second"); #>
            Require.NotNull(resultSelector, "resultSelector");
<#+ if (PostBindEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            Func<T1, <#= Name #><TResult>> g
                = t1 => second.Zip(
                    third,
                    fourth,
                    (t2, t3, t4) => resultSelector.Invoke(t1, t2, t3, t4));

            return @this.Bind(g);
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5, T6}" />
        public static <#= Name #><TResult> Zip<T1, T2, T3, T4, T5, TResult>(
            this <#= Name #><T1> @this,
            <#= Name #><T2> second,
            <#= Name #><T3> third,
            <#= Name #><T4> fourth,
            <#= Name #><T5> fifth,
            Func<T1, T2, T3, T4, T5, TResult> resultSelector)
            <#+ WriteTypeConstraints("T1", "T2", "T3", "T4", "T5", "TResult"); #>
        {
            <#+ WriteNotNull(); #>
            <#+ WriteNotNull("second"); #>
            Require.NotNull(resultSelector, "resultSelector");
<#+ if (PostBindEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            Func<T1, <#= Name #><TResult>> g
                = t1 => second.Zip(
                    third,
                    fourth,
                    fifth,
                    (t2, t3, t4, t5) => resultSelector.Invoke(t1, t2, t3, t4, t5));

            return @this.Bind(g);
        }

        #endregion

        #region Query Expression Pattern

<#+ if (!PreferLinqDialect) { #>

<#+ if (HasFilter) { #>

        public static <#= Name #><TSource> Where<TSource>(
            this <#= Name #><TSource> @this,
            Func<TSource, bool> predicate)
            <#+ WriteTypeConstraints("TSource"); #>
        {
            <#+ WriteNotNull(); #>
<#+ if (PostFilterEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            return @this.<#= FilterName #>(predicate);
        }

<#+ } // T4: End of HasFilter. #>

        public static <#= Name #><TResult> Select<TSource, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, TResult> selector)
            <#+ WriteTypeConstraints("TSource", "TResult"); #>
        {
            <#+ WriteNotNull(); #>
<#+ if (PostMapEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.<#= MapName #>(selector);
        }

<#+ } // T4: End of !PreferLinqDialect. #>

        /// <remarks>
        /// Kind of generalisation of Zip (liftM2).
        /// </remarks>
        public static <#= Name #><TResult> SelectMany<TSource, TMiddle, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, <#= Name #><TMiddle>> valueSelectorM,
            Func<TSource, TMiddle, TResult> resultSelector)
            <#+ WriteTypeConstraints("TSource", "TMiddle", "TResult"); #>
        {
            <#+ WriteNotNull(); #>
            Require.NotNull(valueSelectorM, "valueSelectorM");
            Require.NotNull(resultSelector, "resultSelector");
<#+ if (PostBindEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.Bind(
                _ => valueSelectorM.Invoke(_).<#= MapName #>(
                    middle => resultSelector.Invoke(_, middle)));
        }

<#+ if (HasJoin) { #>

        public static <#= Name #><TResult> Join<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector)
            <#+ WriteTypeConstraints("TSource", "TInner", "TKey", "TResult"); #>
        {
            <#+ WriteNotNull(); #>
<#+ if (IsNullable) { #>
            Contract.Requires(inner != null);
<#+ } #>
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(resultSelector != null);
<#+ if (PostJoinEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.Join(
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                EqualityComparer<TKey>.Default);
        }

        public static <#= Name #><TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, <#= Name #><TInner>, TResult> resultSelector)
            <#+ WriteTypeConstraints("TSource", "TInner", "TKey", "TResult"); #>
        {
            <#+ WriteNotNull(); #>
<#+ if (IsNullable) { #>
            Contract.Requires(inner != null);
<#+ } #>
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(resultSelector != null);
<#+ if (PostGroupJoinEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.GroupJoin(
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                EqualityComparer<TKey>.Default);
        }

<#+ } // T4: End of HasJoin. #>

        #endregion

        #region LINQ extensions

<#+ if (HasJoin) { #>

        public static <#= Name #><TResult> Join<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
            <#+ WriteTypeConstraints("TSource", "TInner", "TKey", "TResult"); #>
        {
<#+ if (IsNullable) { #>
            Acknowledge.Object(@this);
            Contract.Requires(inner != null);
<#+ } #>
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(resultSelector != null);
<#+ if (PostJoinEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return JoinCore(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                comparer ?? EqualityComparer<TKey>.Default);
        }

        public static <#= Name #><TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, <#= Name #><TInner>, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
            <#+ WriteTypeConstraints("TSource", "TInner", "TKey", "TResult"); #>
        {
<#+ if (IsNullable) { #>
            Acknowledge.Object(@this);
            Contract.Requires(inner != null);
<#+ } #>
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(resultSelector != null);
<#+ if (PostGroupJoinEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return GroupJoinCore(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                comparer ?? EqualityComparer<TKey>.Default);
        }


        private static <#= Name #><TResult> JoinCore<TSource, TInner, TKey, TResult>(
            <#= Name #><TSource> seq,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
            <#+ WriteTypeConstraints("TSource", "TInner", "TKey", "TResult"); #>
        {
            <#+ WriteNotNull("seq"); #>
            Require.NotNull(resultSelector, "resultSelector");
<#+ if (IsNullable) { #>
            Contract.Requires(inner != null);
<#+ } #>
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(comparer != null);
<#+ if (PostMapEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            var keyLookupM = GetKeyLookup(inner, outerKeySelector, innerKeySelector, comparer);

            return from outerValue in seq
                   from innerValue in keyLookupM.Invoke(outerValue).Then(inner)
                   select resultSelector.Invoke(outerValue, innerValue);
        }

        private static <#= Name #><TResult> GroupJoinCore<TSource, TInner, TKey, TResult>(
            <#= Name #><TSource> seq,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, <#= Name #><TInner>, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
            <#+ WriteTypeConstraints("TSource", "TInner", "TKey", "TResult"); #>
        {
            <#+ WriteNotNull("seq"); #>
            Require.NotNull(resultSelector, "resultSelector");
<#+ if (IsNullable) { #>
            Contract.Requires(inner != null);
<#+ } #>
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(comparer != null);
<#+ if (PostMapEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            var keyLookupM = GetKeyLookup(inner, outerKeySelector, innerKeySelector, comparer);

            return from outerValue in seq
                   select resultSelector.Invoke(outerValue, keyLookupM.Invoke(outerValue).Then(inner));
        }

        private static Func<TSource, <#= Name #><TKey>> GetKeyLookup<TSource, TInner, TKey>(
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            IEqualityComparer<TKey> comparer)
            <#+ WriteTypeConstraints("TSource", "TInner", "TKey"); #>
        {
            <#+ WriteNotNull("inner"); #>
            Require.NotNull(outerKeySelector, "outerKeySelector");
            Require.NotNull(comparer, "comparer");
            Contract.Requires(innerKeySelector != null);
            Contract.Ensures(Contract.Result<Func<TSource, <#= Name #><TKey>>>() != null);

            return source =>
            {
                TKey outerKey = outerKeySelector.Invoke(source);

                return inner.<#= MapName #>(innerKeySelector).<#= FilterName #>(_ => comparer.Equals(_, outerKey));
            };
        }

<#+ } // T4: End of HasJoin. #>

        #endregion
    } // End of <#= Name #>.
<#+
    } // T4: End of EmitMonadExtensions().
} // T4: End of MonadTemplate.

#>