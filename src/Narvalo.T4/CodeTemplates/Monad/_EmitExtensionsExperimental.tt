<#+

public partial class MonadTemplate
{
    protected void EmitExtensionsExperimental()
    {
#>
    // Provides EXPERIMENTAL extension methods for <#= Name #><T<#= RTDecl #>>.
    // - Coalesce (dubious)
    // - GroupJoin
    // - If (dubious)
    // - Zip (dubious)
    // T4: EmitExtensionsExperimental().
    public static partial class <#= ExtensionsClsName #>
    {
        // This ought to be a purely static method: Monad.Zip(first, second).
        public static <#= Name #><(T1, T2)<#= RTDecl #>> Zip<T1, T2<#= RTDecl #>>(
            this <#= Name #><T1<#= RTDecl #>> @this,
            <#= Name #><T2<#= RTDecl #>> other)
        {
            <#+ WriteNotNull(); #>
            return @this.ZipWith(other, ValueTuple.Create);
        }

<#+ if (HasZero) { #>
        public static <#= Name #><TResult> If<TSource, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, bool> predicate,
            <#= Name #><TResult> thenResult)
        {
            <#+ WriteNotNull(); #>
            Require.NotNull(predicate, nameof(predicate));
            return @this.Bind(val => predicate(val) ? thenResult : <#= Name #><TResult>.<#= ZeroName #>);
        }

<#+ } // T4: End of HasZero. #>
        public static <#= Name #><TResult<#= RTDecl #>> Coalesce<TSource, TResult<#= RTDecl #>>(
            this <#= Name #><TSource<#= RTDecl #>> @this,
            Func<TSource, bool> predicate,
            <#= Name #><TResult<#= RTDecl #>> thenResult,
            <#= Name #><TResult<#= RTDecl #>> elseResult)
        {
            <#+ WriteNotNull(); #>
            Require.NotNull(predicate, nameof(predicate));
            return @this.Bind(val => predicate(val) ? thenResult : elseResult);
        }
<#+ if (HasJoin) { #>

        public static <#= Name #><TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, <#= Name #><TInner>, TResult> resultSelector)
            => @this.GroupJoin(
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                null);

        public static <#= Name #><TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, <#= Name #><TInner>, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
        {
            <#+ WriteNotNull(); #>
            <#+ WriteNotNull("inner"); #>
            Require.NotNull(resultSelector, nameof(resultSelector));
            Require.NotNull(outerKeySelector, nameof(outerKeySelector));
            Require.NotNull(innerKeySelector, nameof(innerKeySelector));

            var lookup = GetKeyLookup(inner, innerKeySelector, comparer);
            Func<TSource, <#= Name #><TInner>> selector = outer => lookup(outerKeySelector(outer));

            return @this.Select(outer => resultSelector(outer, selector(outer)));
        }
<#+ } // T4: End of HasJoin. #>
    }
<#+
    } // T4: End of EmitExtensionsExtras().
} // T4: End of MonadTemplate.

#>