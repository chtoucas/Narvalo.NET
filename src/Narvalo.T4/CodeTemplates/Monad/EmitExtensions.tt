<#+

public partial class MonadTemplate
{
    protected void EmitExtensions()
    {
        // If we re-enable type constraints, we should also check HasTypeConstraints.
        bool zipViaBind = true;
#>
    /// <summary>
    /// Provides extension methods for <see cref="<#= Name #>{T<#= RTDecl #>}"/>.
    /// </summary>
    // T4: EmitExtensions().
    public static partial class <#= ExtensionsClsName #>
    {
<#+ if (!DisableFlatten) { #>
        /// <summary>
        /// Removes one level of structure, projecting its bound value into the outer level.
        /// </summary>
        public static <#= Name #><T<#= RTDecl #>> Flatten<T<#= RTDecl #>>(this <#= Name #><<#= Name #><T<#= RTDecl #>><#= RTDecl #>> @this)
            => <#= Name #><T<#= RTDecl #>>.μ(@this);

<#+ } // End of DisableFlatten #>
        /// <seealso cref="Gather{TSource, TResult<#= RTDecl #>}" />
        public static <#= Name #><TResult<#= RTDecl #>> Apply<TSource, TResult<#= RTDecl #>>(
            this <#= Name #><Func<TSource, TResult><#= RTDecl #>> @this,
            <#= Name #><TSource<#= RTDecl #>> value)
        {
            <#+ WriteNotNull("value"); #>
            return value.Gather(@this);
        }

        /// <seealso cref="Apply{TSource, TResult<#= RTDecl #>}(<#= Name #>{Func{TSource, TResult}<#= RTDecl #>}, <#= Name #>{TSource<#= RTDecl #>})" />
        public static <#= Name #><TResult<#= RTDecl #>> Gather<TSource, TResult<#= RTDecl #>>(
            this <#= Name #><TSource<#= RTDecl #>> @this,
            <#= Name #><Func<TSource, TResult><#= RTDecl #>> applicative)
        {
            <#+ WriteNotNull(); #>
            <#+ WriteNotNull("applicative"); #>
            return applicative.Bind(func => @this.Select(func));
        }

        public static <#= Name #><TResult<#= RTDecl #>> ReplaceBy<TSource, TResult<#= RTDecl #>>(
            this <#= Name #><TSource<#= RTDecl #>> @this,
            TResult value)
        {
            <#+ WriteNotNull(); #>
            return @this.Select(_ => value);
        }

        public static <#= Name #><TResult<#= RTDecl #>> ContinueWith<TSource, TResult<#= RTDecl #>>(
            this <#= Name #><TSource<#= RTDecl #>> @this,
            <#= Name #><TResult<#= RTDecl #>> other)
        {
            <#+ WriteNotNull(); #>
            return @this.Bind(_ => other);
        }

        public static <#= Name #><TSource<#= RTDecl #>> PassBy<TSource, TOther<#= RTDecl #>>(
            this <#= Name #><TSource<#= RTDecl #>> @this,
            <#= Name #><TOther<#= RTDecl #>> other)
        {
            <#+ WriteNotNull(); #>
            return @this.ZipWith(other, (arg, _) => arg);
        }

        public static <#= Name #><unit<#= RTDecl #>> Skip<TSource<#= RTDecl #>>(this <#= Name #><TSource<#= RTDecl #>> @this)
        {
            <#+ WriteNotNull(); #>

<#+ if (HasRightGenerics) { #>
            return @this.ReplaceBy(unit.Default);
<#+ } else { #>
            return @this.ContinueWith(<#= Name #>.Unit);
<#+ } #>
        }

        #region ZipWith()

        /// <seealso cref="<#= Name #>.Lift{T1, T2, TResult<#= RTDecl #>}"/>
        public static <#= Name #><TResult<#= RTDecl #>> ZipWith<T1, T2, TResult<#= RTDecl #>>(
            this <#= Name #><T1<#= RTDecl #>> @this,
            <#= Name #><T2<#= RTDecl #>> second,
            Func<T1, T2, TResult> zipper)
        {
            <#+ WriteNotNull(); #>
            <#+ WriteNotNull("second"); #>
            Require.NotNull(zipper, nameof(zipper));

<#+ if (zipViaBind) { #>
            return @this.Bind(
                arg1 => second.Select(
                    arg2 => zipper(arg1, arg2)));
<#+ } else { #>
            Func<T1, Func<T2, TResult>> selector
                = arg1 => arg2 => zipper(arg1, arg2);

            return second.Gather(
                @this.Select(selector));
<#+ } #>
        }

        /// <seealso cref="<#= Name #>.Lift{T1, T2, T3, TResult<#= RTDecl #>}"/>
        public static <#= Name #><TResult<#= RTDecl #>> ZipWith<T1, T2, T3, TResult<#= RTDecl #>>(
            this <#= Name #><T1<#= RTDecl #>> @this,
            <#= Name #><T2<#= RTDecl #>> second,
            <#= Name #><T3<#= RTDecl #>> third,
            Func<T1, T2, T3, TResult> zipper)
        {
            <#+ WriteNotNull(); #>
            <#+ WriteNotNull("second"); #>
            <#+ WriteNotNull("third"); #>
            Require.NotNull(zipper, nameof(zipper));

<#+ if (zipViaBind) { #>
            // This is the same as:
            // > return @this.Bind(
            // >     arg1 => second.Bind(
            // >        arg2 => third.Select(
            // >            arg3 => zipper(arg1, arg2, arg3))));
            // but faster if ZipWith is locally shadowed.
            return @this.Bind(
                arg1 => second.ZipWith(
                    third, (arg2, arg3) => zipper(arg1, arg2, arg3)));
<#+ } else { #>
            Func<T1, Func<T2, Func<T3, TResult>>> selector
                = arg1 => arg2 => arg3 => zipper(arg1, arg2, arg3);

            return third.Gather(
                second.Gather(
                    @this.Select(selector)));
<#+ } #>
        }

        /// <seealso cref="<#= Name #>.Lift{T1, T2, T3, T4, TResult<#= RTDecl #>}"/>
        public static <#= Name #><TResult<#= RTDecl #>> ZipWith<T1, T2, T3, T4, TResult<#= RTDecl #>>(
             this <#= Name #><T1<#= RTDecl #>> @this,
             <#= Name #><T2<#= RTDecl #>> second,
             <#= Name #><T3<#= RTDecl #>> third,
             <#= Name #><T4<#= RTDecl #>> fourth,
             Func<T1, T2, T3, T4, TResult> zipper)
        {
            <#+ WriteNotNull(); #>
            <#+ WriteNotNull("second"); #>
            <#+ WriteNotNull("third"); #>
            <#+ WriteNotNull("fourth"); #>
            Require.NotNull(zipper, nameof(zipper));

<#+ if (zipViaBind) { #>
            // > return @this.Bind(
            // >     arg1 => second.Bind(
            // >         arg2 => third.Bind(
            // >             arg3 => fourth.Select(
            // >                 arg4 => zipper(arg1, arg2, arg3, arg4)))));
            return @this.Bind(
                arg1 => second.ZipWith(
                    third,
                    fourth,
                    (arg2, arg3, arg4) => zipper(arg1, arg2, arg3, arg4)));
<#+ } else { #>
            Func<T1, Func<T2, Func<T3, Func<T4, TResult>>>> selector
                = arg1 => arg2 => arg3 => arg4 => zipper(arg1, arg2, arg3, arg4);

            return fourth.Gather(
                third.Gather(
                    second.Gather(
                        @this.Select(selector))));
<#+ } #>
        }

        /// <seealso cref="<#= Name #>.Lift{T1, T2, T3, T4, T5, TResult<#= RTDecl #>}"/>
        public static <#= Name #><TResult<#= RTDecl #>> ZipWith<T1, T2, T3, T4, T5, TResult<#= RTDecl #>>(
            this <#= Name #><T1<#= RTDecl #>> @this,
            <#= Name #><T2<#= RTDecl #>> second,
            <#= Name #><T3<#= RTDecl #>> third,
            <#= Name #><T4<#= RTDecl #>> fourth,
            <#= Name #><T5<#= RTDecl #>> fifth,
            Func<T1, T2, T3, T4, T5, TResult> zipper)
        {
            <#+ WriteNotNull(); #>
            <#+ WriteNotNull("second"); #>
            <#+ WriteNotNull("third"); #>
            <#+ WriteNotNull("fourth"); #>
            <#+ WriteNotNull("fifth"); #>
            Require.NotNull(zipper, nameof(zipper));

<#+ if (zipViaBind) { #>
            // > return @this.Bind(
            // >     arg1 => second.Bind(
            // >         arg2 => third.Bind(
            // >             arg3 => fourth.Bind(
            // >                 arg4 => fifth.Select(
            // >                     arg5 => zipper(arg1, arg2, arg3, arg4, arg5))))));
            return @this.Bind(
                arg1 => second.ZipWith(
                    third,
                    fourth,
                    fifth,
                    (arg2, arg3, arg4, arg5) => zipper(arg1, arg2, arg3, arg4, arg5)));
<#+ } else { #>
            Func<T1, Func<T2, Func<T3, Func<T4, Func<T5, TResult>>>>> selector
                = arg1 => arg2 => arg3 => arg4 => arg5 => zipper(arg1, arg2, arg3, arg4, arg5);

            return fifth.Gather(
                fourth.Gather(
                    third.Gather(
                        second.Gather(
                            @this.Select(selector)))));
<#+ } #>
        }

        #endregion

        #region Resource management

        // Bind() with automatic resource management.
        public static <#= Name #><TResult<#= RTDecl #>> Using<TSource, TResult<#= RTDecl #>>(
            this <#= Name #><TSource<#= RTDecl #>> @this,
            Func<TSource, <#= Name #><TResult<#= RTDecl #>>> binder)
            where TSource : IDisposable
        {
            <#+ WriteNotNull(); #>
            Require.NotNull(binder, nameof(binder));
            return @this.Bind(val => { using (val) { return binder(val); } });
        }

        // Select() with automatic resource management.
        public static <#= Name #><TResult<#= RTDecl #>> Using<TSource, TResult<#= RTDecl #>>(
            this <#= Name #><TSource<#= RTDecl #>> @this,
            Func<TSource, TResult> selector)
            where TSource : IDisposable
        {
            <#+ WriteNotNull(); #>
            Require.NotNull(selector, nameof(selector));
            return @this.<#= MapName #>(val => { using (val) { return selector(val); } });
        }

        #endregion

        #region Query Expression Pattern

        public static <#= Name #><TResult<#= RTDecl #>> <#= MapName #><TSource, TResult<#= RTDecl #>>(
            this <#= Name #><TSource<#= RTDecl #>> @this,
            Func<TSource, TResult> selector)
        {
            <#+ WriteNotNull(); #>
            Require.NotNull(selector, nameof(selector));
            return @this.Bind(val => <#+ WriteFactory("TResult"); #>(selector(val)));
        }
<#+ if (HasZero) { #>

        public static <#= Name #><TSource<#= RTDecl #>> <#= FilterName #><TSource<#= RTDecl #>>(
            this <#= Name #><TSource<#= RTDecl #>> @this,
            Func<TSource, bool> predicate)
        {
            <#+ WriteNotNull(); #>
            Require.NotNull(predicate, nameof(predicate));
            return @this.Bind(val => predicate(val) ? <#+ WriteFactory("TSource"); #>(val) : <#= Name #><TSource<#= RTDecl #>>.<#= ZeroName #>);
        }
<#+ } // T4: End of HasZero. #>
<#+ if (!PreferLinqDialect) { #>
<#+ if (HasFilter) { #>
        public static <#= Name #><TSource<#= RTDecl #>> Where<TSource<#= RTDecl #>>(
            this <#= Name #><TSource<#= RTDecl #>> @this,
            Func<TSource, bool> predicate)
        {
            <#+ WriteNotNull(); #>

            return @this.<#= FilterName #>(predicate);
        }
<#+ } // T4: End of HasFilter. #>

        public static <#= Name #><TResult> Select<TSource, TResult<#= RTDecl #>>(
            this <#= Name #><TSource<#= RTDecl #>> @this,
            Func<TSource, TResult> selector)
        {
            <#+ WriteNotNull(); #>

            return @this.<#= MapName #>(selector);
        }
<#+ } // T4: End of !PreferLinqDialect. #>

        // Generalizes both Bind() and ZipWith<T1, T2, TResult>().
        public static <#= Name #><TResult<#= RTDecl #>> SelectMany<TSource, TMiddle, TResult<#= RTDecl #>>(
            this <#= Name #><TSource<#= RTDecl #>> @this,
            Func<TSource, <#= Name #><TMiddle<#= RTDecl #>>> selector,
            Func<TSource, TMiddle, TResult> resultSelector)
        {
            <#+ WriteNotNull(); #>
            Require.NotNull(selector, nameof(selector));
            Require.NotNull(resultSelector, nameof(resultSelector));

            return @this.Bind(
                val => selector(val).<#= MapName #>(
                    middle => resultSelector(val, middle)));
        }
<#+ if (HasJoin) { #>

        public static <#= Name #><TResult> Join<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector)
            => Join(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                EqualityComparer<TKey>.Default);

        public static <#= Name #><TResult> Join<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
        {
            <#+ WriteNotNull(); #>
            <#+ WriteNotNull("inner"); #>
            Require.NotNull(resultSelector, nameof(resultSelector));
            Require.NotNull(outerKeySelector, nameof(outerKeySelector));
            Require.NotNull(innerKeySelector, nameof(innerKeySelector));
            Require.NotNull(comparer, nameof(comparer));

            var lookup = GetKeyLookup(inner, innerKeySelector, comparer);
            Func<TSource, <#= Name #><TInner>> valueSelector = outer => lookup(outerKeySelector(outer));

            return @this.SelectMany(valueSelector, resultSelector);
        }

        public static <#= Name #><TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, <#= Name #><TInner>, TResult> resultSelector)
            => GroupJoin(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                EqualityComparer<TKey>.Default);

        public static <#= Name #><TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, <#= Name #><TInner>, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
        {
            <#+ WriteNotNull(); #>
            <#+ WriteNotNull("inner"); #>
            Require.NotNull(resultSelector, nameof(resultSelector));
            Require.NotNull(outerKeySelector, nameof(outerKeySelector));
            Require.NotNull(innerKeySelector, nameof(innerKeySelector));
            Require.NotNull(comparer, nameof(comparer));

            var lookup = GetKeyLookup(inner, innerKeySelector, comparer);
            Func<TSource, <#= Name #><TInner>> selector = outer => lookup(outerKeySelector(outer));

            return @this.Select(outer => resultSelector(outer, selector(outer)));
        }

        private static Func<TKey, <#= Name #><TInner>> GetKeyLookup<TInner, TKey>(
            <#= Name #><TInner> inner,
            Func<TInner, TKey> innerKeySelector,
            IEqualityComparer<TKey> comparer)
        {
<#+ if (IsNullable) { #>
            Debug.Assert(inner != null);
<#+ } #>
            Debug.Assert(innerKeySelector != null);
            Debug.Assert(comparer != null);

            return outerKey =>
                inner.Select(innerKeySelector)
                    .Where(innerKey => comparer.Equals(innerKey, outerKey))
                    .ContinueWith(inner);
        }
<#+ } // T4: End of HasJoin. #>

        #endregion
    }
<#+
    } // T4: End of EmitExtensions().
} // T4: End of MonadTemplate.

#>