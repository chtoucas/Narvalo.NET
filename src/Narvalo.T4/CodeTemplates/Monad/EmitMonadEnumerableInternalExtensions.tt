<#+

public partial class MonadTemplate
{
    protected void EmitMonadEnumerableInternalExtensions()
    {
#>
    // Provides default implementations for the extension methods for IEnumerable<<#= Name #><T<#= SuffixT #>>>.
    // You will certainly want to override them to improve performance.
    internal static partial class EnumerableExtensions
    {
<#+ if (!HasTypeConstraints) { #>

<#+ if (!SuppressMessage) { #>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "[GeneratedCode] This method has been overridden locally.")]
<#+ } #>
        internal static <#= Name #><IEnumerable<TSource><#= SuffixT #>> CollectImpl<TSource<#= SuffixT #>>(
            this IEnumerable<<#= Name #><TSource<#= SuffixT #>>> @this)
        {
            Demand.NotNull(@this);

            var seed = <#+ WriteFactory("IEnumerable<TSource>"); #>(Enumerable.Empty<TSource>());
            Func<IEnumerable<TSource>, TSource, IEnumerable<TSource>> append = (seq, item) => seq.Append(item);

            return @this.Aggregate(seed, <#= Name #>.Lift<IEnumerable<TSource>, TSource, IEnumerable<TSource><#= SuffixT #>>(append));
        }

<#+ } // T4: End of !HasTypeConstraints. #>

<#+ if (HasSum) { #>

<#+ if (!SuppressMessage) { #>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "[GeneratedCode] This method has been overridden locally.")]
<#+ } #>
        internal static <#= Name #><TSource> SumImpl<TSource>(
            this IEnumerable<<#= Name #><TSource>> @this)
            <#+ WriteTypeConstraints("TSource"); #>
        {
            Demand.NotNull(@this);

            return @this.Aggregate(<#= Name #><TSource>.<#= ZeroName #>, (m, n) => m.<#= PlusName #>(n));
        }
<#+ } // T4: End of HasSum. #>
    } // End of EnumerableExtensions - T4: EmitMonadEnumerableInternalExtensions().
<#+
    } // T4: End of EmitMonadEnumerableInternalExtensions().
} // T4: End of MonadTemplate.

#>