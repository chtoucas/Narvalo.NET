<#+

public partial class MonadTemplate
{
    protected void EmitLinqCore()
    {
#>
    // Provides extension methods for IEnumerable<T>.
    // We do not use the standard LINQ names to avoid any confusion.
    // - Select    -> SelectWith
    // - Where     -> WhereBy
    // - Zip       -> ZipWith
    // - Aggregate -> Reduce or Fold
    // T4: EmitLinqCore().
    public static partial class Sequence
    {
        public static <#= Name #><IEnumerable<TResult><#= RTDecl #>> SelectWith<TSource, TResult<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            Func<TSource, <#= Name #><TResult<#= RTDecl #>>> selector)
            => source.SelectWithImpl(selector);

        public static <#= Name #><IEnumerable<TSource><#= RTDecl #>> WhereBy<TSource<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            Func<TSource, <#= Name #><bool<#= RTDecl #>>> predicate)
            => source.WhereByImpl(predicate);

        public static <#= Name #><IEnumerable<TResult><#= RTDecl #>> ZipWith<TFirst, TSecond, TResult<#= RTDecl #>>(
            this IEnumerable<TFirst> source,
            IEnumerable<TSecond> second,
            Func<TFirst, TSecond, <#= Name #><TResult<#= RTDecl #>>> resultSelector)
            => source.ZipWithImpl(second, resultSelector);

        public static <#= Name #><TAccumulate<#= RTDecl #>> Fold<TSource, TAccumulate<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate<#= RTDecl #>>> accumulator)
            => source.FoldImpl(seed, accumulator);

        public static <#= Name #><TAccumulate<#= RTDecl #>> Fold<TSource, TAccumulate<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate<#= RTDecl #>>> accumulator,
            Func<<#= Name #><TAccumulate<#= RTDecl #>>, bool> predicate)
            => source.FoldImpl(seed, accumulator, predicate);

        public static <#= Name #><TSource<#= RTDecl #>> Reduce<TSource<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            Func<TSource, TSource, <#= Name #><TSource<#= RTDecl #>>> accumulator)
            => source.ReduceImpl(accumulator);

        public static <#= Name #><TSource<#= RTDecl #>> Reduce<TSource<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            Func<TSource, TSource, <#= Name #><TSource<#= RTDecl #>>> accumulator,
            Func<<#= Name #><TSource<#= RTDecl #>>, bool> predicate)
            => source.ReduceImpl(accumulator, predicate);
    }
<#+
    } // T4: End of EmitLinqCore().
} // T4: End of MonadTemplate.

#>
