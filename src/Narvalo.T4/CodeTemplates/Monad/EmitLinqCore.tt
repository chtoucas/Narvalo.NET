<#+

public partial class MonadTemplate
{
    protected void EmitLinqCore()
    {
#>
    // Provides extension methods for IEnumerable<T>.
    // T4: EmitLinqCore().
    public static partial class Qperators
    {
<#+ if (EmitExtendedLinq) { #>
        // NB: This operator is not composable.
        public static <#= Name #><IEnumerable<TSource><#= RTDecl #>> WhereBy<TSource<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            Func<TSource, <#= Name #><bool<#= RTDecl #>>> predicate)
        {
            <#+ WriteNotNull("source", true); #>
            Require.NotNull(predicate, nameof(predicate));
            return source.WhereByImpl(predicate);
        }

        // NB: This operator is not composable.
        public static <#= Name #><IEnumerable<TResult><#= RTDecl #>> SelectWith<TSource, TResult<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            Func<TSource, <#= Name #><TResult<#= RTDecl #>>> selector)
            => source.SelectWithImpl(selector);

        // NB: This operator is not composable.
        public static <#= Name #><IEnumerable<TResult><#= RTDecl #>> ZipWith<TFirst, TSecond, TResult<#= RTDecl #>>(
            this IEnumerable<TFirst> source,
            IEnumerable<TSecond> second,
            Func<TFirst, TSecond, <#= Name #><TResult<#= RTDecl #>>> resultSelector)
            => source.ZipWithImpl(second, resultSelector);

<#+ } // End of EmitExtendedLinq #>
        public static IEnumerable<TSource> WhereAny<TSource<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            Func<TSource, <#= Name #><bool<#= RTDecl #>>> predicate)
        {
            <#+ WriteNotNull("source", true); #>
            Require.NotNull(predicate, nameof(predicate));
            return source.WhereAnyImpl(predicate);
        }

        public static <#= Name #><TAccumulate<#= RTDecl #>> Fold<TSource, TAccumulate<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate<#= RTDecl #>>> accumulator)
        {
            <#+ WriteNotNull("source", true); #>
            Require.NotNull(accumulator, nameof(accumulator));
            return source.FoldImpl(seed, accumulator);
        }

        public static <#= Name #><TAccumulate<#= RTDecl #>> Fold<TSource, TAccumulate<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate<#= RTDecl #>>> accumulator,
            Func<<#= Name #><TAccumulate<#= RTDecl #>>, bool> predicate)
        {
            <#+ WriteNotNull("source", true); #>
            Require.NotNull(accumulator, nameof(accumulator));
            Require.NotNull(predicate, nameof(predicate));
            return source.FoldImpl(seed, accumulator, predicate);
        }

        public static <#= Name #><TSource<#= RTDecl #>> Reduce<TSource<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            Func<TSource, TSource, <#= Name #><TSource<#= RTDecl #>>> accumulator)
        {
            <#+ WriteNotNull("source", true); #>
            Require.NotNull(accumulator, nameof(accumulator));
            return source.ReduceImpl(accumulator);
        }

        public static <#= Name #><TSource<#= RTDecl #>> Reduce<TSource<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            Func<TSource, TSource, <#= Name #><TSource<#= RTDecl #>>> accumulator,
            Func<<#= Name #><TSource<#= RTDecl #>>, bool> predicate)
        {
            <#+ WriteNotNull("source", true); #>
            Require.NotNull(accumulator, nameof(accumulator));
            Require.NotNull(predicate, nameof(predicate));
            return source.ReduceImpl(accumulator, predicate);
        }
    }
<#+
    } // T4: End of EmitLinqCore().
} // T4: End of MonadTemplate.

#>
