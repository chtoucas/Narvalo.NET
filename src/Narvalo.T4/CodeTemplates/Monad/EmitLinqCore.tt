<#+

public partial class MonadTemplate
{
    protected void EmitLinqCore()
    {
#>
    // Provides extension methods for IEnumerable<T> and IEnumerable<<#= Name #><T<#= RTDecl #>>>.
    // T4: EmitLinqCore().
    public static partial class Aperators
    {
        public static IEnumerable<TSource> CollectAny<TSource<#= RTDecl #>>(
            this IEnumerable<<#= Name #><TSource<#= RTDecl #>>> source)
        {
            <#+ WriteNotNull("source", true); #>
            return source.CollectAnyImpl();
        }
<#+ if (HasSum) { #>

        public static <#= Name #><TSource> Sum<TSource>(this IEnumerable<<#= Name #><TSource>> source)
            => source.SumImpl();
<#+ } // T4: End of HasSum. #>

        public static IEnumerable<TResult> SelectAny<TSource, TResult<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            Func<TSource, <#= Name #><TResult<#= RTDecl #>>> selector)
        {
            <#+ WriteNotNull("source", true); #>
            Require.NotNull(selector, nameof(selector));
            return source.SelectAnyImpl(selector);
        }

        public static IEnumerable<TSource> WhereAny<TSource<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            Func<TSource, <#= Name #><bool<#= RTDecl #>>> predicate)
        {
            <#+ WriteNotNull("source", true); #>
            Require.NotNull(predicate, nameof(predicate));
            return source.WhereAnyImpl(predicate);
        }

        public static <#= Name #><TAccumulate<#= RTDecl #>> Fold<TSource, TAccumulate<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate<#= RTDecl #>>> accumulator)
        {
            <#+ WriteNotNull("source", true); #>
            Require.NotNull(accumulator, nameof(accumulator));
            return source.FoldImpl(seed, accumulator);
        }

        public static <#= Name #><TAccumulate<#= RTDecl #>> Fold<TSource, TAccumulate<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate<#= RTDecl #>>> accumulator,
            Func<<#= Name #><TAccumulate<#= RTDecl #>>, bool> predicate)
        {
            <#+ WriteNotNull("source", true); #>
            Require.NotNull(accumulator, nameof(accumulator));
            Require.NotNull(predicate, nameof(predicate));
            return source.FoldImpl(seed, accumulator, predicate);
        }

        public static <#= Name #><TSource<#= RTDecl #>> Reduce<TSource<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            Func<TSource, TSource, <#= Name #><TSource<#= RTDecl #>>> accumulator)
        {
            <#+ WriteNotNull("source", true); #>
            Require.NotNull(accumulator, nameof(accumulator));
            return source.ReduceImpl(accumulator);
        }

        public static <#= Name #><TSource<#= RTDecl #>> Reduce<TSource<#= RTDecl #>>(
            this IEnumerable<TSource> source,
            Func<TSource, TSource, <#= Name #><TSource<#= RTDecl #>>> accumulator,
            Func<<#= Name #><TSource<#= RTDecl #>>, bool> predicate)
        {
            <#+ WriteNotNull("source", true); #>
            Require.NotNull(accumulator, nameof(accumulator));
            Require.NotNull(predicate, nameof(predicate));
            return source.ReduceImpl(accumulator, predicate);
        }
    }
<#+
    } // T4: End of EmitLinqCore().
} // T4: End of MonadTemplate.

#>
