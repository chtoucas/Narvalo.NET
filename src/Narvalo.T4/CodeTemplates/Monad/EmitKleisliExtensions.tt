<#+

public partial class MonadTemplate
{
    public void EmitKleisliExtensions()
    {
#>
    /// <content>
    /// Provides extension methods for <see cref="Func{T}"/> in the Kleisli category.
    /// </content>
    public static partial class FuncExtensions
    {
        #region Basic Monad functions (Prelude)

<#+ if (!HasTypeConstraints) { #>

        /// <remarks>
        /// Named <c>mapM</c> in Haskell parlance. Same as <c>forM</c> with its arguments flipped.
        /// </remarks>
        public static <#= Name #><IEnumerable<TResult>> Map<TSource, TResult>(
            this Func<TSource, <#= Name #><TResult>> @this,
            IEnumerable<TSource> seq)
        {
            Demand.Object(@this);
            Demand.NotNull(seq);
<#+ if (IsNullable) { #>
            Ensures(Result<<#= Name #><IEnumerable<TResult>>>() != null);
<#+ } #>

            return seq.ForEachCore(@this);
        }

<#+ } // T4: End of !HasTypeConstraints. #>

        /// <remarks>
        /// Named <c>=&lt;&lt;</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><TResult> Invoke<TSource, TResult>(
            this Func<TSource, <#= Name #><TResult>> @this,
            <#= Name #><TSource> value)
            <#+ WriteTypeConstraints("TSource", "TResult"); #>
        {
            Demand.Object(@this);
            <#+ WriteNotNull("value"); #>
<#+ if (PostBindEnsuresSome) { #>
            Ensures(Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return value.Bind(@this);
        }

        /// <remarks>
        /// Named <c>&gt;=&gt;</c> in Haskell parlance.
        /// </remarks>
        public static Func<TSource, <#= Name #><TResult>> Compose<TSource, TMiddle, TResult>(
            this Func<TSource, <#= Name #><TMiddle>> @this,
            Func<TMiddle, <#= Name #><TResult>> funM)
            <#+ WriteTypeConstraints("TSource", "TMiddle", "TResult"); #>
        {
            <#+ WriteNotNull(true); #>
            Demand.NotNull(funM);
            Ensures(Result<Func<TSource, <#= Name #><TResult>>>() != null);

            return _ => @this.Invoke(_).Bind(funM);
        }

        /// <remarks>
        /// Named <c>&lt;=&lt;</c> in Haskell parlance.
        /// </remarks>
        public static Func<TSource, <#= Name #><TResult>> ComposeBack<TSource, TMiddle, TResult>(
            this Func<TMiddle, <#= Name #><TResult>> @this,
            Func<TSource, <#= Name #><TMiddle>> funM)
            <#+ WriteTypeConstraints("TSource", "TMiddle", "TResult"); #>
        {
            Demand.Object(@this);
            Require.NotNull(funM, nameof(funM));
            Ensures(Result<Func<TSource, <#= Name #><TResult>>>() != null);

            return _ => funM.Invoke(_).Bind(@this);
        }

        #endregion
    } // End of FuncExtensions.
<#+
    } // T4: End of EmitKleisliExtensions().
} // T4: End of MonadTemplate.

#>