<#@ include file="$(T4NarvaloTemplates)\Monad.tt" once="true" #><#+

public partial class MonadTemplate
{
    public void EmitKleisliExtensions()
    {
#>
    /// <content>
    /// Provides extension methods for <see cref="Func{T}"/> that depend on the <see cref="<#= Name #>{T}"/> class.
    /// </content>
    public static partial class FuncExtensions
    {
        #region Basic Monad functions (Prelude)

        /// <remarks>
        /// Named <c>=&lt;&lt;</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><TResult> Invoke<TSource, TResult>(
            this Func<TSource, <#= Name #><TResult>> @this,
            <#= Name #><TSource> value)
<#+ WriteTypeConstraints("TSource", "TResult"); #>
        {
            Acknowledge.Object(@this);
<#+ WriteNotNull("value"); #>
<#+ if (IsNullable && BindEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return value.Bind(@this);
        }

        /// <remarks>
        /// Named <c>&gt;=&gt;</c> in Haskell parlance.
        /// </remarks>
        public static Func<TSource, <#= Name #><TResult>> Compose<TSource, TMiddle, TResult>(
            this Func<TSource, <#= Name #><TMiddle>> @this,
            Func<TMiddle, <#= Name #><TResult>> funM)
<#+ WriteTypeConstraints("TSource", "TMiddle", "TResult"); #>
        {
<#+ WriteObjectNotNull(true); #>
            Contract.Requires(funM != null);
            Contract.Ensures(Contract.Result<Func<TSource, <#= Name #><TResult>>>() != null);

            return _ => @this.Invoke(_).Bind(funM);
        }

        /// <remarks>
        /// Named <c>&lt;=&lt;</c> in Haskell parlance.
        /// </remarks>
        public static Func<TSource, <#= Name #><TResult>> ComposeBack<TSource, TMiddle, TResult>(
            this Func<TMiddle, <#= Name #><TResult>> @this,
            Func<TSource, <#= Name #><TMiddle>> funM)
<#+ WriteTypeConstraints("TSource", "TMiddle", "TResult"); #>
        {
            Acknowledge.Object(@this);
            Require.NotNull(funM, "funM");
            Contract.Ensures(Contract.Result<Func<TSource, <#= Name #><TResult>>>() != null);

            return _ => funM.Invoke(_).Bind(@this);
        }

        #endregion
    } // End of the class FuncExtensions.
<#+
    } // T4: End of EmitKleisliExtensions().
}

#>