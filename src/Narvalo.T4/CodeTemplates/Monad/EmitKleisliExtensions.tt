<#+

public partial class MonadTemplate
{
    public void EmitKleisliExtensions(bool haslinq)
    {
#>
    // Provides extension methods for Func<T> in the Kleisli category.
    public static partial class Func
    {
        #region Basic Monad functions (Prelude)

<#+ if (!HasTypeConstraints) { #>

        // Named "forM" in Haskell parlance. Same as Map (mapM) with its arguments flipped.
        public static <#= Name #><IEnumerable<TResult>> ForEach<TSource, TResult>(
            this Func<TSource, <#= Name #><TResult>> @this,
            IEnumerable<TSource> seq)
        {
            Expect.NotNull(@this);
            Expect.NotNull(seq);
<#+ if (IsNullable) { #>
            Warrant.NotNull<<#= Name #><IEnumerable<TResult>>>();
<#+ } #>

<#+ if (haslinq) { #>
            return seq.Map(@this);
<#+ } else { #>
            return seq.Select(@this).EmptyIfNull().Collect();
<#+ } #>
        }

<#+ } // T4: End of !HasTypeConstraints. #>

        // Named "=<<" in Haskell parlance. Same as Bind (>>=) with its arguments flipped.
        public static <#= Name #><TResult> Invoke<TSource, TResult>(
            this Func<TSource, <#= Name #><TResult>> @this,
            <#= Name #><TSource> value)
            <#+ WriteTypeConstraints("TSource", "TResult"); #>
        {
            Expect.NotNull(@this);
            <#+ WriteNotNull("value"); #>
<#+ if (PostBindEnsuresSome) { #>
            Warrant.NotNull<<#= Name #><TResult>>();
<#+ } #>

            return value.Bind(@this);
        }

        // Named ">=>" in Haskell parlance.
        public static Func<TSource, <#= Name #><TResult>> Compose<TSource, TMiddle, TResult>(
            this Func<TSource, <#= Name #><TMiddle>> @this,
            Func<TMiddle, <#= Name #><TResult>> thunk)
            <#+ WriteTypeConstraints("TSource", "TMiddle", "TResult"); #>
        {
            <#+ WriteNotNull(true); #>
            Expect.NotNull(thunk);
            Warrant.NotNull<Func<TSource, <#= Name #><TResult>>>();

            return _ => @this.Invoke(_).Bind(thunk);
        }

        // Named "<=<" in Haskell parlance.
        public static Func<TSource, <#= Name #><TResult>> ComposeBack<TSource, TMiddle, TResult>(
            this Func<TMiddle, <#= Name #><TResult>> @this,
            Func<TSource, <#= Name #><TMiddle>> thunk)
            <#+ WriteTypeConstraints("TSource", "TMiddle", "TResult"); #>
        {
            Expect.NotNull(@this);
            Require.NotNull(thunk, nameof(thunk));
            Warrant.NotNull<Func<TSource, <#= Name #><TResult>>>();

            return _ => thunk.Invoke(_).Bind(@this);
        }

        #endregion
    } // End of Func - T4: EmitKleisliExtensions().
<#+
    } // T4: End of EmitKleisliExtensions().
} // T4: End of MonadTemplate.

#>