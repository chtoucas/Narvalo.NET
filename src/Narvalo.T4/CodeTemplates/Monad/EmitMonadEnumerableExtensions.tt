<#+

public partial class MonadTemplate
{
    protected void EmitMonadEnumerableExtensions()
    {
#>
    /// <content>
    /// Provides extension methods for <see cref="IEnumerable{T}"/> where <c>T</c> is a <see cref="<#= Name #>{S}"/>.
    /// </content>
    public static partial class EnumerableExtensions
    {
        #region Basic Monad functions (Prelude)

<#+ if (!HasTypeConstraints) { #>

        /// <remarks>
        /// Named <c>sequence</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><IEnumerable<TSource>> Collect<TSource>(
            this IEnumerable<<#= Name #><TSource>> @this)
        {
            Expect.NotNull(@this);
<#+ if (IsNullable) { #>
            Ensures(Result<<#= Name #><IEnumerable<TSource>>>() != null);
<#+ } #>

            return @this.CollectCore();
        }

<#+ } // T4: End of !HasTypeConstraints. #>

        #endregion

<#+ if (HasSum) { #>

        #region Generalisations of list functions (Prelude)

        /// <remarks>
        /// Named <c>msum</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><TSource> Sum<TSource>(
            this IEnumerable<<#= Name #><TSource>> @this)
            <#+ WriteTypeConstraints("TSource"); #>
        {
            Expect.NotNull(@this);
<#+ if (IsNullable) { #>
            Ensures(Result<<#= Name #><TSource>>() != null);
<#+ } #>

            return @this.SumCore();
        }

        #endregion

<#+ } // T4: End of HasSum. #>
    } // End of EnumerableExtensions.
<#+
    } // T4: End of EmitMonadEnumerableExtensions().
} // T4: End of MonadTemplate.

#>