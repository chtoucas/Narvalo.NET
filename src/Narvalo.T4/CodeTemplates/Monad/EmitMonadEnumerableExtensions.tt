<#+

public partial class MonadTemplate
{
    protected void EmitMonadEnumerableExtensions()
    {
#>
    // Provides extension methods for IEnumerable<<#= Name #><T<#= SuffixT #>>>.
    public static partial class <#= Name #>Sequence
    {
        #region Basic Monad functions

<#+ if (!HasTypeConstraints) { #>

        // Named "sequence" in Haskell parlance.
        public static <#= Name #><IEnumerable<TSource><#= SuffixT #>> Collect<TSource<#= SuffixT #>>(
            this IEnumerable<<#= Name #><TSource<#= SuffixT #>>> @this)
        {
            Expect.NotNull(@this);
<#+ if (IsNullable) { #>
            Warrant.NotNull<<#= Name #><IEnumerable<TSource><#= SuffixT #>>>();
<#+ } #>

            return @this.CollectImpl();
        }

<#+ } // T4: End of !HasTypeConstraints. #>

        #endregion

<#+ if (HasSum) { #>

        #region Generalisations of list functions

        // Named "msum" in Haskell parlance.
        public static <#= Name #><TSource> Sum<TSource>(
            this IEnumerable<<#= Name #><TSource>> @this)
            <#+ WriteTypeConstraints("TSource"); #>
        {
            Expect.NotNull(@this);
<#+ if (IsNullable) { #>
            Warrant.NotNull<<#= Name #><TSource>>();
<#+ } #>

            return @this.SumImpl();
        }

        #endregion

<#+ } // T4: End of HasSum. #>
    } // End of Sequence - T4: EmitMonadEnumerableExtensions().
<#+
    } // T4: End of EmitMonadEnumerableExtensions().
} // T4: End of MonadTemplate.

#>