<#+

public partial class MonadTemplate
{
    protected void EmitHelpers()
    {
#>
<#+ if (HelpersIsStruct) { #>
    // Provides a set of static methods involving <see cref="<#= Name #>{T<#= RTDecl #>}"/>.
<#+ } else { #>
    /// <summary>
    /// Provides a set of static methods involving <see cref="<#= Name #>{T<#= RTDecl #>}"/>.
    /// </summary>
<#+ } #>
    // T4: EmitHelpers().
    public <#= HelpersTypeDecl #> <#= Name #>
    {
<#+ if (!HasRightGenerics) { #>
        /// <summary>
        /// The unique object of type <c><#= Name #>&lt;Unit&gt;</c>.
        /// </summary>
        private static readonly <#= Name #><unit> s_Unit = <#= ReturnName #>(unit.Default);

        /// <summary>
        /// Gets the unique object of type <c><#= Name #>&lt;Unit&gt;</c>.
        /// </summary>
        public static <#= Name #><unit> Unit => s_Unit;

<#+ } #>
<#+ if (HasZero) { #>
        /// <summary>
        /// Gets the zero for <see cref="<#= Name #>{T}.Bind"/>.
        /// </summary>
        public static <#= Name #><unit> <#= ZeroName #> => <#= Name #><unit>.<#= ZeroName #>;

<#+ } // End of HasZero #>
<#+ if (!DisableReturn) { #>
        /// <summary>
        /// Obtains an instance of the <see cref="<#= Name #>{T<#= RTDecl #>}"/> class for the specified value.
        /// </summary>
        /// <typeparam name="T">The underlying type of <paramref name="value"/>.</typeparam>
<#+ foreach (var typeParam in RightGenerics) { #>
        /// <typeparam name="<#= typeParam #>"></typeparam>
<#+ } #>
        /// <param name="value">A value to be wrapped into an object of type <see cref="<#= Name #>{T<#= RTDecl #>}"/>.</param>
        /// <returns>An instance of the <see cref="<#= Name #>{T<#= RTDecl #>}"/> class for the specified value.</returns>
        public static <#= Name #><T<#= RTDecl #>> <#= ReturnName #><T<#= RTDecl #>>(T value) => <#= Name #><T<#= RTDecl #>>.<#= EtaName #>(value);

<#+ } // End of !DisableReturn #>
<#+ if (HasZero) { #>
        public static <#= Name #><unit> Guard(bool predicate) => predicate ? Unit : <#= ZeroName #>;

<#+ } // T4: End of HasZero. #>
        public static <#= Name #><IEnumerable<TSource><#= RTDecl #>> Repeat<TSource<#= RTDecl #>>(
            <#= Name #><TSource<#= RTDecl #>> source,
            int count)
        {
            <#+ WriteNotNull("source"); #>
            Require.Range(count >= 0, nameof(count));
            return source.<#= MapName #>(val => Enumerable.Repeat(val, count));
        }

        public static <#= Name #><IEnumerable<T><#= RTDecl #>> Collect<T<#= RTDecl #>>(
            IEnumerable<<#= Name #><T<#= RTDecl #>>> source)
        {
            <#+ WriteNotNull("source", true); #>
            return source.CollectImpl();
        }

        public static <#= Name #><IEnumerable<T><#= RTDecl #>> Filter<T<#= RTDecl #>>(
            IEnumerable<T> source,
            Func<T, <#= Name #><bool<#= RTDecl #>>> predicate)
        {
            <#+ WriteNotNull("source", true); #>
            Require.NotNull(predicate, nameof(predicate));
            return source.WhereImpl(predicate);
        }

        public static <#= Name #><IEnumerable<TResult><#= RTDecl #>> Map<T, TResult<#= RTDecl #>>(
            IEnumerable<T> source,
            Func<T, <#= Name #><TResult<#= RTDecl #>>> selector)
            => <#= Name #>.Collect(source.Select(selector));

        public static <#= Name #><IEnumerable<TResult><#= RTDecl #>> Zip<T1, T2, TResult<#= RTDecl #>>(
            IEnumerable<T1> first,
            IEnumerable<T2> second,
            Func<T1, T2, <#= Name #><TResult<#= RTDecl #>>> resultSelector)
            => <#= Name #>.Collect(first.Zip(second, resultSelector));

        #region Lift()

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T<#= RTDecl #>}" /> values.
        /// </summary>
        /// <seealso cref="<#= ExtensionsClsName #>.Select{T, TResult<#= RTDecl #>}" />
        public static Func<<#= Name #><T<#= RTDecl #>>, <#= Name #><TResult<#= RTDecl #>>> Lift<T, TResult<#= RTDecl #>>(
            Func<T, TResult> func)
            => arg =>
            {
                <#+ WriteNotNull("arg"); #>
                return arg.<#= MapName #>(func);
            };

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T<#= RTDecl #>}" /> values.
        /// </summary>
        /// <seealso cref="<#= ExtensionsClsName #>.Zip{T1, T2, TResult<#= RTDecl #>}"/>
        public static Func<<#= Name #><T1<#= RTDecl #>>, <#= Name #><T2<#= RTDecl #>>, <#= Name #><TResult<#= RTDecl #>>>
            Lift<T1, T2, TResult<#= RTDecl #>>(Func<T1, T2, TResult> func)
            => (arg1, arg2) =>
            {
                <#+ WriteNotNull("arg1"); #>
                return arg1.Zip(arg2, func);
            };

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T<#= RTDecl #>}" /> values.
        /// </summary>
        /// <seealso cref="<#= ExtensionsClsName #>.Zip{T1, T2, T3, TResult<#= RTDecl #>}"/>
        public static Func<<#= Name #><T1<#= RTDecl #>>, <#= Name #><T2<#= RTDecl #>>, <#= Name #><T3<#= RTDecl #>>, <#= Name #><TResult<#= RTDecl #>>>
            Lift<T1, T2, T3, TResult<#= RTDecl #>>(Func<T1, T2, T3, TResult> func)
            => (arg1, arg2, arg3) =>
            {
                <#+ WriteNotNull("arg1"); #>
                return arg1.Zip(arg2, arg3, func);
            };

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T<#= RTDecl #>}" /> values.
        /// </summary>
        /// <seealso cref="<#= ExtensionsClsName #>.Zip{T1, T2, T3, T4, TResult<#= RTDecl #>}"/>
        public static Func<<#= Name #><T1<#= RTDecl #>>, <#= Name #><T2<#= RTDecl #>>, <#= Name #><T3<#= RTDecl #>>, <#= Name #><T4<#= RTDecl #>>, <#= Name #><TResult<#= RTDecl #>>>
            Lift<T1, T2, T3, T4, TResult<#= RTDecl #>>(
            Func<T1, T2, T3, T4, TResult> func)
            => (arg1, arg2, arg3, arg4) =>
            {
                <#+ WriteNotNull("arg1"); #>
                return arg1.Zip(arg2, arg3, arg4, func);
            };

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T<#= RTDecl #>}" /> values.
        /// </summary>
        /// <seealso cref="<#= ExtensionsClsName #>.Zip{T1, T2, T3, T4, T5, TResult<#= RTDecl #>}"/>
        public static Func<<#= Name #><T1<#= RTDecl #>>, <#= Name #><T2<#= RTDecl #>>, <#= Name #><T3<#= RTDecl #>>, <#= Name #><T4<#= RTDecl #>>, <#= Name #><T5<#= RTDecl #>>, <#= Name #><TResult<#= RTDecl #>>>
            Lift<T1, T2, T3, T4, T5, TResult<#= RTDecl #>>(
            Func<T1, T2, T3, T4, T5, TResult> func)
            => (arg1, arg2, arg3, arg4, arg5) =>
            {
                <#+ WriteNotNull("arg1"); #>
                return arg1.Zip(arg2, arg3, arg4, arg5, func);
            };

        #endregion
    }
<#+
    } // T4: End of EmitHelpers().
} // T4: End of MonadTemplate.

#>