<#+

public partial class MonadTemplate
{
    protected void EmitHelpers()
    {
#>
    // Provides a set of static methods for <#= Name #><T<#= RTDecl #>>.
    // T4: EmitHelpers().
    public <#= HelpersTypeDecl #> <#= Name #>
    {
<#+ if (!HasRightGenerics) { #>
        /// <summary>
        /// The unique object of type <c><#= Name #>&lt;Unit&gt;</c>.
        /// </summary>
        private static readonly <#= Name #><global::Narvalo.Fx.Unit> s_Unit = <#= ReturnName #>(global::Narvalo.Fx.Unit.Default);

        /// <summary>
        /// Gets the unique object of type <c><#= Name #>&lt;Unit&gt;</c>.
        /// </summary>
        public static <#= Name #><global::Narvalo.Fx.Unit> Unit => s_Unit;

<#+ } #>
<#+ if (HasZero) { #>
        /// <summary>
        /// Gets the zero for <see cref="<#= Name #>{T}.Bind"/>.
        /// </summary>
        public static <#= Name #><global::Narvalo.Fx.Unit> <#= ZeroName #> => <#= Name #><global::Narvalo.Fx.Unit>.<#= ZeroName #>;

<#+ } // End of HasZero #>
        /// <summary>
        /// Obtains an instance of the <see cref="<#= Name #>{T<#= RTDecl #>}"/> class for the specified value.
        /// </summary>
        /// <typeparam name="T">The underlying type of <paramref name="value"/>.</typeparam>
<#+ foreach (var typeParam in RightGenerics) { #>
        /// <typeparam name="<#= typeParam #>"></typeparam>
<#+ } #>
        /// <param name="value">A value to be wrapped into an object of type <see cref="<#= Name #>{T<#= RTDecl #>}"/>.</param>
        /// <returns>An instance of the <see cref="<#= Name #>{T<#= RTDecl #>}"/> class for the specified value.</returns>
        public static <#= Name #><T<#= RTDecl #>> <#= ReturnName #><T<#= RTDecl #>>(T value)
            => <#= Name #><T<#= RTDecl #>>.η(value);

        /// <summary>
        /// Removes one level of structure, projecting its bound value into the outer level.
        /// </summary>
        public static <#= Name #><T<#= RTDecl #>> Flatten<T<#= RTDecl #>>(<#= Name #><<#= Name #><T<#= RTDecl #>><#= RTDecl #>> square)
            => <#= Name #><T<#= RTDecl #>>.μ(square);
<#+ if (HasZero) { #>

        public static <#= Name #><Unit> Guard(bool predicate) => predicate ? Unit : <#= ZeroName #>;
<#+ } // T4: End of HasZero. #>

        #region Lift()

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T<#= RTDecl #>}" /> values.
        /// </summary>
        /// <seealso cref="<#= ExtensionsClsName #>.Select{T, TResult<#= RTDecl #>}" />
        public static Func<<#= Name #><T<#= RTDecl #>>, <#= Name #><TResult<#= RTDecl #>>> Lift<T, TResult<#= RTDecl #>>(
            Func<T, TResult> func)
            => arg =>
            {
                <#+ WriteNotNull("arg"); #>
                return arg.<#= MapName #>(func);
            };

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T<#= RTDecl #>}" /> values.
        /// </summary>
        public static Func<<#= Name #><T1<#= RTDecl #>>, <#= Name #><T2<#= RTDecl #>>, <#= Name #><TResult<#= RTDecl #>>>
            Lift<T1, T2, TResult<#= RTDecl #>>(Func<T1, T2, TResult> func)
            => (arg1, arg2) =>
            {
                <#+ WriteNotNull("arg1"); #>
                return arg1.Zip(arg2, func);
            };

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T<#= RTDecl #>}" /> values.
        /// </summary>
        public static Func<<#= Name #><T1<#= RTDecl #>>, <#= Name #><T2<#= RTDecl #>>, <#= Name #><T3<#= RTDecl #>>, <#= Name #><TResult<#= RTDecl #>>>
            Lift<T1, T2, T3, TResult<#= RTDecl #>>(Func<T1, T2, T3, TResult> func)
            => (arg1, arg2, arg3) =>
            {
                <#+ WriteNotNull("arg1"); #>
                return arg1.Zip(arg2, arg3, func);
            };

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T<#= RTDecl #>}" /> values.
        /// </summary>
        public static Func<<#= Name #><T1<#= RTDecl #>>, <#= Name #><T2<#= RTDecl #>>, <#= Name #><T3<#= RTDecl #>>, <#= Name #><T4<#= RTDecl #>>, <#= Name #><TResult<#= RTDecl #>>>
            Lift<T1, T2, T3, T4, TResult<#= RTDecl #>>(
            Func<T1, T2, T3, T4, TResult> func)
            => (arg1, arg2, arg3, arg4) =>
            {
                <#+ WriteNotNull("arg1"); #>
                return arg1.Zip(arg2, arg3, arg4, func);
            };

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T<#= RTDecl #>}" /> values.
        /// </summary>
        public static Func<<#= Name #><T1<#= RTDecl #>>, <#= Name #><T2<#= RTDecl #>>, <#= Name #><T3<#= RTDecl #>>, <#= Name #><T4<#= RTDecl #>>, <#= Name #><T5<#= RTDecl #>>, <#= Name #><TResult<#= RTDecl #>>>
            Lift<T1, T2, T3, T4, T5, TResult<#= RTDecl #>>(
            Func<T1, T2, T3, T4, T5, TResult> func)
            => (arg1, arg2, arg3, arg4, arg5) =>
            {
                <#+ WriteNotNull("arg1"); #>
                return arg1.Zip(arg2, arg3, arg4, arg5, func);
            };

        #endregion
    }
<#+
    } // T4: End of EmitHelpers().
} // T4: End of MonadTemplate.

#>