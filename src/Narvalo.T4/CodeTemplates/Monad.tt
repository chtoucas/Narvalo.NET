<#@ assembly name="$(T4NarvaloLibrary)" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="Narvalo.T4" #>
<#@ include file="Monad\EmitHelpers.tt" #>
<#@ include file="Monad\EmitExtensions.tt" #>
<#@ include file="Monad\EmitKleisli.tt" #>
<#@ include file="Monad\EmitEnumerableInternal.tt" #>
<#@ include file="Monad\EmitLinqCore.tt" #>
<#@ include file="Monad\EmitLinqInternal.tt" #>
<#@ include file="Monad\EmitComonadHelpers.tt" #>
<#@ include file="Monad\_EmitMethodsExperimental.tt" #>
<#@ include file="Monad\_EmitExtensionsExperimental.tt" #><#+

// WARNINGs:
// This templates depend on:
// - The class Narvalo.Require (Narvalo.Core).
// - The struct Narvalo.Applicative.Unit (Narvalo.Fx).
// - The LINQ operator Append() (Narvalo.Linq or System.Linq).

public abstract partial class MonadTemplate : _MonadTemplate
{
    protected MonadTemplate(TextTransformation parent) : base(parent) { }

    protected bool EmitExperimental { get; set; }

    protected override void WriteContent()
    {
        EmitMonad();
    }

    /// <summary>
    /// Generates a Monad.
    /// </summary>
    public void EmitMonad()
    {
#>
<#+ if (!Namespace.StartsWith("Narvalo.")) { #>
using Require = global::Narvalo.Require;
<#+ } #>
using unit = global::Narvalo.Applicative.Unit;

namespace <#= Namespace #>
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Linq;

    using <#= InternalNamespace #>;
<#+
        if (EmitExperimental) {
            WriteLine();
            EmitMethodsExperimental();
        }

        WriteLine();
        EmitHelpers();

        WriteLine();
        EmitExtensions();

        if (EmitExperimental) {
            WriteLine();
            EmitExtensionsExperimental();
        }

        WriteLine();
        EmitKleisli();
#>
}

namespace <#= InternalNamespace #>
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;

    using Narvalo.Linq;
    using <#= Namespace #>;
<#+
        WriteLine();
        EmitEnumerableInternal();
#>
}
<#+
        if (EmitLinq) {
            WriteLine();

            EmitLinqExtensions();
        }
    } // T4: End of EmitMonad().

    /// <summary>
    /// Generates a Comonad.
    /// </summary>
    public void EmitComonad()
    {
#>
namespace <#= Namespace #>
{
<#+ EmitComonadHelpers(); #>
}
<#+
    } // T4: End of EmitComonad().

    /// <summary>
    /// Generates the LINQ extensions.
    /// </summary>
    public void EmitLinqExtensions()
    {
#>
namespace <#= LinqNamespace #>
{
    using System;
    using System.Collections.Generic;

    using <#= Namespace #>;
    using <#= InternalNamespace #>;

<#+ EmitLinqCore(); #>
}

namespace <#= InternalNamespace #>
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Diagnostics.CodeAnalysis;
<#+ if (HasSum) { #>
    using System.Linq;
<#+ } #>

    using <#= Namespace #>;

<#+ EmitLinqInternal(); #>
}
<#+
    } // T4: End of EmitLinqExtensions().
} // T4: End of MonadTemplate.

#>
