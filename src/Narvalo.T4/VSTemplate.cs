// Copyright (c) Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

namespace Narvalo.T4
{
    using System;
    using System.IO;
    using System.Reflection;
    using System.Runtime.Remoting.Messaging;

    using EnvDTE;
    using Microsoft.VisualStudio.TextTemplating;

    /// <summary>
    /// Provides a base class for generated text transformations hosted inside Visual Studio.
    /// </summary>
    public abstract class VSTemplate : TextTransformation
    {
        // We use four spaces (no tabs) for indentation.
        private const string INDENT = "    ";

        private readonly Lazy<DTE> _dte;
        private readonly Lazy<ITextTemplatingEngineHost> _host;

        private string _name;
        private string _namespace;

        /// <summary>
        /// Initializes a new instance of the <see cref="VSTemplate"/> class.
        /// </summary>
        protected VSTemplate()
        {
            _host = new Lazy<ITextTemplatingEngineHost>(() => HostFactory(this));
            _dte = new Lazy<DTE>(DTEFactory);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VSTemplate"/> class.
        /// </summary>
        /// <param name="parent">The parent text transformation.</param>
        protected VSTemplate(TextTransformation parent)
        {
            if (parent == null)
            {
                throw new ArgumentNullException("parent");
            }

            _host = new Lazy<ITextTemplatingEngineHost>(() => HostFactory(parent));
            _dte = new Lazy<DTE>(DTEFactory);
        }

        /// <summary>
        /// Gets the DTE (Development Tools Environment) service.
        /// </summary>
        /// <value>The DTE (Development Tools Environment) service.</value>
        protected DTE DTE
        {
            get { return _dte.Value; }
        }

        /// <summary>
        /// Gets the templating engine host.
        /// </summary>
        /// <value>The templating engine host.</value>
        protected ITextTemplatingEngineHost VSHost
        {
            get { return _host.Value; }
        }

        /// <summary>
        /// Gets or sets the name of the template.
        /// </summary>
        /// <remarks>If none was specified, it is infered from the template's filename.</remarks>
        protected string Name
        {
            get
            {
                if (_name == null)
                {
                    _name = InferName();
                }

                return _name;
            }

            set
            {
                if (String.IsNullOrWhiteSpace(value))
                {
                    throw new ArgumentException("The name can not be null or blank.");
                }

                _name = value;
            }
        }

        /// <summary>
        /// Gets or sets the name of the namespace.
        /// </summary>
        /// <remarks>If none was specified, it is infered from the template location.</remarks>
        protected string Namespace
        {
            get
            {
                if (_namespace == null)
                {
                    _namespace = InferNamespace();
                }

                return _namespace;
            }

            set
            {
                if (String.IsNullOrWhiteSpace(value))
                {
                    throw new ArgumentException("The namespace can not be null or blank.");
                }

                _namespace = value;
            }
        }

        /// <summary>
        /// Initializes the templating class then generates the output text of the transformation.
        /// </summary>
        /// <returns>The output text of the transformation.</returns>
        public string Execute()
        {
            Initialize();

            return TransformText();
        }

        protected virtual void WriteHeader()
        {
            var format =
@"// Copyright (c) Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
//
// Runtime Version: {0}
// </auto-generated>
//------------------------------------------------------------------------------";

            WriteLine(format, Environment.Version);
        }

        /// <summary>
        /// Increases the indent by the default indent.
        /// </summary>
        protected void PushIndent()
        {
            PushIndent(INDENT);
        }

        /// <summary>
        /// Writes a new line directly into the generated output.
        /// </summary>
        protected void WriteLine()
        {
            WriteLine(String.Empty);
        }

        private static ITextTemplatingEngineHost HostFactory(TextTransformation transformation)
        {
            Type transformationType = transformation.GetType();
            PropertyInfo hostProperty = transformationType.GetProperty("Host");

            if (hostProperty == null)
            {
                throw new NotSupportedException(
                    "Unable to access the templating engine host. "
                    + "Please make sure your template includes hostspecific=\"true\" "
                    + "attribute in the <#@ template #> directive.");
            }

            return (ITextTemplatingEngineHost)hostProperty.GetValue(transformation, null);
        }

        private static string InferNamespace()
        {
            return CallContext.LogicalGetData("NamespaceHint").ToString();
        }

        private string InferName()
        {
            return Path.GetFileNameWithoutExtension(VSHost.TemplateFile);
        }

        private DTE DTEFactory()
        {
            var serviceProvider = (IServiceProvider)VSHost;
            if (serviceProvider == null)
            {
                throw new NotSupportedException("Host property is null.");
            }

            var dte = serviceProvider.GetService(typeof(DTE)) as DTE;
            if (dte == null)
            {
                throw new NotSupportedException("Unable to retrieve the DTE (Development Tools Environment) service.");
            }

            return dte;
        }
    }
}
