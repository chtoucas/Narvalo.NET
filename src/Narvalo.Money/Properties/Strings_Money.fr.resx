<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Argument_CannotCompare" xml:space="preserve">
    <value>Les deux objets ne peuvent être comparés.</value>
  </data>
  <data name="Argument_CurrencyCodeIsNull" xml:space="preserve">
    <value>Le code alphabétique d'une devise ne peut pas être null.</value>
  </data>
  <data name="Argument_IncompleteRatioArray" xml:space="preserve">
    <value>La somme de tous les rapports doit être égale à 100.</value>
  </data>
  <data name="Argument_InvalidCurrencyCode" xml:space="preserve">
    <value>Le code alphabétique '{0}' d'une devise doit être composé d'exactement trois caractères ASCII tous en majuscule.</value>
  </data>
  <data name="Argument_InvalidCurrencyMinorUnits" xml:space="preserve">
    <value>Le nombre décimales après la virgule '{0}' doit être null, ou plus grand que zéro (inclus) et plus petit que 28 (inclus).</value>
  </data>
  <data name="Argument_NeutralCultureNotSupported" xml:space="preserve">
    <value>Cette méthode n'accepte pas de culture neutre en entrée; reçue '{0}'.</value>
  </data>
  <data name="CurrencyMismatch" xml:space="preserve">
    <value>Devise incompatible; attendue '{0}', reçue '{1}'.</value>
  </data>
  <data name="CurrencyNotFound_DefaultMessage" xml:space="preserve">
    <value>Devise inconnue.</value>
  </data>
  <data name="CurrencyNotFound_UnknownCode" xml:space="preserve">
    <value>Le code alphabétique '{0}' ne correspond pas à une devise reconnue.</value>
  </data>
  <data name="InvalidConversion_MoneyIsNotNormalized" xml:space="preserve">
    <value>Le montant n'est pas normalisé. Veuillez vérifier au préalable que la propriété IsNormalized a la valeur true.</value>
  </data>
  <data name="InvalidConversion_MoneyIsNotRounded" xml:space="preserve">
    <value>Le montant n'est pas arrondi. Veuillez vérifier au préalable que la propriété IsRounded a la valeur true.</value>
  </data>
  <data name="InvalidOperation_EmptySequence" xml:space="preserve">
    <value>La séquence est vide.</value>
  </data>
  <data name="Money_BadFormatSpecifier" xml:space="preserve">
    <value>La spécification de format '{0}' n'est pas valide; les valeurs admissibles prennent la forme "Axx" où A est égal à  'N', 'n', 'L', 'l', 'R', 'r', 'G' ou 'g', et xx est un entier facultatif allant de 0 à 99 (sans zéro en tête).</value>
  </data>
  <data name="Money_BadMainSpecifier" xml:space="preserve">
    <value>La spécification de format '{0}' n'est pas valide; les valeurs admissibles sont  'N', 'n', 'L', 'l', 'R', 'r', 'G' et 'g'.</value>
  </data>
  <data name="Money_BadPrecisionSpecifier" xml:space="preserve">
    <value>La spécification de précision '{0}' n'est pas valide; les valeurs admissibles vont de 0 à 99 (sans zéro en tête).</value>
  </data>
  <data name="NotSupported_CurrencyActivation" xml:space="preserve">
    <value>Nous n'avons pas pu créer une devise de type '{0}'. Il s'agit d'une erreur interne: le type ne définit pas de propriété Unit retournant un objet du type en question.</value>
  </data>
  <data name="NotSupported_MinorCurrency" xml:space="preserve">
    <value>La devise '{0}' n'admet pas d'unité mineure. Veuillez vérifier au préalable que la propriété HasMinorCurrency a la valeur true.</value>
  </data>
</root>