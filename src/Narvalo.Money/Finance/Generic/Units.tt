<#@ template language="C#" debug="true" hostspecific="true" inherits="Iso4217Template" #>
<#@ output extension=".g.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(T4NarvaloLibrary)" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Narvalo.T4" #>
<#

// To avoid any breaking change, we include all currencies (withdrawn or not).

// Uncomment to debug:
//Debug = true;

bool firstSeen = true;

var currentCurrencies = ParseCurrent(@"..\..\..\..\data\ISO4217\A1.xml");
var legacyCurrencies = ParseLegacy(@"..\..\..\..\data\ISO4217\A3.xml");
var currencies = currentCurrencies.Concat(legacyCurrencies);

var codeSet = new HashSet<string>();

WriteHeader();

#>
// Below, the singleton implementation is taken from http://csharpindepth.com/Articles/General/Singleton.aspx.
namespace <#= Namespace #>
{
    using System;

    using Narvalo.Properties;

<#
    foreach (var currency in currencies.OrderBy(_ => _.Code))
    {
        if (codeSet.Contains(currency.Code))
        {
            continue;
        }

        codeSet.Add(currency.Code);
#>
    /// <summary>
    /// Represents the currency unit for the code "<#= currency.Code #>".
    /// </summary>
    <# WriteCompilerAttributes(); #>
<#
        if (firstSeen)
        {
            firstSeen = false;
        }
        else
        {
#>
    // We don't want to clutter the open cover report.
    [ExcludeFromCodeCoverage]
<#
        }
#>
    public sealed class <#= currency.Code #> : Currency<<#= currency.Code #>>
    {
<#
    var minorUnits = currency.IsLegacy ? "Currency.UnknownMinorUnits" : (currency.MinorUnits.HasValue ? currency.MinorUnits.Value.ToString() : "null");
#>
        private <#= currency.Code #>() : base(<#= minorUnits  #>) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="<#= currency.Code #>" /> class.
        /// </summary>
        public static <#= currency.Code #> Unit => Uniq.Instance;

        public static explicit operator <#= currency.Code #>(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(<#= currency.Code #> value) => value?.ToCurrency();

        public static <#= currency.Code #> FromCurrency(Currency value)
        {
            if (Name != value.Code)
            {
                throw new InvalidCastException(
                    Format.Current(Strings.CurrencyMismatch, Name, value.Code));
            }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly <#= currency.Code #> Instance = new <#= currency.Code #>();
        }
    }

<#
    }
#>
}
