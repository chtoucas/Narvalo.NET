<#@ template debug="true" hostspecific="true" #>
<#@ output extension=".g.cs" #><#+

    // NB: Documentation is almost blindly copied from Haskell.

    /* ========================================================================================== *
     * Fields
     * ========================================================================================== */

    bool _initialized = false;
    bool _headerWritten = false;
    
    string _name;
    string _namespace;
    string _linqNamespace;
    
    bool _hasPlus = false;
    bool _hasZero = false;
    bool _isNullable = true;
    string _plusName;
    bool _preferLinqDialect = true;
    bool _requireStruct = false;
    string _returnName = "Return";
    string _zeroName;

    /* ========================================================================================== *
     * Properties
     * ========================================================================================== */

    protected string Namespace
    {
        get
        {
            if (_namespace == null) {
                _namespace = InferNamespace_();
            }

            return _namespace;
        }

        set
        {
            if (String.IsNullOrEmpty(value)) {
                throw new ArgumentException();
            }

            _namespace = value;
        }
    }
    
    protected string LinqNamespace
    {
        get
        {
            if (_linqNamespace == null) {
                _linqNamespace = InferNamespace_();
            }

            return _linqNamespace;
        }

        set
        {
            if (String.IsNullOrEmpty(value)) {
                throw new ArgumentException();
            }

            _linqNamespace = value;
        }
    }

    protected string Name
    {
        get
        {
            if (_name == null) {
                _name = InferName_();
            }

            return _name;
        }

        set
        {
            if (String.IsNullOrEmpty(value)) {
                throw new ArgumentException();
            }

            _name = value;
        }
    }
    
    protected bool IsNullable { get { return _isNullable; } set { _isNullable = value; } }

    protected bool RequireStruct { get { return _requireStruct; } set { _requireStruct = value; } }
    
    protected bool HasPlus { get { return _hasPlus; } private set { _hasPlus = value; } }

    protected bool HasZero { get { return _hasZero; } private set { _hasZero = value; } }

    protected string ZeroName { 
        get 
        { 
            if (!HasZero) {
                throw new InvalidOperationException();
            }
            
            return _zeroName; 
        }  

        set
        {
            if (String.IsNullOrEmpty(value)) {
                throw new ArgumentException();
            }
            
            _zeroName = value;
        } 
    }
    
    protected string PlusName
    {
        get
        { 
            if (!HasPlus) {
                throw new InvalidOperationException();
            }

            return _plusName; 
        }

        set
        {
            if (String.IsNullOrEmpty(value)) {
                throw new ArgumentException();
            }
            
            _plusName = value;
        } 
    }

    protected bool PreferLinqDialect { 
        get { return _preferLinqDialect; }
        set { _preferLinqDialect = value; }
    }

    protected string FilterName
    {
        get 
        { 
            if (!HasZero) {
                throw new InvalidOperationException();
            }

            return PreferLinqDialect ? "Where" : "Filter";
        }
    }
    
    protected string MapName
    {
        get { return PreferLinqDialect ? "Select" : "Map"; }
    }
    
    protected string ReturnName
    {
        get { return _returnName; }

        set 
        {
            if (String.IsNullOrEmpty(value)) {
                throw new ArgumentException();
            }
            
            _returnName = value; 
        }
    }
    
    /* ========================================================================================== *
     * "Constructors"
     * ========================================================================================== */

    public void InitializeZero()
    {
        ThrowIfInitialized_();
        
        HasZero = true;
        ZeroName = "Zero";

        _initialized = true;
    }
    
    public void InitializePlus()
    {
        ThrowIfInitialized_();
        
        HasZero = true;
        ZeroName = "Zero";

        HasPlus = true;
        PlusName = "Plus";

        _initialized = true;
    }
    
    public void InitializeOr()
    {
        ThrowIfInitialized_();
        
        HasZero = true;
        ZeroName = "None";

        HasPlus = true;
        PlusName = "OrElse";

        _initialized = true;
    }
    
    /* ========================================================================================== *
     * Public Methods
     * ========================================================================================== */

    // EmitMonad -----------------------------------------------------------------------------------

    public void EmitMonad()
    {
        WriteHeader_();
#>

namespace <#= Namespace #> {
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Diagnostics.Contracts;
    using System.Linq;
    using Narvalo;      // For Require
    using Narvalo.Fx;   // For Unit

<#+ EmitCoreClass(); #>
<#+ NewLine_(); #>
<#+ EmitExtensions(); #>
<#+ NewLine_(); #>
<#+ EmitKleisliExtensions(); #>
}
<#+
    }

    // EmitComonad ---------------------------------------------------------------------------------
    
    public void EmitComonad()
    {
        WriteHeader_();
#>

namespace <#= Namespace #> {
    using System.Diagnostics.Contracts;

<#+ EmitCoreComonad(); #>
}
<#+
    }

    // EmitLinq ------------------------------------------------------------------------------------
    
    public void EmitLinq()
    {
        WriteHeader_();
#>

namespace <#= LinqNamespace #> {
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.Contracts;
    using System.Linq;
    using Narvalo;      // For Require
    using Narvalo.Fx;   // For Unit
<#+ if (Namespace != "Narvalo.Fx") { #>
    using <#= Namespace #>;
<#+ } #>
    using <#= LinqNamespace #>.Internal;

<#+ EmitEnumerableMonadExtensions(); #>
<#+ NewLine_(); #>
<#+ EmitEnumerableExtensions(); #>
}

namespace <#= LinqNamespace #>.Internal {
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.Contracts;
    using System.Linq;
    using Narvalo;		// For Require
    using Narvalo.Fx;	// For Unit
<#+ if (Namespace != "Narvalo.Fx") { #>
    using <#= Namespace #>;
<#+ } #>

<#+ NewLine_(); #>
<#+ EmitEnumerableMonadInternalExtensions(); #>
<#+ NewLine_(); #>
<#+ EmitEnumerableInternalExtensions(); #>
}
<#+
    }
    
    /* ========================================================================================== *
     * Protected Methods
     * ========================================================================================== */

    // EmitCoreClass -------------------------------------------------------------------------------

    protected void EmitCoreClass() 
    {
#>
    /// <summary>
    /// Provides a set of static methods and extension methods for <see cref="<#= Name #>{T}" />.
    /// </summary>
    public static partial class <#= Name #>
    {
        static readonly <#= Name #><Unit> Unit_ = <#= ReturnName #>(Narvalo.Fx.Unit.Single);
<#+ if (HasZero) { #>
        static readonly <#= Name #><Unit> <#= ZeroName #>_ = <#= Name #><Unit>.<#= ZeroName #>;
<#+ } #>

        /// <summary>
        /// Returns the unique object of type <c><#= Name #>&lt;Unit&gt;</c>.
        /// </summary>
        public static <#= Name #><Unit> Unit { get { return Unit_; } }

<#+ if (HasZero) { #>
        /*!
         * Named `mzero` in Haskell parlance.
         */

        /// <summary>
        /// Returns the zero of type <c><#= Name #>&lt;Unit&gt;.<#= ZeroName #></c>.
        /// </summary>
        public static <#= Name #><Unit> <#= ZeroName #> { get { return <#= ZeroName #>_; } }
<#+ } #>

        /*!
         * Named `return` in Haskell parlance.
         */

        /// <summary>
        /// Returns a new instance of <see cref="<#= Name #>{T}" />.
        /// </summary>
        public static <#= Name #><T> <#= ReturnName #><T>(T value)
<#+ StructConstraint_("T"); #>
        {
            return <#= Name #><T>.η(value);
        }
        
        #region Generalisations of list functions (Prelude)

        /*!
         * Named `join` in Haskell parlance.
         */

        /// <summary>
        /// Removes one level of structure, projecting its bound value into the outer level.
        /// </summary>
        public static <#= Name #><T> Flatten<T>(<#= Name #><<#= Name #><T>> square)
<#+ StructConstraint_("T"); #>
        {
            Contract.Requires(square != null);

            return <#= Name #><T>.μ(square);
        }

        #endregion

        #region Monadic lifting operators (Prelude)

        /*!
         * Named `liftM` in Haskell parlance.
         */

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T}" /> values.
        /// </summary>
        public static Func<<#= Name #><T>, <#= Name #><TResult>> Lift<T, TResult>(
            Func<T, TResult> fun)
<#+ StructConstraint_("T"); #>
<#+ StructConstraint_("TResult"); #>
        {
            return m =>
            {
<#+ if (!RequireStruct) { PushIndent("    "); NotNull_("m"); PopIndent(); }  #>
                return m.<#= MapName #>(fun);
            };
        }

        /*!
         * Named `liftM2` in Haskell parlance.
         */

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T}" /> values, scanning the 
        /// monadic arguments from left to right.
        /// </summary>
        public static Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><TResult>>
            Lift<T1, T2, TResult>(Func<T1, T2, TResult> fun)
<#+ StructConstraint_("T1"); #>
<#+ StructConstraint_("T2"); #>
<#+ StructConstraint_("TResult"); #>
        {
            return (m1, m2) => 
            {
<#+ if (!RequireStruct) { PushIndent("    "); NotNull_("m1"); PopIndent(); }  #>
                return m1.Zip(m2, fun);
            };
        }

        /*!
         * Named `liftM3` in Haskell parlance.
         */

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T}" /> values, scanning the 
        /// monadic arguments from left to right.
        /// </summary>
        public static Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><T3>, <#= Name #><TResult>>
            Lift<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> fun)
<#+ StructConstraint_("T1"); #>
<#+ StructConstraint_("T2"); #>
<#+ StructConstraint_("T3"); #>
<#+ StructConstraint_("TResult"); #>
        {
            return (m1, m2, m3) =>
            {
<#+ if (!RequireStruct) { PushIndent("    "); NotNull_("m1"); PopIndent(); }  #>
                return m1.Zip(m2, m3, fun);
            };
        }

        /*!
         * Named `liftM4` in Haskell parlance.
         */

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        public static Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><T3>, <#= Name #><T4>, <#= Name #><TResult>>
            Lift<T1, T2, T3, T4, TResult>(
            Func<T1, T2, T3, T4, TResult> fun)
<#+ StructConstraint_("T1"); #>
<#+ StructConstraint_("T2"); #>
<#+ StructConstraint_("T3"); #>
<#+ StructConstraint_("T4"); #>
<#+ StructConstraint_("TResult"); #>
        {
            return (m1, m2, m3, m4) =>
            {
<#+ if (!RequireStruct) { PushIndent("    "); NotNull_("m1"); PopIndent(); }  #>
                return m1.Zip(m2, m3, m4, fun);
            };
        }

        /*!
         * Named `liftM5` in Haskell parlance.
         */

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        public static Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><T3>, <#= Name #><T4>, <#= Name #><T5>, <#= Name #><TResult>>
            Lift<T1, T2, T3, T4, T5, TResult>(
            Func<T1, T2, T3, T4, T5, TResult> fun)
<#+ StructConstraint_("T1"); #>
<#+ StructConstraint_("T2"); #>
<#+ StructConstraint_("T3"); #>
<#+ StructConstraint_("T4"); #>
<#+ StructConstraint_("T5"); #>
<#+ StructConstraint_("TResult"); #>
        {
            return (m1, m2, m3, m4, m5) =>
            {
<#+ if (!RequireStruct) { PushIndent("    "); NotNull_("m1"); PopIndent(); }  #>
                return m1.Zip(m2, m3, m4, m5, fun);
            };
        }

        #endregion
    }
<#+
    }
    
    // EmitCoreComonad -----------------------------------------------------------------------------

    protected void EmitCoreComonad() 
    {
#>
    /*!
     * Comonad methods.
     */
    public static partial class <#= Name #>
    {
        /*!
         * Named `extract` in Haskell parlance.
         */
        public static T Extract<T>(<#= Name #><T> monad)
<#+ StructConstraint_("T"); #>
        {
            Contract.Requires(monad != null);

            return <#= Name #><T>.ε(monad);
        }

        /*!
         * Named `duplicate` in Haskell parlance.
         */
        public static <#= Name #><<#= Name #><T>> Duplicate<T>(<#= Name #><T> monad)
<#+ StructConstraint_("T"); #>
        {
            return <#= Name #><T>.δ(monad);
        }
    }
<#+
    }

    // EmitExtensions ------------------------------------------------------------------------------

    protected void EmitExtensions()
    {
#>
    /*!
     * Extensions methods for <#= Name #><T>.
     */
    public static partial class <#= Name #>
    {
        #region Basic Monad functions (Prelude)

        /*!
         * Named `fmap` in Haskell parlance.
         */
        public static <#= Name #><TResult> <#= MapName #><TSource, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, TResult> selector)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
<#+ NotNull_("selector"); #>

            return @this.Bind(_ => <#= Name #>.<#= ReturnName #>(selector.Invoke(_)));
        }

        /*!
         * Named `>>` in Haskell parlance.
         */
        public static <#= Name #><TResult> Then<TSource, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TResult> other)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>

            return @this.Bind(_ => other);
        }
        
        #endregion

        #region Generalisations of list functions (Prelude)

<#+ if (HasZero) { #>
        /*!
         * Named `mfilter` in Haskell parlance.
         */
        public static <#= Name #><TSource> <#= FilterName #><TSource>(
            this <#= Name #><TSource> @this,
            Func<TSource, bool> predicate)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>
<#+ NotNull_("predicate"); #>

            return @this.Bind(
                _ => predicate.Invoke(_) ? @this : <#= Name #><TSource>.<#= ZeroName #>);
        }
<#+ } #>

<#+ if (!RequireStruct) { #>

        /*!
         * Named `replicateM` in Haskell parlance.
         */
        public static <#= Name #><IEnumerable<TSource>> Repeat<TSource>(
            this <#= Name #><TSource> @this,
            int count)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>
            Require.GreaterThanOrEqualTo(count, 1, "count");

            return @this.<#= MapName #>(_ => Enumerable.Repeat(_, count));
        }
<#+ } #>
        
        #endregion

        #region Conditional execution of monadic expressions (Prelude)

<#+ if (HasZero) { #>
        /*!
         * Named `guard` in Haskell parlance.
         */
        [SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "this",
            Justification = "Extension method intended to be used in a fluent way.")]
        public static <#= Name #><Unit> Guard<TSource>(
            this <#= Name #><TSource> @this,
            bool predicate)
<#+ StructConstraint_("TSource"); #>
        {
            return predicate ? <#= Name #>.Unit : <#= Name #>.<#= ZeroName #>;
        }
<#+ } #>

        /*!
         * Named `when` in Haskell parlance.
         */
        [SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "this",
            Justification = "Extension method intended to be used in a fluent way.")]
        public static <#= Name #><Unit> When<TSource>(
            this <#= Name #><TSource> @this, 
            bool predicate, 
            Action action)
<#+ StructConstraint_("TSource"); #>
        {
            Require.NotNull(action, "action");

            if (predicate) {
                action.Invoke();
            }

            return <#= Name #>.Unit;
        }

        /*!
         * Named `unless` in Haskell parlance.
         */
        public static <#= Name #><Unit> Unless<TSource>(
            this <#= Name #><TSource> @this,
            bool predicate,
            Action action)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>
            Contract.Requires(action != null);

            return @this.When(!predicate, action);
        }

        #endregion

        #region Monadic lifting operators (Prelude)

        /// <see cref="Lift{T1, T2, T3}" />
        public static <#= Name #><TResult> Zip<TFirst, TSecond, TResult>(
            this <#= Name #><TFirst> @this,
            <#= Name #><TSecond> second,
            Func<TFirst, TSecond, TResult> resultSelector)
<#+ StructConstraint_("TFirst"); #>
<#+ StructConstraint_("TSecond"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
<#+ NotNull_("second"); #>
<#+ NotNull_("resultSelector"); #>

            return @this.Bind(v1 => second.<#= MapName #>(v2 => resultSelector.Invoke(v1, v2)));
        }

        /// <see cref="Lift{T1, T2, T3, T4}" />
        public static <#= Name #><TResult> Zip<T1, T2, T3, TResult>(
            this <#= Name #><T1> @this,
            <#= Name #><T2> second,
            <#= Name #><T3> third,
            Func<T1, T2, T3, TResult> resultSelector)
<#+ StructConstraint_("T1"); #>
<#+ StructConstraint_("T2"); #>
<#+ StructConstraint_("T3"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
<#+ NotNull_("second"); #>
<#+ NotNull_("resultSelector"); #>

            Func<T1, <#= Name #><TResult>> g
                = t1 => second.Zip(third, (t2, t3) => resultSelector.Invoke(t1, t2, t3));

            return @this.Bind(g);
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5}" />
        public static <#= Name #><TResult> Zip<T1, T2, T3, T4, TResult>(
             this <#= Name #><T1> @this,
             <#= Name #><T2> second,
             <#= Name #><T3> third,
             <#= Name #><T4> fourth,
             Func<T1, T2, T3, T4, TResult> resultSelector)
<#+ StructConstraint_("T1"); #>
<#+ StructConstraint_("T2"); #>
<#+ StructConstraint_("T3"); #>
<#+ StructConstraint_("T4"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
<#+ NotNull_("second"); #>
<#+ NotNull_("resultSelector"); #>

            Func<T1, <#= Name #><TResult>> g
                = t1 => second.Zip(
                    third,
                    fourth, 
                    (t2, t3, t4) => resultSelector.Invoke(t1, t2, t3, t4));

            return @this.Bind(g);
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5, T6}" />
        public static <#= Name #><TResult> Zip<T1, T2, T3, T4, T5, TResult>(
            this <#= Name #><T1> @this,
            <#= Name #><T2> second,
            <#= Name #><T3> third,
            <#= Name #><T4> fourth,
            <#= Name #><T5> fifth,
            Func<T1, T2, T3, T4, T5, TResult> resultSelector)
<#+ StructConstraint_("T1"); #>
<#+ StructConstraint_("T2"); #>
<#+ StructConstraint_("T3"); #>
<#+ StructConstraint_("T4"); #>
<#+ StructConstraint_("T5"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
<#+ NotNull_("second"); #>
<#+ NotNull_("resultSelector"); #>

            Func<T1, <#= Name #><TResult>> g
                = t1 => second.Zip(
                    third,
                    fourth, 
                    fifth,
                    (t2, t3, t4, t5) => resultSelector.Invoke(t1, t2, t3, t4, t5));

            return @this.Bind(g);
        }

        #endregion

        #region Query Expression Pattern

<#+ if (!PreferLinqDialect) { #>
<#+ if (HasZero) { #>
        public static <#= Name #><TSource> Where<TSource>(
            this <#= Name #><TSource> @this, 
            Func<TSource, bool> predicate)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>

            return @this.Filter(predicate);
        }
<#+ } #>

        public static <#= Name #><TResult> Select<TSource, TResult>(
            this <#= Name #><TSource> @this, 
            Func<TSource, TResult> selector)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>

            return @this.<#= MapName #>(selector);
        }
<#+ } #>

        /*!
         * Kind of generalisation of Zip (liftM2).
         */
        public static <#= Name #><TResult> SelectMany<TSource, TMiddle, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, <#= Name #><TMiddle>> valueSelectorM,
            Func<TSource, TMiddle, TResult> resultSelector)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TMiddle"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
<#+ NotNull_("valueSelectorM"); #>
<#+ NotNull_("resultSelector"); #>

            return @this.Bind(
                _ => valueSelectorM.Invoke(_).<#= MapName #>(
                    middle => resultSelector.Invoke(_, middle)));
        }

<#+ if (HasZero) { #>
        public static <#= Name #><TResult> Join<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TInner"); #>
<#+ StructConstraint_("TKey"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
            Contract.Requires(inner != null);
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(resultSelector != null);

            return @this.Join(
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                EqualityComparer<TKey>.Default);
        }

        public static <#= Name #><TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, <#= Name #><TInner>, TResult> resultSelector)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TInner"); #>
<#+ StructConstraint_("TKey"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
            Contract.Requires(inner != null);
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(resultSelector != null);

            return @this.GroupJoin(
                inner, 
                outerKeySelector,
                innerKeySelector, 
                resultSelector, 
                EqualityComparer<TKey>.Default);
        }
<#+ } #>

        #endregion
        
        #region Linq extensions

<#+ if (HasZero) { #>
        public static <#= Name #><TResult> Join<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TInner"); #>
<#+ StructConstraint_("TKey"); #>
<#+ StructConstraint_("TResult"); #>
        {
            Contract.Requires(@this != null);
            Contract.Requires(resultSelector != null);
            Contract.Requires(inner != null);
            Contract.Requires(outerKeySelector != null);

            return JoinCore_(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                comparer ?? EqualityComparer<TKey>.Default);
        }

        public static <#= Name #><TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, <#= Name #><TInner>, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TInner"); #>
<#+ StructConstraint_("TKey"); #>
<#+ StructConstraint_("TResult"); #>
        {
            Contract.Requires(@this != null);
            Contract.Requires(resultSelector != null);
            Contract.Requires(inner != null);
            Contract.Requires(outerKeySelector != null);

            return GroupJoinCore_(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                comparer ?? EqualityComparer<TKey>.Default);
        }
        
        static <#= Name #><TResult> JoinCore_<TSource, TInner, TKey, TResult>(
            <#= Name #><TSource> seq,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TInner"); #>
<#+ StructConstraint_("TKey"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ NotNull_("seq"); #>
<#+ NotNull_("resultSelector"); #>
            Contract.Requires(inner != null);
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(comparer != null);
            
            var keyLookupM = GetKeyLookup_(inner, outerKeySelector, innerKeySelector, comparer);

            return from outerValue in seq
                   from innerValue in keyLookupM.Invoke(outerValue).Then(inner)
                   select resultSelector.Invoke(outerValue, innerValue);
        }
        
        static <#= Name #><TResult> GroupJoinCore_<TSource, TInner, TKey, TResult>(
            <#= Name #><TSource> seq,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, <#= Name #><TInner>, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TInner"); #>
<#+ StructConstraint_("TKey"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ NotNull_("seq"); #>
<#+ NotNull_("resultSelector"); #>
            Contract.Requires(inner != null);
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(comparer != null);

            var keyLookupM = GetKeyLookup_(inner, outerKeySelector, innerKeySelector, comparer);

            return from outerValue in seq
                   select resultSelector.Invoke(outerValue, keyLookupM.Invoke(outerValue).Then(inner));
        }

        static Func<TSource, <#= Name #><TKey>> GetKeyLookup_<TSource, TInner, TKey>(
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            IEqualityComparer<TKey> comparer)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TInner"); #>
<#+ StructConstraint_("TKey"); #>
        {
<#+ NotNull_("inner"); #>
<#+ NotNull_("outerKeySelector"); #>
<#+ DebugNotNull_("comparer"); #>

            return source =>
            {
                TKey outerKey = outerKeySelector.Invoke(source);
            
                return inner.Select(innerKeySelector).Where(_ => comparer.Equals(_, outerKey));
            };
        }
<#+ } #>

        #endregion

        #region Non-standard extensions
        
        public static <#= Name #><TResult> Coalesce<TSource, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, bool> predicate,
            <#= Name #><TResult> then,
            <#= Name #><TResult> otherwise)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
<#+ NotNull_("predicate"); #>

            return @this.Bind(_ => predicate.Invoke(_) ? then : otherwise);
        }

<#+ if (HasZero) { #>
        public static <#= Name #><TResult> Then<TSource, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, bool> predicate,
            <#= Name #><TResult> other)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
            Contract.Requires(predicate != null);

            return @this.Coalesce(predicate, other, <#= Name #><TResult>.<#= ZeroName #>);
        }

        public static <#= Name #><TResult> Otherwise<TSource, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, bool> predicate,
            <#= Name #><TResult> other)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
            Contract.Requires(predicate != null);

            return @this.Coalesce(predicate, <#= Name #><TResult>.<#= ZeroName #>, other);
        }
<#+ } #>

        public static <#= Name #><TSource> Run<TSource>(
            this <#= Name #><TSource> @this,
            Action<TSource> action)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>
            Require.NotNull(action, "action");

            return @this.Bind(_ => { action.Invoke(_); return @this; });
        }

<#+ if (HasZero) { #>
        public static <#= Name #><TSource> On<#= ZeroName #><TSource>(
            this <#= Name #><TSource> @this,
            Action action)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>
<#+ NotNull_("action"); #>

            return @this.Then(<#= Name #>.Unit).Run(_ => action.Invoke()).Then(@this);
        }
<#+ } #>

        #endregion
    }
<#+
    }
    
    // EmitKleisliExtensions -----------------------------------------------------------------------

    public void EmitKleisliExtensions()
    {
#>
    /*!
     * Extensions methods for Func<TSource, <#= Name #><TResult>>.
     */
    public static partial class FuncExtensions
    {
        #region Basic Monad functions (Prelude)

        /*!
         * Named `=<<` in Haskell parlance.
         */
        public static <#= Name #><TResult> Invoke<TSource, TResult>(
            this Func<TSource, <#= Name #><TResult>> @this,
            <#= Name #><TSource> value)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ NotNull_("value"); #>
            Contract.Requires(@this != null);

            return value.Bind(@this);
        }

        /*!
         * Named `>=>` in Haskell parlance.
         */
        public static Func<TSource, <#= Name #><TResult>> Compose<TSource, TMiddle, TResult>(
            this Func<TSource, <#= Name #><TMiddle>> @this,
            Func<TMiddle, <#= Name #><TResult>> funM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TMiddle"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>

            return _ => @this.Invoke(_).Bind(funM);
        }

        /*!
         * Named `<=<` in Haskell parlance.
         */
        public static Func<TSource, <#= Name #><TResult>> ComposeBack<TSource, TMiddle, TResult>(
            this Func<TMiddle, <#= Name #><TResult>> @this,
            Func<TSource, <#= Name #><TMiddle>> funM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TMiddle"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ NotNull_("funM"); #>

            return _ => funM.Invoke(_).Bind(@this);
        }

        #endregion
    }
<#+
    }

    // EmitEnumerableMonadExtensions ---------------------------------------------------------------

    protected void EmitEnumerableMonadExtensions()
    {
#>
    /*!
     * Extensions for IEnumerable<<#= Name #><T>>.
     */
    public static partial class Enumerable<#= Name #>Extensions
    {
        #region Basic Monad functions (Prelude)

<#+ if (!RequireStruct) { #>
        /*!
         * Named `sequence` in Haskell parlance.
         */
        public static <#= Name #><IEnumerable<TSource>> Collect<TSource>(
            this IEnumerable<<#= Name #><TSource>> @this)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>
            Contract.Ensures(Contract.Result<<#= Name #><IEnumerable<TSource>>>() != null);

            return @this.CollectCore();
        }
<#+ } #>
        
        #endregion
<#+ if (HasZero && HasPlus) { #>

        #region Generalisations of list functions (Prelude)

        /*!
         * Named `msum` in Haskell parlance.
         */
        public static <#= Name #><TSource> Sum<TSource>(
            this IEnumerable<<#= Name #><TSource>> @this)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>

            return @this.SumCore();
        }

        #endregion
<#+ } #>
    }
<#+
    }

    // EmitEnumerableMonadInternalExtensions -------------------------------------------------------

    protected void EmitEnumerableMonadInternalExtensions()
    {
#>
    /*!
     * Internal extensions for IEnumerable<<#= Name #><T>>.
     */
    static partial class Enumerable<#= Name #>Extensions
    {
<#+ if (!RequireStruct) { #>
        internal static <#= Name #><IEnumerable<TSource>> CollectCore<TSource>(
            this IEnumerable<<#= Name #><TSource>> @this)
<#+ StructConstraint_("TSource"); #>
        {
<#+ DebugNotNull_("@this"); #>
            Contract.Ensures(Contract.Result<<#= Name #><IEnumerable<TSource>>>() != null);

            var seed = <#= Name #>.<#= ReturnName #>(Enumerable.Empty<TSource>());
            Func<<#= Name #><IEnumerable<TSource>>, <#= Name #><TSource>, <#= Name #><IEnumerable<TSource>>> fun
                = (m, n) =>
                    m.Bind(list =>
                    {
                        return n.Bind(item => <#= Name #>.<#= ReturnName #>(
                            list.Concat(Enumerable.Repeat(item, 1))));
                    });

            return @this.Aggregate(seed, fun).AssumeNotNull();
        }
<#+ } #>

<#+ if (HasZero && HasPlus) { #>

        internal static <#= Name #><TSource> SumCore<TSource>(
            this IEnumerable<<#= Name #><TSource>> @this)
<#+ StructConstraint_("TSource"); #>
        {
<#+ DebugNotNull_("@this"); #>

            return @this.Aggregate(<#= Name #><TSource>.<#= ZeroName #>, (m, n) => m.<#= PlusName #>(n));
        }
<#+ } #>
    }
<#+
    }

    // EmitEnumerableExtensions --------------------------------------------------------------------

    protected void EmitEnumerableExtensions()
    {
#>
    // Extensions for IEnumerable<T>.
    public static partial class EnumerableExtensions
    {
        #region Basic Monad functions (Prelude)

<#+ if (!RequireStruct) { #>
        /// <remarks>
        /// Named <c>mapM</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><IEnumerable<TResult>> Map<TSource, TResult>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><TResult>> funM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>

            return @this.MapCore(funM);
        }
<#+ } #>
        
        #endregion

        #region Generalisations of list functions (Prelude)

<#+ // REVIEW: Haskell use a differente signature. #>
        /// <remarks>
        /// Named <c>filterM</c> in Haskell parlance.
        /// </remarks>
        public static IEnumerable<TSource> Filter<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><bool>> predicateM)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>
            Contract.Requires(predicateM != null);

            return @this.FilterCore(predicateM);
        }

<#+ if (!RequireStruct) { #>
        /// <remarks>
        /// Named <c>mapAndUnzipM</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>>
            MapAndUnzip<TSource, TFirst, TSecond>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><Tuple<TFirst, TSecond>>> funM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TFirst"); #>
<#+ StructConstraint_("TSecond"); #>
        {
<#+ ObjectNotNull_(); #>

            return @this.MapAndUnzipCore(funM);
        }

        /// <remarks>
        /// Named <c>zipWithM</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><IEnumerable<TResult>> Zip<TFirst, TSecond, TResult>(
            this IEnumerable<TFirst> @this,
            IEnumerable<TSecond> second,
            Func<TFirst, TSecond, <#= Name #><TResult>> resultSelectorM)
<#+ StructConstraint_("TFirst"); #>
<#+ StructConstraint_("TSecond"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
            Contract.Requires(resultSelectorM != null);

            return @this.ZipCore(second, resultSelectorM);
        }
<#+ } #>

        /// <remarks>
        /// Named <c>foldM</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><TAccumulate> Fold<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulatorM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TAccumulate"); #>
        {
<#+ ObjectNotNull_(); #>
            Contract.Requires(accumulatorM != null);

            return @this.FoldCore(seed, accumulatorM);
        }

        #endregion
        
        #region Aggregate Operators

        public static <#= Name #><TAccumulate> FoldBack<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulatorM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TAccumulate"); #>
        {
 <#+ ObjectNotNull_(); #>
            Contract.Requires(accumulatorM != null);

            return @this.FoldBackCore(seed, accumulatorM);
        }

        public static <#= Name #><TSource> Reduce<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulatorM)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>
            Contract.Requires(accumulatorM != null);
            
            return @this.ReduceCore(accumulatorM);
        }

        public static <#= Name #><TSource> ReduceBack<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulatorM)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>
            Contract.Requires(accumulatorM != null);

            return @this.ReduceBackCore(accumulatorM);
        }

        #endregion

        #region Catamorphisms

<#+ // REVIEW: Haskell use a differente signature. #>
        public static <#= Name #><TAccumulate> Fold<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulatorM,
            Func<<#= Name #><TAccumulate>, bool> predicate)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TAccumulate"); #>
        {
<#+ ObjectNotNull_(); #>
            Contract.Requires(accumulatorM != null);
            Contract.Requires(predicate != null);

            return @this.FoldCore(seed, accumulatorM, predicate);
        }
        
<#+ // REVIEW: Haskell use a differente signature. #>
        public static <#= Name #><TSource> Reduce<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulatorM,
            Func<<#= Name #><TSource>, bool> predicate)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>
            Contract.Requires(accumulatorM != null);
            Contract.Requires(predicate != null);

            return @this.ReduceCore(accumulatorM, predicate);
        }

        #endregion
    }
<#+
    }
    
    // EmitEnumerableInternalExtensions ------------------------------------------------------------

    protected void EmitEnumerableInternalExtensions()
    {
#>
    // Internal extensions for IEnumerable<T>.
    static partial class EnumerableExtensions
    {
<#+ if (!RequireStruct) { #>
        internal static <#= Name #><IEnumerable<TResult>> MapCore<TSource, TResult>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><TResult>> funM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ DebugNotNull_("@this"); #>

            return @this.Select(funM).AssumeNotNull().Collect();
        }
<#+ } #>

        internal static IEnumerable<TSource> FilterCore<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><bool>> predicateM)
<#+ StructConstraint_("TSource"); #>
        {
<#+ NotNull_("predicateM"); #>
<#+ DebugNotNull_("@this"); #>

            // NB: Haskell uses tail recursion, we don't.
            var list = new List<TSource>();

            foreach (var item in @this) {
                predicateM.Invoke(item)
                    .Run(_ =>
                    {
                        if (_ == true) {
                            list.Add(item);
                        }
                    });
            }

            return list;
        }

<#+ if (!RequireStruct) { #>
        internal static <#= Name #><Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>>
            MapAndUnzipCore<TSource, TFirst, TSecond>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><Tuple<TFirst, TSecond>>> funM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TFirst"); #>
<#+ StructConstraint_("TSecond"); #>
        {
<#+ DebugNotNull_("@this"); #>

            return from tuple in @this.Select(funM).AssumeNotNull().Collect()
                   let item1 = tuple.Select(_ => _.Item1)
                   let item2 = tuple.Select(_ => _.Item2)
                   select new Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>(item1, item2);
        }

        internal static <#= Name #><IEnumerable<TResult>> ZipCore<TFirst, TSecond, TResult>(
            this IEnumerable<TFirst> @this,
            IEnumerable<TSecond> second,
            Func<TFirst, TSecond, <#= Name #><TResult>> resultSelectorM)
<#+ StructConstraint_("TFirst"); #>
<#+ StructConstraint_("TSecond"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ NotNull_("resultSelectorM"); #>
<#+ DebugNotNull_("@this"); #>

            Func<TFirst, TSecond, <#= Name #><TResult>> resultSelector
                = (v1, v2) => resultSelectorM.Invoke(v1, v2);

            // WARNING: Do not remove resultSelector, otherwise .NET will make a recursive call
            // instead of using the Zip from Linq.
            return @this.Zip(second, resultSelector: resultSelector).AssumeNotNull().Collect();
        }
<#+ } #>

        internal static <#= Name #><TAccumulate> FoldCore<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulatorM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TAccumulate"); #>
        {
<#+ NotNull_("accumulatorM"); #>
<#+ DebugNotNull_("@this"); #>

            <#= Name #><TAccumulate> result = <#= Name #>.<#= ReturnName #>(seed);

            foreach (TSource item in @this) {
                result = result.Bind(_ => accumulatorM.Invoke(_, item));
            }

            return result;
        }

        internal static <#= Name #><TAccumulate> FoldBackCore<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulatorM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TAccumulate"); #>
        {
<#+ DebugNotNull_("@this"); #>
            Contract.Requires(accumulatorM != null);

            return @this.Reverse().AssumeNotNull().Fold(seed, accumulatorM);
        }

        internal static <#= Name #><TSource> ReduceCore<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulatorM)
<#+ StructConstraint_("TSource"); #>
        {
<#+ NotNull_("accumulatorM"); #>
<#+ DebugNotNull_("@this"); #>

            using (var iter = @this.GetEnumerator()) {
                if (!iter.MoveNext()) {
                    throw new InvalidOperationException("Source sequence was empty.");
                }

                <#= Name #><TSource> result = <#= Name #>.<#= ReturnName #>(iter.Current);

                while (iter.MoveNext()) {
                    result = result.Bind(_ => accumulatorM.Invoke(_, iter.Current));
                }

                return result;
            }
        }

        internal static <#= Name #><TSource> ReduceBackCore<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulatorM)
<#+ StructConstraint_("TSource"); #>
        {
<#+ DebugNotNull_("@this"); #>
            Contract.Requires(accumulatorM != null);

            return @this.Reverse().AssumeNotNull().Reduce(accumulatorM);
        }

        internal static <#= Name #><TAccumulate> FoldCore<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulatorM,
            Func<<#= Name #><TAccumulate>, bool> predicate)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TAccumulate"); #>
        {
<#+ NotNull_("accumulatorM"); #>
<#+ NotNull_("predicate"); #>
<#+ DebugNotNull_("@this"); #>

            <#= Name #><TAccumulate> result = <#= Name #>.<#= ReturnName #>(seed);

            using (var iter = @this.GetEnumerator()) {
                while (predicate.Invoke(result) && iter.MoveNext()) {
                    result = result.Bind(_ => accumulatorM.Invoke(_, iter.Current));
                }
            }

            return result;
        }

        internal static <#= Name #><TSource> ReduceCore<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulatorM,
            Func<<#= Name #><TSource>, bool> predicate)
<#+ StructConstraint_("TSource"); #>
        {
<#+ NotNull_("accumulatorM"); #>
<#+ NotNull_("predicate"); #>
<#+ DebugNotNull_("@this"); #>

            using (var iter = @this.GetEnumerator()) {
                if (!iter.MoveNext()) {
                    throw new InvalidOperationException("Source sequence was empty.");
                }

                <#= Name #><TSource> result = <#= Name #>.<#= ReturnName #>(iter.Current);

                while (predicate.Invoke(result) && iter.MoveNext()) {
                    result = result.Bind(_ => accumulatorM.Invoke(_, iter.Current));
                }

                return result;
            }
        }
    }
<#+
    }

    /* ========================================================================================== *
     * Private Methods
     * ========================================================================================== */
    
    protected void WriteHeader_()
    {
        if (_headerWritten) {
            return;
        }

        // See http://msdn.microsoft.com/en-us/library/ms244717.aspx for an explanation
        // of the SuppressMessage attribute used at module scope.
#>
// Copyright (c) 2014, Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
//
// Runtime Version: <#= System.Environment.Version #>
// </auto-generated>
//------------------------------------------------------------------------------

using global::System.Diagnostics.CodeAnalysis;

[module: SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass",
    Justification = "This is disabled for files generated by a Text Template.")]
[module: SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1403:FileMayOnlyContainASingleNamespace",
    Justification = "This is disabled for files generated by a Text Template.")]
    
[module: SuppressMessage("StyleCop.CSharp.OrderingRules", "SA1202:ElementsMustBeOrderedByAccess",
    Justification = "For files generated by Text Template, we favour T4 readibility over StyleCop rules.")]
[module: SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1505:OpeningCurlyBracketsMustNotBeFollowedByBlankLine",
    Justification = "For files generated by Text Template, we favour T4 readibility over StyleCop rules.")]
[module: SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1507:CodeMustNotContainMultipleBlankLinesInARow",
    Justification = "For files generated by Text Template, we favour T4 readibility over StyleCop rules.")]

[module: SuppressMessage("StyleCop.CSharp.OrderingRules", "SA1210:UsingDirectivesMustBeOrderedAlphabeticallyByNamespace",
    Justification = "Actual namespaces are not known in advance.")]
<#+
        _headerWritten = true;
    }
    
    string InferName_() 
    {
        return System.IO.Path.GetFileNameWithoutExtension(Host.TemplateFile);
    }
    
    string InferNamespace_() 
    {
        return System.Runtime.Remoting.Messaging.CallContext
            .LogicalGetData("NamespaceHint")
            .ToString();
    }
    
    void StructConstraint_(string name)
    {
        if (RequireStruct) {
#>
            where <#= name #> : struct
<#+
        }
    }

    void ObjectNotNull_() 
    {
        if (IsNullable) {
#>
            Require.Object(@this);
<#+
        }
    }

    void NotNull_(string name) 
    {
        if (IsNullable) {
#>
            Require.NotNull(<#= name #>, "<#= name #>");
<#+
        }
    }
    
    void DebugNotNull_(string value) 
    {
        if (IsNullable) {
#>
            DebugCheck.NotNull(<#= value #>);
<#+
        }
    }
    
    void ThrowIfInitialized_() 
    {
        if (_initialized) {
            throw new InvalidOperationException();
        }
    }

    void NewLine_()
    {
        WriteLine(String.Empty);
    }
#>
