<#@ template debug="true" hostspecific="true" #>
<#@ output extension=".g.cs" #><#+

    // WARNING: This is only a proof of concept.
    // This file depends on Narvalo.Core NuGet package for four things:
    // - the classes Acknowledge, Assume and Require in the Narvalo namespace.
    // - the Unit class in the Narvalo.Fx namespace; but you can define your own: see UnitFullName.
    // The generated files are free of CA warnings except for CA1006:DoNotNestGenericTypesInMemberSignatures.
    // Exposing nested generics is the price to pay for monads.

    // TODO: Protect the various T4 property's setters.

    // The following is going to change:
    // Some documentation is almost blindly copied from Haskell.
    // If the monad does have a zero, we do expect "Bind" & "η" to never return null but the zero.
    // If the monad does not have a zero, we do not have any expectation on the return value of Bind.
    
    /* ========================================================================================== *
     * Fields
     * ========================================================================================== */
     
    // We use four spaces (no tabs) for indentation.
    private const string INDENT = "    ";

    private bool _initialized = false;
    private bool _headerWritten = false;
    
    private string _name;
    private string _namespace;
    private string _linqNamespace;
    private string _advancedNamespace;
    
    private bool _isNullable = true;
    private bool _preferLinqDialect = true;
    private bool _hasUnderlyingTypeConstraint = false;
    private string _underlyingTypeConstraint = String.Empty;

    private string _plusName = "Plus";
    private string _returnName = "Return";
    private string _zeroName = "Zero";

    private string _unitFullName = "Narvalo.Fx.Unit";

    /* ========================================================================================== *
     * Properties
     * ========================================================================================== */

    // Gets or sets the name of the namespace.
    // If no namespace was given, it will be infered from the template location.
    protected string Namespace
    {
        get
        {
            if (_namespace == null) {
                _namespace = InferNamespace_();
            }

            return _namespace;
        }

        set
        {
            if (_namespace != null) {
                throw new InvalidOperationException("You can set the name of the namespace only once.");
            }

            if (String.IsNullOrWhiteSpace(value)) {
                throw new ArgumentException("The namespace can not be null or blank.");
            }

            _namespace = value;
        }
    }
    
    // Gets or sets the name of the 'Advanced' namespace.
    // If no namespace was given, it will be deduced from Namespace.
    // Extensions for core CLR types are put into a separate namespace.
    protected string AdvancedNamespace
    {
        get
        {
            if (_advancedNamespace == null) {
                _advancedNamespace = Namespace + ".Advanced";
            }

            return _advancedNamespace;
        }

        set
        {
            if (_advancedNamespace != null) {
                throw new InvalidOperationException("You can set the name of the 'Advanced' namespace only once.");
            }

            if (String.IsNullOrWhiteSpace(value)) {
                throw new ArgumentException("The 'Advanced' namespace can not be null or blank.");
            }

            _advancedNamespace = value;
        }
    }
    
    // Gets or sets the name of the LINQ namespace.
    // If no namespace was given, it will be infered from the template location.
    protected string LinqNamespace
    {
        get
        {
            if (_linqNamespace == null) {
                _linqNamespace = InferNamespace_();
            }

            return _linqNamespace;
        }

        set
        {
            if (_linqNamespace != null) {
                throw new InvalidOperationException("You can set the name of the LINQ namespace only once.");
            }

            if (String.IsNullOrWhiteSpace(value)) {
                throw new ArgumentException("The LINQ namespace can not be null or blank.");
            }

            _linqNamespace = value;
        }
    }
    
    // Gets or sets the name of the monad.
    // If no name was given, it will be infered from the template name.
    protected string Name
    {
        get
        {
            if (_name == null) {
                _name = InferName_();
            }

            return _name;
        }

        set
        {
            if (_name != null) {
                throw new InvalidOperationException("You can set the name of the monad only once.");
            }

            if (String.IsNullOrWhiteSpace(value)) {
                throw new ArgumentException("The name can not be null or blank.");
            }

            _name = value;
        }
    }

    protected string UnitFullName 
    {
        get { return _unitFullName; }

        set
        {
            if (_unitFullName != null) {
                throw new InvalidOperationException("You can set the name of the Unit full name only once.");
            }

            if (String.IsNullOrWhiteSpace(value)) {
                throw new ArgumentException("The Unit full name can not be null or blank.");
            }

            _unitFullName = value;
        }
    }

    #region Postconditions.

    // Gets or sets a value indicating whether Monad<T>.Bind() ensures a non-null return value. Default to false.
    protected bool BindEnsuresSome { get; set; }

    // Gets or sets a value indicating whether Monad<T>.η() ensures a non-null return value. Default to false.
    // NB: Monad<T>.Return() being just the public alias of Monad<T>.η(), this also applies
    // to the Monad<T>.Return() method.
    protected bool UnitEnsuresSome { get; set; }

    // Gets or sets a value indicating whether Monad<T>.μ() ensures a non-null return value. Default to false.
    // NB: Monad<T>.Flatten() being just the public alias of Monad<T>.μ(), this also applies
    // to the Monad<T>.Flatten() method.
    protected bool MultiplicationEnsuresSome { get; set; }

    // Gets or sets a value indicating whether Monad<T>.When() ensures a non-null return value. Always true.
    // NB: Whatever happen, Monad<T>.When() always return a non-null value.
    protected bool WhenEnsuresSome { get { return true; } }

    // Gets a value indicating whether Monad<T>.Map() ensures a non-null return value. Default to false.
    // NB: Monad<T>.Map() uses Monad<T>.Bind().
    protected bool MapEnsuresSome { get { return BindEnsuresSome; } }

    // Gets a value indicating whether Monad<T>.Filter() ensures a non-null return value. Default to false.
    // NB: Monad<T>.Filter() uses Monad<T>.Bind().
    protected bool FilterEnsuresSome { get { return BindEnsuresSome; } }

    // Gets a value indicating whether Monad<T>.Coalesce() ensures a non-null return value. Default to false.
    // NB: Monad<T>.Coalesce() uses Monad<T>.Bind().
    protected bool CoalesceEnsuresSome { get { return BindEnsuresSome; } }

    // Gets a value indicating whether Monad<T>.Then() ensures a non-null return value. Default to false.
    // NB: Monad<T>.Then() uses Monad<T>.Coalesce().
    protected bool ThenEnsuresSome { get { return CoalesceEnsuresSome; } }

    // Gets a value indicating whether Monad<T>.Join() ensures a non-null return value. Default to false.
    // NB: Monad<T>.Join() uses Monad<T>.Map().
    protected bool JoinEnsuresSome { get { return MapEnsuresSome; } }

    // Gets a value indicating whether Monad<T>.GroupJoin() ensures a non-null return value. Default to false.
    // NB: Monad<T>.GroupJoin() uses Monad<T>.Map().
    protected bool GroupJoinEnsuresSome { get { return MapEnsuresSome; } }

    #endregion

    #region Type constraints.

    // Gets or sets a value indicating whether the monad is nullable. Default to true.
    protected bool IsNullable { get { return _isNullable; } set { _isNullable = value; } }

    // Gets or sets a generic constraint on the underlying type T. Default to String.Empty.
    protected string UnderlyingTypeConstraint
    { 
        get { return _underlyingTypeConstraint ; } 

        set 
        { 
            _underlyingTypeConstraint  = value; 
            _hasUnderlyingTypeConstraint = !String.IsNullOrWhiteSpace(value);
        } 
    }

    // Gets a value indicating whether the underlying type T satisfies a generic type constraint. Default to false.
    protected bool HasUnderlyingTypeConstraint { get { return _hasUnderlyingTypeConstraint; } }

    #endregion

    // Gets or sets a value indicating whether the monad is a MonadPlus. Default to false.
    protected bool HasPlus { get; set; }

    // Gets or sets a value indicating whether the monad is a MonadZero. Default to false.
    protected bool HasZero { get; set; }

    // Gets a value indicating whether the monad has a Filter method. Default to true.
    protected bool HasFilter { get { return HasZero; } }

    // Gets a value indicating whether the monad has Join and GroupJoin methods. Default to true.
    protected bool HasJoin { get { return HasZero; } }

    // Gets a value indicating whether the monad has a Then method. Default to true.
    protected bool HasThen { get { return HasZero; } }

    // Gets a value indicating whether the monad has a Sum method. Default to true.
    protected bool HasSum { get { return HasZero && HasPlus; } }

    // Gets or sets the name of the Zero property. Default to "Zero".
    protected string ZeroName 
    { 
        get 
        { 
            if (!HasZero) {
                throw new InvalidOperationException("The monad is not a MonadZero.");
            }

            return _zeroName; 
        }  

        set
        {
            if (String.IsNullOrWhiteSpace(value)) {
                throw new ArgumentException("The name of the Zero property can not be null or blank.");
            }

            _zeroName = value;
        } 
    }
    
    // Gets or sets the name of the Plus method. Default to "Plus".
    protected string PlusName
    {
        get
        { 
            if (!HasPlus) {
                throw new InvalidOperationException("The monad is not a MonadPlus.");
            }

            return _plusName; 
        }

        set
        {
            if (String.IsNullOrWhiteSpace(value)) {
                throw new ArgumentException("The name of the Plus method can not be null or blank.");
            }

            _plusName = value;
        } 
    }

    // Gets or sets a value indicating whether we prefer to use the LINQ dialect. Default to true.
    // Among other things, this property changes the names of the Map and Filter methods.
    protected bool PreferLinqDialect { 
        get { return _preferLinqDialect; }
        set { _preferLinqDialect = value; }
    }

    // Gets the name of the Filter method.
    protected string FilterName
    {
        get 
        { 
            if (!HasZero) {
                throw new InvalidOperationException("The monad does not have a Zero.");
            }

            return PreferLinqDialect ? "Where" : "Filter";
        }
    }
    
    // Gets the name of the Map method.
    protected string MapName
    {
        get { return PreferLinqDialect ? "Select" : "Map"; }
    }
    
    // Gets or sets the name of the Return method. Default to "Return".
    protected string ReturnName
    {
        get { return _returnName; }

        set 
        {
            if (String.IsNullOrWhiteSpace(value)) {
                throw new ArgumentException("The name of the Return method can not be null or blank.");
            }

            _returnName = value; 
        }
    }
    
    /* ========================================================================================== *
     * "Constructors". NB: All constructors are mutually exclusive.
     * ========================================================================================== */

    // Initializes a MonadZero.
    public void InitializeZero()
    {
        ThrowIfInitialized_();
        
        HasZero = true;
        //ZeroName = "Zero"; (default value).

        _initialized = true;
    }

    // Initializes a MonadPlus.
    public void InitializePlus()
    {
        ThrowIfInitialized_();
        
        HasZero = true;
        //ZeroName = "Zero"; (default value).

        HasPlus = true;
        //PlusName = "Plus"; (default value).

        _initialized = true;
    }
    
    // Initializes a MonadOr.
    public void InitializeOr()
    {
        ThrowIfInitialized_();
        
        HasZero = true;
        ZeroName = "None";

        HasPlus = true;
        PlusName = "OrElse";

        _initialized = true;
    }
    
    /* ========================================================================================== *
     * Public Methods
     * ========================================================================================== */

    // EmitMonad -----------------------------------------------------------------------------------

    // Generates a Monad.
    public void EmitMonad()
    {
        WriteHeader_();
#>
namespace <#= Namespace #>
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.Contracts;
    using System.Linq;

    using global::Narvalo;

<#+ EmitCoreClass(); #>
<#+ WriteNewLine_(); #>
<#+ EmitExtensions(); #>
<#+ WriteNewLine_(); #>
<#+ EmitKleisliExtensions(); #>
}
<#+
    } // End of EmitMonad().

    // EmitComonad ---------------------------------------------------------------------------------
    
    // Generates a Comonad.
    public void EmitComonad()
    {
        WriteHeader_();
#>
namespace <#= Namespace #>
{
    using System.Diagnostics.Contracts;

<#+ EmitCoreComonad(); #>
}
<#+
    } // End of EmitComonad().

    // EmitLinq ------------------------------------------------------------------------------------
    
    // Generates the LINQ extensions.
    public void EmitLinq()
    {
        WriteHeader_();
#>
namespace <#= Namespace #>
{
    using System.Collections.Generic;
    using System.Diagnostics.Contracts;

    using <#= Namespace #>.Internal;

<#+ EmitEnumerableMonadExtensions(); #>
}

namespace <#= AdvancedNamespace #>
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.Contracts;

    using <#= Namespace #>;
    using <#= Namespace #>.Internal;

<#+ EmitEnumerableExtensions(); #>
}

namespace <#= Namespace #>.Internal
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.Contracts;
    using System.Linq;

    using global::Narvalo;
    using <#= Namespace #>;
<#+ if (Namespace != AdvancedNamespace) { #>   
    using <#= AdvancedNamespace #>;
<#+ } #>   

<#+ EmitEnumerableMonadInternalExtensions(); #>
<#+ WriteNewLine_(); #>
<#+ EmitEnumerableInternalExtensions(); #>
}
<#+
    } // End of EmitLinq().
    
    /* ========================================================================================== *
     * Protected Methods
     * ========================================================================================== */

    // EmitCoreClass -------------------------------------------------------------------------------

    // Generates the core Monad methods.
    protected void EmitCoreClass() 
    {
#>
    /// <summary>
    /// Provides a set of static and extension methods for <see cref="<#= Name #>{T}" />.
    /// </summary>
    /// <remarks>
    /// Sometimes we prefer to use extension methods over static methods to be able to locally override them.
    /// </remarks>
<#+ WriteCompilerAttributes_(); #>
    public static partial class <#= Name #>
    {
        private static readonly <#= Name #><global::<#= UnitFullName #>> s_Unit = <#= ReturnName #>(global::<#= UnitFullName #>.Single);
<#+ if (HasZero) { #>
        private static readonly <#= Name #><global::<#= UnitFullName #>> s_<#= ZeroName #> = <#= Name #><global::<#= UnitFullName #>>.<#= ZeroName #>;
<#+ } #>

        /// <summary>
        /// Gets the unique object of type <c><#= Name #>&lt;Unit&gt;</c>.
        /// </summary>
        /// <value>The unique object of type <c><#= Name #>&lt;Unit&gt;</c>.</value>
        public static <#= Name #><global::<#= UnitFullName #>> Unit { get { return s_Unit; } }

<#+ if (HasZero) { #>
        /// <summary>
        /// Gets the zero for <see cref="<#= Name #>{T}"/>.
        /// </summary>
        /// <remarks>
        /// Named <c>mzero</c> in Haskell parlance.
        /// </remarks>
        /// <value>The zero for <see cref="<#= Name #>{T}"/>.</value>
        public static <#= Name #><global::<#= UnitFullName #>> <#= ZeroName #> { get { return s_<#= ZeroName #>; } }
<#+ } #>

        /// <summary>
        /// Obtains an instance of the <see cref="<#= Name #>{T}"/> class for the specified value.
        /// </summary>
        /// <remarks>
        /// Named <c>return</c> in Haskell parlance.
        /// </remarks>
        /// <typeparam name="T">The underlying type of <paramref name="value"/>.</typeparam>
        /// <param name="value">A value to be wrapped into a <see cref="<#= Name #>{T}"/> object.</param>
        /// <returns>An instance of the <see cref="<#= Name #>{T}"/> class for the specified value.</returns>
        public static <#= Name #><T> <#= ReturnName #><T>(T value)
<#+ WriteTypeConstraints_("T"); #>
        {
<#+ if (IsNullable && UnitEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><T>>() != null);
<#+ } #>

            return <#= Name #><T>.η(value);
        }
        
        #region Generalisations of list functions (Prelude)

        /// <summary>
        /// Removes one level of structure, projecting its bound value into the outer level.
        /// </summary>
        /// <remarks>
        /// Named <c>join</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><T> Flatten<T>(<#= Name #><<#= Name #><T>> square)
<#+ WriteTypeConstraints_("T"); #>
        {
<#+ if (IsNullable) { #>
            Contract.Requires(square != null);
<#+ } #>
<#+ if (IsNullable && MultiplicationEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><T>>() != null);
<#+ } #>

            return <#= Name #><T>.μ(square);
        }

        #endregion

        #region Monadic lifting operators (Prelude)

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T}" /> values.
        /// </summary>
        /// <remarks>
        /// Named <c>liftM</c> in Haskell parlance.
        /// </remarks>
        public static Func<<#= Name #><T>, <#= Name #><TResult>> Lift<T, TResult>(
            Func<T, TResult> fun)
<#+ WriteTypeConstraints_("T", "TResult"); #>
        {
            Contract.Ensures(Contract.Result<Func<<#= Name #><T>, <#= Name #><TResult>>>() != null);

            return m =>
            {
<#+ if (IsNullable) { PushIndent(INDENT); WriteNotNull_("m"); PopIndent(); }  #>
                return m.<#= MapName #>(fun);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T}" /> values, scanning the 
        /// monadic arguments from left to right.
        /// </summary>
        /// <remarks>
        /// Named <c>liftM2</c> in Haskell parlance.
        /// </remarks>
        public static Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><TResult>>
            Lift<T1, T2, TResult>(Func<T1, T2, TResult> fun)
<#+ WriteTypeConstraints_("T1", "T2", "TResult"); #>
        {
            Contract.Ensures(Contract.Result<Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><TResult>>>() != null);

            return (m1, m2) =>
            {
<#+ if (IsNullable) { PushIndent(INDENT); WriteNotNull_("m1"); PopIndent(); }  #>
                return m1.Zip(m2, fun);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T}" /> values, scanning the 
        /// monadic arguments from left to right.
        /// </summary>
        /// <remarks>
        /// Named <c>liftM3</c> in Haskell parlance.
        /// </remarks>
        public static Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><T3>, <#= Name #><TResult>>
            Lift<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> fun)
<#+ WriteTypeConstraints_("T1", "T2", "T3", "TResult"); #>
        {
            Contract.Ensures(Contract.Result<Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><T3>, <#= Name #><TResult>>>() != null);

            return (m1, m2, m3) =>
            {
<#+ if (IsNullable) { PushIndent(INDENT); WriteNotNull_("m1"); PopIndent(); }  #>
                return m1.Zip(m2, m3, fun);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        /// <remarks>
        /// Named <c>liftM4</c> in Haskell parlance.
        /// </remarks>
        public static Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><T3>, <#= Name #><T4>, <#= Name #><TResult>>
            Lift<T1, T2, T3, T4, TResult>(
            Func<T1, T2, T3, T4, TResult> fun)
<#+ WriteTypeConstraints_("T1", "T2", "T3", "T4", "TResult"); #>
        {
            Contract.Ensures(Contract.Result<Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><T3>, <#= Name #><T4>, <#= Name #><TResult>>>() != null);
            
            return (m1, m2, m3, m4) =>
            {
<#+ if (IsNullable) { PushIndent(INDENT); WriteNotNull_("m1"); PopIndent(); }  #>
                return m1.Zip(m2, m3, m4, fun);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        /// <remarks>
        /// Named <c>liftM5</c> in Haskell parlance.
        /// </remarks>
        public static Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><T3>, <#= Name #><T4>, <#= Name #><T5>, <#= Name #><TResult>>
            Lift<T1, T2, T3, T4, T5, TResult>(
            Func<T1, T2, T3, T4, T5, TResult> fun)
<#+ WriteTypeConstraints_("T1", "T2", "T3", "T4", "T5", "TResult"); #>
        {
            Contract.Ensures(Contract.Result<Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><T3>, <#= Name #><T4>, <#= Name #><T5>, <#= Name #><TResult>>>() != null);
       
            return (m1, m2, m3, m4, m5) =>
            {
<#+ if (IsNullable) { PushIndent(INDENT); WriteNotNull_("m1"); PopIndent(); }  #>
                return m1.Zip(m2, m3, m4, m5, fun);
            };
        }

        #endregion
    } // End of the class <#= Name #>.
<#+
    } // End of EmitCoreClass().
    
    // EmitCoreComonad -----------------------------------------------------------------------------

    protected void EmitCoreComonad() 
    {
#>
    // Implements core Comonad methods.
    public static partial class <#= Name #>
    {
        /// <remarks>
        /// Named <c>extract</c> in Haskell parlance.
        /// </remarks>
        public static T Extract<T>(<#= Name #><T> monad)
<#+ WriteTypeConstraints_("T"); #>
        {
            Contract.Requires(monad != null);

            return <#= Name #><T>.ε(monad);
        }

        /// <remarks>
        /// Named <c>duplicate</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><<#= Name #><T>> Duplicate<T>(<#= Name #><T> monad)
<#+ WriteTypeConstraints_("T"); #>
        {
            return <#= Name #><T>.δ(monad);
        }
    } // End of the class <#= Name #>.
<#+
    } // End of EmitCoreComonad().

    // EmitExtensions ------------------------------------------------------------------------------

    protected void EmitExtensions()
    {
#>
    /// <content>
    /// Provides core Monad extension methods.
    /// </content>
    public static partial class <#= Name #>
    {
        #region Basic Monad functions (Prelude)

        /// <remarks>
        /// Named <c>fmap</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><TResult> <#= MapName #><TSource, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, TResult> selector)
<#+ WriteTypeConstraints_("TSource", "TResult"); #>
        {
<#+ WriteObjectNotNull_(); #>
            Require.NotNull(selector, "selector");
<#+ if (IsNullable && BindEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.Bind(_ => <#= Name #>.<#= ReturnName #>(selector.Invoke(_)));
        }

        /// <remarks>
        /// Named <c>&gt;&gt;</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><TResult> Then<TSource, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TResult> other)
<#+ WriteTypeConstraints_("TSource", "TResult"); #>
        {
<#+ WriteObjectNotNull_(); #>
<#+ if (IsNullable && BindEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.Bind(_ => other);
        }
        
        #endregion

        #region Generalisations of list functions (Prelude)

<#+ if (HasZero) { #>
        /// <remarks>
        /// Named <c>mfilter</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><TSource> <#= FilterName #><TSource>(
            this <#= Name #><TSource> @this,
            Func<TSource, bool> predicate)
<#+ WriteTypeConstraints_("TSource"); #>
        {
<#+ WriteObjectNotNull_(); #>
            Require.NotNull(predicate, "predicate");
<#+ if (IsNullable && BindEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            return @this.Bind(
                _ => predicate.Invoke(_) ? @this : <#= Name #><TSource>.<#= ZeroName #>);
        }
<#+ } // End of HasZero. #>

<#+ if (!HasUnderlyingTypeConstraint) { #>
<#+ // Not available since we can not enforce our generic type constraint on the underlying type of monadic return value. #>

        /// <remarks>
        /// Named <c>replicateM</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><IEnumerable<TSource>> Repeat<TSource>(
            this <#= Name #><TSource> @this,
            int count)
<#+ WriteTypeConstraints_("TSource"); #>
        {
<#+ WriteObjectNotNull_(); #>
            Require.GreaterThanOrEqualTo(count, 1, "count");
<#+ if (IsNullable && MapEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><IEnumerable<TSource>>>() != null);
<#+ } #>

            return @this.<#= MapName #>(_ => Enumerable.Repeat(_, count));
        }
<#+ } // End of !HasUnderlyingTypeConstraint. #>
        
        #endregion

        #region Conditional execution of monadic expressions (Prelude)

<#+ if (HasZero) { #>
        /// <remarks>
        /// Named <c>guard</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><global::<#= UnitFullName #>> Guard(bool predicate)
        {
<#+ if (IsNullable) { #>
            Contract.Ensures(Contract.Result<<#= Name #><global::<#= UnitFullName #>>>() != null);
<#+ } #>

            return predicate ? <#= Name #>.Unit : <#= Name #>.<#= ZeroName #>;
        }
<#+ } // End of HasZero. #>

        /// <remarks>
        /// <para>Named <c>when</c> in Haskell parlance.</para>
        /// <para>Haskell use a different signature. The method should return a <see cref="<#= UnitFullName #>"/>.</para>
        /// </remarks>
        public static <#= Name #><TSource> When<TSource>(
            this <#= Name #><TSource> @this,
            bool predicate,
            Action action)
<#+ WriteTypeConstraints_("TSource"); #>
        {
            Acknowledge.Object(@this);
            Require.NotNull(action, "action");
<#+ if (IsNullable) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            if (predicate)
            {
                action.Invoke();
            }

            return @this;
        }

        /// <remarks>
        /// <para>Named <c>unless</c> in Haskell parlance.</para>
        /// <para>Haskell use a different signature. The method should return a <see cref="<#= UnitFullName #>"/>.</para>
        /// </remarks>
        public static <#= Name #><TSource> Unless<TSource>(
            this <#= Name #><TSource> @this,
            bool predicate,
            Action action)
<#+ WriteTypeConstraints_("TSource"); #>
        {
            Acknowledge.Object(@this);
            Require.NotNull(action, "action");
<#+ if (IsNullable && WhenEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            if (!predicate)
            {
                action.Invoke();
            }

            return @this;
        }

        #endregion

        #region Monadic lifting operators (Prelude)

        /// <see cref="Lift{T1, T2, T3}" />
        public static <#= Name #><TResult> Zip<TFirst, TSecond, TResult>(
            this <#= Name #><TFirst> @this,
            <#= Name #><TSecond> second,
            Func<TFirst, TSecond, TResult> resultSelector)
<#+ WriteTypeConstraints_("TFirst", "TSecond", "TResult"); #>
        {
<#+ WriteObjectNotNull_(); #>
<#+ WriteNotNull_("second"); #>
            Require.NotNull(resultSelector, "resultSelector");
<#+ if (IsNullable && BindEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.Bind(v1 => second.<#= MapName #>(v2 => resultSelector.Invoke(v1, v2)));
        }

        /// <see cref="Lift{T1, T2, T3, T4}" />
        public static <#= Name #><TResult> Zip<T1, T2, T3, TResult>(
            this <#= Name #><T1> @this,
            <#= Name #><T2> second,
            <#= Name #><T3> third,
            Func<T1, T2, T3, TResult> resultSelector)
<#+ WriteTypeConstraints_("T1", "T2", "T3", "TResult"); #>
        {
<#+ WriteObjectNotNull_(); #>
<#+ WriteNotNull_("second"); #>
            Require.NotNull(resultSelector, "resultSelector");
<#+ if (IsNullable && BindEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            Func<T1, <#= Name #><TResult>> g
                = t1 => second.Zip(third, (t2, t3) => resultSelector.Invoke(t1, t2, t3));

            return @this.Bind(g);
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5}" />
        public static <#= Name #><TResult> Zip<T1, T2, T3, T4, TResult>(
             this <#= Name #><T1> @this,
             <#= Name #><T2> second,
             <#= Name #><T3> third,
             <#= Name #><T4> fourth,
             Func<T1, T2, T3, T4, TResult> resultSelector)
<#+ WriteTypeConstraints_("T1", "T2", "T3", "T4", "TResult"); #>
        {
<#+ WriteObjectNotNull_(); #>
<#+ WriteNotNull_("second"); #>
            Require.NotNull(resultSelector, "resultSelector");
<#+ if (IsNullable && BindEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            Func<T1, <#= Name #><TResult>> g
                = t1 => second.Zip(
                    third,
                    fourth,
                    (t2, t3, t4) => resultSelector.Invoke(t1, t2, t3, t4));

            return @this.Bind(g);
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5, T6}" />
        public static <#= Name #><TResult> Zip<T1, T2, T3, T4, T5, TResult>(
            this <#= Name #><T1> @this,
            <#= Name #><T2> second,
            <#= Name #><T3> third,
            <#= Name #><T4> fourth,
            <#= Name #><T5> fifth,
            Func<T1, T2, T3, T4, T5, TResult> resultSelector)
<#+ WriteTypeConstraints_("T1", "T2", "T3", "T4", "T5", "TResult"); #>
        {
<#+ WriteObjectNotNull_(); #>
<#+ WriteNotNull_("second"); #>
            Require.NotNull(resultSelector, "resultSelector");
<#+ if (IsNullable && BindEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            Func<T1, <#= Name #><TResult>> g
                = t1 => second.Zip(
                    third,
                    fourth,
                    fifth,
                    (t2, t3, t4, t5) => resultSelector.Invoke(t1, t2, t3, t4, t5));

            return @this.Bind(g);
        }

        #endregion

        #region Query Expression Pattern

<#+ if (!PreferLinqDialect) { #>
<#+ if (HasFilter) { #>
        public static <#= Name #><TSource> Where<TSource>(
            this <#= Name #><TSource> @this, 
            Func<TSource, bool> predicate)
<#+ WriteTypeConstraints_("TSource"); #>
        {
<#+ WriteObjectNotNull_(); #>
<#+ if (IsNullable && FilterEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            return @this.<#= FilterName #>(predicate);
        }
<#+ } // End of HasFilter. #>

        public static <#= Name #><TResult> Select<TSource, TResult>(
            this <#= Name #><TSource> @this, 
            Func<TSource, TResult> selector)
<#+ WriteTypeConstraints_("TSource", "TResult"); #>
        {
<#+ WriteObjectNotNull_(); #>
<#+ if (IsNullable && MapEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.<#= MapName #>(selector);
        }
<#+ } // End of !PreferLinqDialect. #>

        /// <remarks>
        /// Kind of generalisation of Zip (liftM2).
        /// </remarks>
        public static <#= Name #><TResult> SelectMany<TSource, TMiddle, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, <#= Name #><TMiddle>> valueSelectorM,
            Func<TSource, TMiddle, TResult> resultSelector)
<#+ WriteTypeConstraints_("TSource", "TMiddle", "TResult"); #>
        {
<#+ WriteObjectNotNull_(); #>
            Require.NotNull(valueSelectorM, "valueSelectorM");
            Require.NotNull(resultSelector, "resultSelector");
<#+ if (IsNullable && BindEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.Bind(
                _ => valueSelectorM.Invoke(_).<#= MapName #>(
                    middle => resultSelector.Invoke(_, middle)));
        }

<#+ if (HasJoin) { #>
        public static <#= Name #><TResult> Join<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector)
<#+ WriteTypeConstraints_("TSource", "TInner", "TKey", "TResult"); #>
        {
<#+ WriteObjectNotNull_(); #>
<#+ if (IsNullable) { #>
            Contract.Requires(inner != null);
<#+ } #>
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(resultSelector != null);
<#+ if (IsNullable && JoinEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.Join(
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                EqualityComparer<TKey>.Default);
        }
        
        public static <#= Name #><TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, <#= Name #><TInner>, TResult> resultSelector)
<#+ WriteTypeConstraints_("TSource", "TInner", "TKey", "TResult"); #>
        {
<#+ WriteObjectNotNull_(); #>
<#+ if (IsNullable) { #>
            Contract.Requires(inner != null);
<#+ } #>
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(resultSelector != null);
<#+ if (IsNullable && GroupJoinEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.GroupJoin(
                inner,
                outerKeySelector,
                innerKeySelector, 
                resultSelector, 
                EqualityComparer<TKey>.Default);
        }
<#+ } // End of HasJoin. #>

        #endregion
        
        #region LINQ extensions

<#+ if (HasJoin) { #>
        public static <#= Name #><TResult> Join<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
<#+ WriteTypeConstraints_("TSource", "TInner", "TKey", "TResult"); #>
        {
<#+ if (IsNullable) { #>
            Acknowledge.Object(@this);
            Contract.Requires(inner != null);
<#+ } #>
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(resultSelector != null);
<#+ if (IsNullable && JoinEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return JoinCore_(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                comparer ?? EqualityComparer<TKey>.Default);
        }
        
        public static <#= Name #><TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, <#= Name #><TInner>, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
<#+ WriteTypeConstraints_("TSource", "TInner", "TKey", "TResult"); #>
        {
<#+ if (IsNullable) { #>
            Acknowledge.Object(@this);
            Contract.Requires(inner != null);
<#+ } #>
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(resultSelector != null);
<#+ if (IsNullable && GroupJoinEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return GroupJoinCore_(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                comparer ?? EqualityComparer<TKey>.Default);
        }
        
        
        [SuppressMessage("Gendarme.Rules.Smells", "AvoidLongParameterListsRule",
            Justification = "[Intentionally] Correct but these are helper methods for private use only.")]
        private static <#= Name #><TResult> JoinCore_<TSource, TInner, TKey, TResult>(
            <#= Name #><TSource> seq,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
<#+ WriteTypeConstraints_("TSource", "TInner", "TKey", "TResult"); #>
        {
<#+ WriteNotNull_("seq"); #>
            Require.NotNull(resultSelector, "resultSelector");
<#+ if (IsNullable) { #>
            Contract.Requires(inner != null);
<#+ } #>
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(comparer != null);
<#+ if (IsNullable && MapEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>
            
            var keyLookupM = GetKeyLookup_(inner, outerKeySelector, innerKeySelector, comparer);

            return from outerValue in seq
                   from innerValue in keyLookupM.Invoke(outerValue).Then(inner)
                   select resultSelector.Invoke(outerValue, innerValue);
        }
        
        [SuppressMessage("Gendarme.Rules.Smells", "AvoidLongParameterListsRule",
            Justification = "[Intentionally] Correct but these are helper methods for private use only.")]
        private static <#= Name #><TResult> GroupJoinCore_<TSource, TInner, TKey, TResult>(
            <#= Name #><TSource> seq,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, <#= Name #><TInner>, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
<#+ WriteTypeConstraints_("TSource", "TInner", "TKey", "TResult"); #>
        {
<#+ WriteNotNull_("seq"); #>
            Require.NotNull(resultSelector, "resultSelector");
<#+ if (IsNullable) { #>
            Contract.Requires(inner != null);
<#+ } #>
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(comparer != null);
<#+ if (IsNullable && MapEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            var keyLookupM = GetKeyLookup_(inner, outerKeySelector, innerKeySelector, comparer);

            return from outerValue in seq
                   select resultSelector.Invoke(outerValue, keyLookupM.Invoke(outerValue).Then(inner));
        }

        private static Func<TSource, <#= Name #><TKey>> GetKeyLookup_<TSource, TInner, TKey>(
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            IEqualityComparer<TKey> comparer)
<#+ WriteTypeConstraints_("TSource", "TInner", "TKey"); #>
        {
<#+ WriteNotNull_("inner"); #>
            Require.NotNull(outerKeySelector, "outerKeySelector");
            Require.NotNull(comparer, "comparer");
            Contract.Requires(innerKeySelector != null);
            Contract.Ensures(Contract.Result<Func<TSource, <#= Name #><TKey>>>() != null);

            return source =>
            {
                TKey outerKey = outerKeySelector.Invoke(source);
            
                return inner.<#= MapName #>(innerKeySelector).<#= FilterName #>(_ => comparer.Equals(_, outerKey));
            };
        }
<#+ } // End of HasJoin. #>

        #endregion

        #region Non-standard extensions
        
        public static <#= Name #><TResult> Coalesce<TSource, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, bool> predicate,
            <#= Name #><TResult> then,
            <#= Name #><TResult> otherwise)
<#+ WriteTypeConstraints_("TSource", "TResult"); #>
        {
<#+ WriteObjectNotNull_(); #>
            Require.NotNull(predicate, "predicate");
<#+ if (IsNullable && BindEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.Bind(_ => predicate.Invoke(_) ? then : otherwise);
        }

<#+ if (HasZero) { #>
        public static <#= Name #><TResult> Then<TSource, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, bool> predicate,
            <#= Name #><TResult> other)
<#+ WriteTypeConstraints_("TSource", "TResult"); #>
        {
<#+ WriteObjectNotNull_(); #>
            Contract.Requires(predicate != null);
<#+ if (IsNullable && CoalesceEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.Coalesce(predicate, other, <#= Name #><TResult>.<#= ZeroName #>);
        }

        public static <#= Name #><TResult> Otherwise<TSource, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, bool> predicate,
            <#= Name #><TResult> other)
<#+ WriteTypeConstraints_("TSource", "TResult"); #>
        {
<#+ WriteObjectNotNull_(); #>
            Contract.Requires(predicate != null);
<#+ if (IsNullable && CoalesceEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.Coalesce(predicate, <#= Name #><TResult>.<#= ZeroName #>, other);
        }
<#+ } // End of HasZero. #>

        public static void Invoke<TSource>(
            this <#= Name #><TSource> @this,
            Action<TSource> action)
<#+ WriteTypeConstraints_("TSource"); #>
        {
<#+ WriteObjectNotNull_(); #>
            Require.NotNull(action, "action");

            @this.Bind(_ => { action.Invoke(_); return @this; });
        }

<#+ if (HasThen) { #>

        public static void On<#= ZeroName #><TSource>(
            this <#= Name #><TSource> @this,
            Action action)
<#+ WriteTypeConstraints_("TSource"); #>
        {
<#+ WriteObjectNotNull_(); #>
            Require.NotNull(action, "action");

            @this.Then(<#= Name #>.Unit).Invoke(_ => action.Invoke());
        }

        public static void Invoke<TSource>(
            this <#= Name #><TSource> @this,
            Action<TSource> action,
            Action case<#= ZeroName #>)
<#+ WriteTypeConstraints_("TSource"); #>
        {
<#+ WriteObjectNotNull_(); #>
            Require.NotNull(action, "action");

            @this.Bind(_ => { action.Invoke(_); return @this; })
                .Then(<#= Name #>.Unit)
                .Bind(_ => { case<#= ZeroName #>.Invoke(); return Unit; });
        }
<#+ } // End of HasThen. #>

        #endregion
    } // End of the class <#= Name #>.
<#+
    } // End of EmitExtensions().
    
    // EmitKleisliExtensions -----------------------------------------------------------------------

    public void EmitKleisliExtensions()
    {
#>
    /// <summary>
    /// Provides extension methods for <see cref="Func{T}"/> that depend on the <see cref="<#= Name #>{T}"/> class.
    /// </summary>
    [SuppressMessage("Gendarme.Rules.Smells", "AvoidSpeculativeGeneralityRule",
        Justification = "[Intentionally] Delegation is an unavoidable annoyance of fluent interfaces on delegates.")]
    public static partial class Func<#= Name #>Extensions
    {
        #region Basic Monad functions (Prelude)

        /// <remarks>
        /// Named <c>=&lt;&lt;</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><TResult> Invoke<TSource, TResult>(
            this Func<TSource, <#= Name #><TResult>> @this,
            <#= Name #><TSource> value)
<#+ WriteTypeConstraints_("TSource", "TResult"); #>
        {
            Acknowledge.Object(@this);
<#+ WriteNotNull_("value"); #>
<#+ if (IsNullable && BindEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return value.Bind(@this);
        }

        /// <remarks>
        /// Named <c>&gt;=&gt;</c> in Haskell parlance.
        /// </remarks>
        public static Func<TSource, <#= Name #><TResult>> Compose<TSource, TMiddle, TResult>(
            this Func<TSource, <#= Name #><TMiddle>> @this,
            Func<TMiddle, <#= Name #><TResult>> funM)
<#+ WriteTypeConstraints_("TSource", "TMiddle", "TResult"); #>
        {
<#+ WriteObjectNotNull_(true); #>
            Contract.Requires(funM != null);
            Contract.Ensures(Contract.Result<Func<TSource, <#= Name #><TResult>>>() != null);

            return _ => @this.Invoke(_).Bind(funM);
        }

        /// <remarks>
        /// Named <c>&lt;=&lt;</c> in Haskell parlance.
        /// </remarks>
        public static Func<TSource, <#= Name #><TResult>> ComposeBack<TSource, TMiddle, TResult>(
            this Func<TMiddle, <#= Name #><TResult>> @this,
            Func<TSource, <#= Name #><TMiddle>> funM)
<#+ WriteTypeConstraints_("TSource", "TMiddle", "TResult"); #>
        {
            Acknowledge.Object(@this);
            Require.NotNull(funM, "funM");
            Contract.Ensures(Contract.Result<Func<TSource, <#= Name #><TResult>>>() != null);

            return _ => funM.Invoke(_).Bind(@this);
        }

        #endregion
    } // End of the class Func<#= Name #>Extensions.
<#+
    } // End of EmitKleisliExtensions().

    // EmitEnumerableMonadExtensions ---------------------------------------------------------------

    protected void EmitEnumerableMonadExtensions()
    {
#>
    /// <summary>
    /// Provides extension methods for <see cref="IEnumerable{T}"/> that depend on the <see cref="<#= Name #>{T}"/> class.
    /// </summary>
<#+ WriteCompilerAttributes_(); #>
    public static partial class Enumerable<#= Name #>Extensions
    {
        #region Basic Monad functions (Prelude)

<#+ if (!HasUnderlyingTypeConstraint) { #>
<#+ // Not available since we can not enforce our generic type constraint on the underlying type of monadic return value. #>
        /// <remarks>
        /// Named <c>sequence</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><IEnumerable<TSource>> Collect<TSource>(
            this IEnumerable<<#= Name #><TSource>> @this)
<#+ WriteTypeConstraints_("TSource"); #>
        {
            Acknowledge.Object(@this);
<#+ if (IsNullable) { #>
            Contract.Ensures(Contract.Result<<#= Name #><IEnumerable<TSource>>>() != null);
<#+ } #>

            return @this.CollectCore();
        }
<#+ } // End of !HasUnderlyingTypeConstraint. #>

        #endregion
<#+ if (HasSum) { #>

        #region Generalisations of list functions (Prelude)

        /// <remarks>
        /// Named <c>msum</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><TSource> Sum<TSource>(
            this IEnumerable<<#= Name #><TSource>> @this)
<#+ WriteTypeConstraints_("TSource"); #>
        {
            Acknowledge.Object(@this);
<#+ if (IsNullable) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            return @this.SumCore();
        }

        #endregion
<#+ } // End of HasSum. #>
    } // End of the class Enumerable<#= Name #>Extensions.
<#+
    } // End of EmitEnumerableMonadExtensions().

    // EmitEnumerableMonadInternalExtensions -------------------------------------------------------

    protected void EmitEnumerableMonadInternalExtensions()
    {
#>
    /// <summary>
    /// Provides the core extension methods for <see cref="IEnumerable{T}"/> that depend on the <see cref="<#= Name #>{T}"/> class.
    /// </summary>
    internal static partial class Enumerable<#= Name #>Extensions
    {
<#+ if (!HasUnderlyingTypeConstraint) { #>
<#+ // Not available since we can not enforce our generic type constraint on the underlying type of monadic return value. #>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static <#= Name #><IEnumerable<TSource>> CollectCore<TSource>(
            this IEnumerable<<#= Name #><TSource>> @this)
<#+ WriteTypeConstraints_("TSource"); #>
        {
            Acknowledge.Object(@this);
<#+ if (IsNullable) { #>
            Contract.Ensures(Contract.Result<<#= Name #><IEnumerable<TSource>>>() != null);
<#+ } #>

            var seed = <#= Name #>.<#= ReturnName #>(Enumerable.Empty<TSource>());
            Func<<#= Name #><IEnumerable<TSource>>, <#= Name #><TSource>, <#= Name #><IEnumerable<TSource>>> fun
                = (m, n) => m.Bind(list => CollectCore_(n, list));

            return @this.Aggregate(seed, fun)<#+ if (IsNullable) { #>.AssumeNotNull()<#+ } #>;
        }
        
        // NB: We do not inline this method to avoid the creation of an unused private field (CA1823 warning).
        private static <#= Name #><IEnumerable<TSource>> CollectCore_<TSource>(
            <#= Name #><TSource> m,
            IEnumerable<TSource> list)
        {
            Contract.Requires(m != null);

            return m.Bind(item => <#= Name #>.<#= ReturnName #>(list.Concat(Enumerable.Repeat(item, 1))));
        }
<#+ } // End of !HasUnderlyingTypeConstraint. #>

<#+ if (HasSum) { #>

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static <#= Name #><TSource> SumCore<TSource>(
            this IEnumerable<<#= Name #><TSource>> @this)
<#+ WriteTypeConstraints_("TSource"); #>
        {
            Acknowledge.Object(@this);
<#+ if (IsNullable) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            return @this.Aggregate(<#= Name #><TSource>.<#= ZeroName #>, (m, n) => m.<#= PlusName #>(n))<#+ if (IsNullable) { #>.AssumeNotNull()<#+ } #>;
        }
<#+ } // End of HasSum. #>
    } // End of the class Enumerable<#= Name #>Extensions.
<#+
    } // End of EmitEnumerableMonadInternalExtensions().

    // EmitEnumerableExtensions --------------------------------------------------------------------

    protected void EmitEnumerableExtensions()
    {
#>
    /// <content>
    /// Provides extension methods for <see cref="IEnumerable{T}"/>.
    /// </content>
    public static partial class Enumerable<#= Name #>Extensions
    {
        #region Basic Monad functions (Prelude)

<#+ if (!HasUnderlyingTypeConstraint) { #>
<#+ // Not available since we can not enforce our generic type constraint on the underlying type of monadic return value. #>
        /// <remarks>
        /// Named <c>mapM</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><IEnumerable<TResult>> Map<TSource, TResult>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><TResult>> funM)
<#+ WriteTypeConstraints_("TSource", "TResult"); #>
        {
            Acknowledge.Object(@this);
            Contract.Requires(funM != null);
<#+ if (IsNullable) { #>
            Contract.Ensures(Contract.Result<<#= Name #><IEnumerable<TResult>>>() != null);
<#+ } #>

            return @this.MapCore(funM);
        }
<#+ } // End of !HasUnderlyingTypeConstraint. #>

        #endregion

        #region Generalisations of list functions (Prelude)

        /// <remarks>
        /// <para>Named <c>filterM</c> in Haskell parlance.</para>
        /// <para>Haskell use a different signature.</para>
        /// </remarks>
        public static IEnumerable<TSource> Filter<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><bool>> predicateM)
<#+ WriteTypeConstraints_("TSource"); #>
        {
            Acknowledge.Object(@this);
            Contract.Requires(predicateM != null);
            Contract.Ensures(Contract.Result<IEnumerable<TSource>>() != null);

            return @this.FilterCore(predicateM);
        }

<#+ if (!HasUnderlyingTypeConstraint) { #>
<#+ // Not available since we can not enforce our generic type constraint on the underlying type of monadic return value. #>
        /// <remarks>
        /// Named <c>mapAndUnzipM</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>>
            MapAndUnzip<TSource, TFirst, TSecond>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><Tuple<TFirst, TSecond>>> funM)
<#+ WriteTypeConstraints_("TSource", "TFirst", "TSecond"); #>
        {
            Acknowledge.Object(@this);
            Contract.Requires(funM != null);
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>>>() != null);
<#+ } #>

            return @this.MapAndUnzipCore(funM);
        }

        /// <remarks>
        /// Named <c>zipWithM</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><IEnumerable<TResult>> Zip<TFirst, TSecond, TResult>(
            this IEnumerable<TFirst> @this,
            IEnumerable<TSecond> second,
            Func<TFirst, TSecond, <#= Name #><TResult>> resultSelectorM)
<#+ WriteTypeConstraints_("TFirst", "TSecond", "TResult"); #>
        {
            Acknowledge.Object(@this);
            Contract.Requires(second != null);
            Contract.Requires(resultSelectorM != null);
<#+ if (IsNullable) { #>
            Contract.Ensures(Contract.Result<<#= Name #><IEnumerable<TResult>>>() != null);
<#+ } #>

            return @this.ZipCore(second, resultSelectorM);
        }
<#+ } // End of !HasUnderlyingTypeConstraint. #>

        /// <remarks>
        /// Named <c>foldM</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><TAccumulate> Fold<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulatorM)
<#+ WriteTypeConstraints_("TSource", "TAccumulate"); #>
        {
            Acknowledge.Object(@this);
            Contract.Requires(accumulatorM != null);
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TAccumulate>>() != null);
<#+ } #>

            return @this.FoldCore(seed, accumulatorM);
        }

        #endregion

        #region Aggregate Operators
        
        public static <#= Name #><TAccumulate> FoldBack<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulatorM)
<#+ WriteTypeConstraints_("TSource", "TAccumulate"); #>
        {
            Acknowledge.Object(@this);
            Contract.Requires(accumulatorM != null);
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TAccumulate>>() != null);
<#+ } #>

            return @this.FoldBackCore(seed, accumulatorM);
        }
        
        public static <#= Name #><TSource> Reduce<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulatorM)
<#+ WriteTypeConstraints_("TSource"); #>
        {
            Acknowledge.Object(@this);
            Contract.Requires(accumulatorM != null);
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            return @this.ReduceCore(accumulatorM);
        }
        
        public static <#= Name #><TSource> ReduceBack<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulatorM)
<#+ WriteTypeConstraints_("TSource"); #>
        {
            Acknowledge.Object(@this);
            Contract.Requires(accumulatorM != null);
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            return @this.ReduceBackCore(accumulatorM);
        }

        #endregion

        #region Catamorphisms

        /// <remarks>
        /// <para>Haskell use a different signature.</para>
        /// </remarks>
        public static <#= Name #><TAccumulate> Fold<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulatorM,
            Func<<#= Name #><TAccumulate>, bool> predicate)
<#+ WriteTypeConstraints_("TSource", "TAccumulate"); #>
        {
            Acknowledge.Object(@this);
            Contract.Requires(accumulatorM != null);
            Contract.Requires(predicate != null);
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TAccumulate>>() != null);
<#+ } #>

            return @this.FoldCore(seed, accumulatorM, predicate);
        }

        /// <remarks>
        /// <para>Haskell use a different signature.</para>
        /// </remarks>
        public static <#= Name #><TSource> Reduce<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulatorM,
            Func<<#= Name #><TSource>, bool> predicate)
<#+ WriteTypeConstraints_("TSource"); #>
        {
            Acknowledge.Object(@this);
            Contract.Requires(accumulatorM != null);
            Contract.Requires(predicate != null);
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            return @this.ReduceCore(accumulatorM, predicate);
        }

        #endregion
    } // End of the class Enumerable<#= Name #>Extensions.
<#+
    } // End of EmitEnumerableExtensions().
    
    // EmitEnumerableInternalExtensions ------------------------------------------------------------

    protected void EmitEnumerableInternalExtensions()
    {
        // Normally we would name the class with EnumerableExtensions, but we prefer
        // Enumerable{Name}Extensions to avoid any method collision.
        // Indeed if we generate two monads in the same namespace, we might end up 
        // with two methods named the same in the same partial class.
#>
    /// <content>
    /// Provides the core extension methods for <see cref="IEnumerable{T}"/>.
    /// </content>
    internal static partial class Enumerable<#= Name #>Extensions
    {
<#+ if (!HasUnderlyingTypeConstraint) { #>
<#+ // Not available when we enforce a generic type constraint on the underlying type of the monadic return value. #>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static <#= Name #><IEnumerable<TResult>> MapCore<TSource, TResult>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><TResult>> funM)
<#+ WriteTypeConstraints_("TSource", "TResult"); #>
        {
            Acknowledge.Object(@this);
            Contract.Requires(funM != null);
<#+ if (IsNullable) { #>
            Contract.Ensures(Contract.Result<<#= Name #><IEnumerable<TResult>>>() != null);
<#+ } #>

            return @this.Select(funM).AssumeNotNull().Collect();
        }
<#+ } // End of !HasUnderlyingTypeConstraint. #>

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static IEnumerable<TSource> FilterCore<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><bool>> predicateM)
<#+ WriteTypeConstraints_("TSource"); #>
        {
<#+ WriteObjectNotNull_(true); #>
            Require.NotNull(predicateM, "predicateM");
            Contract.Ensures(Contract.Result<IEnumerable<TSource>>() != null);

            // NB: Haskell uses tail recursion, we don't.
            var list = new List<TSource>();

            foreach (var item in @this)
            {
                var m = predicateM.Invoke(item);

                if (m != null)
                {
                    m.Invoke(
                        _ =>
                        {
                            if (_ == true)
                            {
                                list.Add(item);
                            }
                        });
                }
            }

            return list;
        }

<#+ if (!HasUnderlyingTypeConstraint) { #>
<#+ // Not available since we can not enforce our generic type constraint on the underlying type of monadic return value. #>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static <#= Name #><Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>>
            MapAndUnzipCore<TSource, TFirst, TSecond>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><Tuple<TFirst, TSecond>>> funM)
<#+ WriteTypeConstraints_("TSource", "TFirst", "TSecond"); #>
        {
            Acknowledge.Object(@this);
            Contract.Requires(funM != null);
<#+ if (IsNullable && MapEnsuresSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>>>() != null);
<#+ } #>

            var m = @this.Select(funM).AssumeNotNull().Collect();

            return m.<#= MapName #>(
                tuples =>
                {
                    IEnumerable<TFirst> list1 = tuples.Select(_ => _.Item1);
                    IEnumerable<TSecond> list2 = tuples.Select(_ => _.Item2);

                    return new Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>(list1, list2);
                });
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static <#= Name #><IEnumerable<TResult>> ZipCore<TFirst, TSecond, TResult>(
            this IEnumerable<TFirst> @this,
            IEnumerable<TSecond> second,
            Func<TFirst, TSecond, <#= Name #><TResult>> resultSelectorM)
<#+ WriteTypeConstraints_("TFirst", "TSecond", "TResult"); #>
        {
            Require.NotNull(resultSelectorM, "resultSelectorM");

            Acknowledge.Object(@this);
            Contract.Requires(second != null);
<#+ if (IsNullable) { #>
            Contract.Ensures(Contract.Result<<#= Name #><IEnumerable<TResult>>>() != null);
<#+ } #>

            Func<TFirst, TSecond, <#= Name #><TResult>> resultSelector
                = (v1, v2) => resultSelectorM.Invoke(v1, v2);

            // WARNING: Do not remove "resultSelector", otherwise .NET will make a recursive call
            // instead of using the Zip from LINQ.
            return @this.Zip(second, resultSelector: resultSelector).AssumeNotNull().Collect();
        }
<#+ } // End of !HasUnderlyingTypeConstraint. #>

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static <#= Name #><TAccumulate> FoldCore<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulatorM)
<#+ WriteTypeConstraints_("TSource", "TAccumulate"); #>
        {
<#+ WriteObjectNotNull_(true); #>
            Require.NotNull(accumulatorM, "accumulatorM");
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TAccumulate>>() != null);
<#+ } #>

            <#= Name #><TAccumulate> result = <#= Name #>.<#= ReturnName #>(seed);

            foreach (TSource item in @this)
            {
<#+ if (IsNullable && !HasZero) { #>
                if (result == null) 
                {
                    return null;
                }

<#+ } #>
                result = result.Bind(_ => accumulatorM.Invoke(_, item));
            }

            return result;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static <#= Name #><TAccumulate> FoldBackCore<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulatorM)
<#+ WriteTypeConstraints_("TSource", "TAccumulate"); #>
        {
            Acknowledge.Object(@this);
            Contract.Requires(accumulatorM != null);
<#+ // "Fold" can not guarantee non null return value. #>
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TAccumulate>>() != null);
<#+ } #>

            return @this.Reverse().AssumeNotNull().Fold(seed, accumulatorM);
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static <#= Name #><TSource> ReduceCore<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulatorM)
<#+ WriteTypeConstraints_("TSource"); #>
        {
<#+ WriteObjectNotNull_(true); #>
            Require.NotNull(accumulatorM, "accumulatorM");
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            using (var iter = @this.GetEnumerator())
            {
                if (!iter.MoveNext())
                {
                    throw new InvalidOperationException("Source sequence was empty.");
                }

                <#= Name #><TSource> result = <#= Name #>.<#= ReturnName #>(iter.Current);

                while (iter.MoveNext())
                {
<#+ if (IsNullable && !HasZero) { #>
                    if (result == null) 
                    {
                        return null;
                    }

<#+ } #>
                    result = result.Bind(_ => accumulatorM.Invoke(_, iter.Current));
                }

                return result;
            }
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static <#= Name #><TSource> ReduceBackCore<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulatorM)
<#+ WriteTypeConstraints_("TSource"); #>
        {
            Acknowledge.Object(@this);
            Contract.Requires(accumulatorM != null);
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            return @this.Reverse().AssumeNotNull().Reduce(accumulatorM);
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static <#= Name #><TAccumulate> FoldCore<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulatorM,
            Func<<#= Name #><TAccumulate>, bool> predicate)
<#+ WriteTypeConstraints_("TSource", "TAccumulate"); #>
        {
<#+ WriteObjectNotNull_(true); #>
            Require.NotNull(accumulatorM, "accumulatorM");
            Require.NotNull(predicate, "predicate");
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TAccumulate>>() != null);
<#+ } #>

            <#= Name #><TAccumulate> result = <#= Name #>.<#= ReturnName #>(seed);

            using (var iter = @this.GetEnumerator())
            {
                while (predicate.Invoke(result) && iter.MoveNext())
                {
<#+ if (IsNullable && !HasZero) { #>
                    if (result == null)
                    {
                        return null;
                    }

<#+ } #>
                    result = result.Bind(_ => accumulatorM.Invoke(_, iter.Current));
                }
            }

            return result;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static <#= Name #><TSource> ReduceCore<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulatorM,
            Func<<#= Name #><TSource>, bool> predicate)
<#+ WriteTypeConstraints_("TSource"); #>
        {
<#+ WriteObjectNotNull_(true); #>
            Require.NotNull(accumulatorM, "accumulatorM");
            Require.NotNull(predicate, "predicate");
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            using (var iter = @this.GetEnumerator())
            {
                if (!iter.MoveNext())
                {
                    throw new InvalidOperationException("Source sequence was empty.");
                }

                <#= Name #><TSource> result = <#= Name #>.<#= ReturnName #>(iter.Current);

                while (predicate.Invoke(result) && iter.MoveNext())
                {
<#+ if (IsNullable && !HasZero) { #>
                    if (result == null)
                    {
                        return null;
                    }

<#+ } #>
                    result = result.Bind(_ => accumulatorM.Invoke(_, iter.Current));
                }

                return result;
            }
        }
    } // End of the class Enumerable<#= Name #>Extensions.
<#+
    } // End of EmitEnumerableInternalExtensions().

    /* ========================================================================================== *
     * Private Methods
     * ========================================================================================== */

    private void WriteHeader_()
    {
        if (_headerWritten) {
            return;
        }
#>
// Copyright (c) Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
//
// Runtime Version: <#= System.Environment.Version #>
// </auto-generated>
//------------------------------------------------------------------------------

using global::System.Diagnostics.CodeAnalysis;

// See http://msdn.microsoft.com/en-us/library/ms244717.aspx for an explanation 
// of the effect of the SuppressMessage attribute at module scope.
// This suppresses the corresponding warnings for the code inside the generated file.
// We either favour T4 readibility over StyleCop rules or disable rules that do not make sense 
// for files generated by a Text Template.
[module: SuppressMessage("StyleCop.CSharp.OrderingRules", "SA1202:ElementsMustBeOrderedByAccess",
    Justification = "[GeneratedCode] Elements are correctly ordered in the T4 source file.")]
[module: SuppressMessage("StyleCop.CSharp.OrderingRules", "SA1210:UsingDirectivesMustBeOrderedAlphabeticallyByNamespace",
    Justification = "[GeneratedCode] Directives are correctly ordered in the T4 source file.")]
[module: SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass",
    Justification = "[GeneratedCode] A T4 template may contain multiple classes.")]
[module: SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1403:FileMayOnlyContainASingleNamespace",
    Justification = "[GeneratedCode] A T4 template may contain multiple namespaces.")]
[module: SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1505:OpeningCurlyBracketsMustNotBeFollowedByBlankLine",
    Justification = "[GeneratedCode] Newline rules are disabled for T4 templates.")]
[module: SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1507:CodeMustNotContainMultipleBlankLinesInARow",
    Justification = "[GeneratedCode] Newline rules are disabled for T4 templates.")]

<#+
        _headerWritten = true;
    } // End of WriteHeader_().
    
    private void WriteCompilerAttributes_()
    {
#>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating.12.0", "12.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCode]
<#+
    } // End of WriteCompilerAttributes_().
    
    private string InferName_() 
    {
        return System.IO.Path.GetFileNameWithoutExtension(Host.TemplateFile);
    }
    
    private string InferNamespace_() 
    {
        return System.Runtime.Remoting.Messaging.CallContext
            .LogicalGetData("NamespaceHint")
            .ToString();
    }
    
    private void WriteTypeConstraints_(params string[] names)
    {
        if (HasUnderlyingTypeConstraint) {
            foreach (var name in names) {
#>
            where <#= name #> : <#= UnderlyingTypeConstraint #>
<#+
            }
        }
    } // End of WriteTypeConstraints_().

    private void WriteObjectNotNull_(bool force = false) 
    {
        if (force || IsNullable) {
#>
            Require.Object(@this);
<#+
        }
    } // End of WriteObjectNotNull_().
    
    private void WriteNotNull_(string name) 
    {
        if (IsNullable) {
#>
            Require.NotNull(<#= name #>, "<#= name #>");
<#+
        }
    } // End of WriteNotNull_().
    
    private void ThrowIfInitialized_() 
    {
        if (_initialized) {
            throw new InvalidOperationException("You can only initialize the template once.");
        }
    }

    private void WriteNewLine_()
    {
        WriteLine(String.Empty);
    }
#>
