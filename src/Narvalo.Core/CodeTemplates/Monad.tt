<#@ template debug="true" hostspecific="true" #>
<#@ output extension=".g.cs" #><#+

    // NB: Documentation is almost blindly copied from Haskell.

    // TODO:
    // Protect the various property's setters.

    // The following is going to change:
    // If the monad does have a zero, we do expect "Bind" & "η" to never return null but the zero.
    // If the monad does not have a zero, we do not have any expectation on the return value of Bind.

    /* ========================================================================================== *
     * Fields
     * ========================================================================================== */

    private bool _initialized = false;
    private bool _headerWritten = false;
    
    private string _name;
    private string _namespace;
    private string _linqNamespace;
    
    private bool _isNullable = true;
    private bool _preferLinqDialect = true;

    private string _plusName = "Plus";
    private string _returnName = "Return";
    private string _zeroName = "Zero";

    /* ========================================================================================== *
     * Properties
     * ========================================================================================== */

    // Gets or sets the name of the namespace.
    // If no namespace was given, it will be infered from the template location.
    protected string Namespace
    {
        get
        {
            if (_namespace == null) {
                _namespace = InferNamespace_();
            }

            return _namespace;
        }

        set
        {
            if (_namespace != null) {
                throw new InvalidOperationException("You can set the name of the namespace only once.");
            }

            if (String.IsNullOrWhiteSpace(value)) {
                throw new ArgumentException("The namespace can not be null or blank.");
            }

            _namespace = value;
        }
    }
    
    // Gets or sets the name of the LINQ namespace.
    // If no namespace was given, it will be infered from the template location.
    protected string LinqNamespace
    {
        get
        {
            if (_linqNamespace == null) {
                _linqNamespace = InferNamespace_();
            }

            return _linqNamespace;
        }

        set
        {
            if (_linqNamespace != null) {
                throw new InvalidOperationException("You can set the name of the LINQ namespace only once.");
            }

            if (String.IsNullOrWhiteSpace(value)) {
                throw new ArgumentException("The LINQ namespace can not be null or blank.");
            }

            _linqNamespace = value;
        }
    }
    
    // Gets or sets the name of the monad.
    // If no name was given, it will be infered from the template name.
    protected string Name
    {
        get
        {
            if (_name == null) {
                _name = InferName_();
            }

            return _name;
        }

        set
        {
            if (_name != null) {
                throw new InvalidOperationException("You can set the name of the monad only once.");
            }

            if (String.IsNullOrWhiteSpace(value)) {
                throw new ArgumentException("The name can not be null or blank.");
            }

            _name = value;
        }
    }
    
    // Gets or sets a value indicating whether Monad<T>.Bind() ensures a non-null return value. Default to false.
    protected bool BindReturnsSome { get; set; }
    
    // Gets or sets a value indicating whether Monad<T>.η() ensures a non-null return value. Default to false.
    // NB: Monad<T>.Return() being just the public alias of Monad<T>.η(), this also applies
    // to the Monad<T>.Return() method.
    protected bool UnitReturnsSome { get; set; }

    // Gets or sets a value indicating whether Monad<T>.μ() ensures a non-null return value. Default to false.
    // NB: Monad<T>.Flatten() being just the public alias of Monad<T>.μ(), this also applies
    // to the Monad<T>.Flatten() method.
    protected bool MultiplicationReturnsSome { get; set; }

    // Gets or sets a value indicating whether Monad<T>.When() ensures a non-null return value. Always true.
    // NB: Whatever happen, Monad<T>.When() always return a non-null value.
    protected bool WhenReturnsSome { get { return true; } }

    // Gets a value indicating whether Monad<T>.Map() ensures a non-null return value. Default to false.
    // NB: Monad<T>.Map() uses Monad<T>.Bind().
    protected bool MapReturnsSome { get { return BindReturnsSome; } }

    // Gets a value indicating whether Monad<T>.Filter() ensures a non-null return value. Default to false.
    // NB: Monad<T>.Filter() uses Monad<T>.Bind().
    protected bool FilterReturnsSome { get { return BindReturnsSome; } }
    
    // Gets a value indicating whether Monad<T>.Coalesce() ensures a non-null return value. Default to false.
    // NB: Monad<T>.Coalesce() uses Monad<T>.Bind().
    protected bool CoalesceReturnsSome { get { return BindReturnsSome; } }
    
    // Gets a value indicating whether Monad<T>.Then() ensures a non-null return value. Default to false.
    // NB: Monad<T>.Then() uses Monad<T>.Coalesce().
    protected bool ThenReturnsSome { get { return CoalesceReturnsSome; } }
    
    // Gets a value indicating whether Monad<T>.Join() ensures a non-null return value. Default to false.
    // NB: Monad<T>.Join() uses Monad<T>.Map().
    protected bool JoinReturnsSome { get { return MapReturnsSome; } }

    // Gets a value indicating whether Monad<T>.GroupJoin() ensures a non-null return value. Default to false.
    // NB: Monad<T>.GroupJoin() uses Monad<T>.Map().
    protected bool GroupJoinReturnsSome { get { return MapReturnsSome; } }
    
    // Gets or sets a value indicating whether the underlying type T is nullable. Default to true.
    protected bool IsNullable { get { return _isNullable; } set { _isNullable = value; } }

    // Gets or sets a value indicating whether the underlying type T is a struct. Default to false.
    // REVIEW: Isn't it simply !IsNullable?
    protected bool RequireStruct { get; set; }
    
    // Gets or sets a value indicating whether the monad is a MonadPlus. Default to false.
    protected bool HasPlus { get; set; }

    // Gets or sets a value indicating whether the monad is a MonadZero. Default to false.
    protected bool HasZero { get; set; }

    // Gets or sets the name of the Zero property. Default to "Zero".
    protected string ZeroName { 
        get 
        { 
            if (!HasZero) {
                throw new InvalidOperationException("The monad is not a MonadZero.");
            }
            
            return _zeroName; 
        }  

        set
        {
            if (String.IsNullOrWhiteSpace(value)) {
                throw new ArgumentException("The name of the Zero property can not be null or blank.");
            }
            
            _zeroName = value;
        } 
    }
    
    // Gets or sets the name of the Plus method. Default to "Plus".
    protected string PlusName
    {
        get
        { 
            if (!HasPlus) {
                throw new InvalidOperationException("The monad is not a MonadPlus.");
            }

            return _plusName; 
        }

        set
        {
            if (String.IsNullOrWhiteSpace(value)) {
                throw new ArgumentException("The name of the Plus method can not be null or blank.");
            }
            
            _plusName = value;
        } 
    }

    // Gets or sets a value indicating whether we prefer to use the LINQ dialect. Default to true.
    // Among other things, this property changes the names of the Map and Filter methods.
    protected bool PreferLinqDialect { 
        get { return _preferLinqDialect; }
        set { _preferLinqDialect = value; }
    }

    // Gets the name of the Filter method.
    protected string FilterName
    {
        get 
        { 
            if (!HasZero) {
                throw new InvalidOperationException("The monad does not have a Zero.");
            }

            return PreferLinqDialect ? "Where" : "Filter";
        }
    }
    
    // Gets the name of the Map method.
    protected string MapName
    {
        get { return PreferLinqDialect ? "Select" : "Map"; }
    }
    
    // Gets or sets the name of the Return method. Default to "Return".
    protected string ReturnName
    {
        get { return _returnName; }

        set 
        {
            if (String.IsNullOrWhiteSpace(value)) {
                throw new ArgumentException("The name of the Return method can not be null or blank.");
            }
            
            _returnName = value; 
        }
    }
    
    /* ========================================================================================== *
     * "Constructors". NB: All constructors are mutually exclusive.
     * ========================================================================================== */

    // Initializes a MonadZero.
    public void InitializeZero()
    {
        ThrowIfInitialized_();
        
        HasZero = true;
        //ZeroName = "Zero";

        _initialized = true;
    }
    
    // Initializes a MonadPlus.
    public void InitializePlus()
    {
        ThrowIfInitialized_();
        
        HasZero = true;
        //ZeroName = "Zero";

        HasPlus = true;
        //PlusName = "Plus";

        _initialized = true;
    }
    
    // Initializes a MonadOr.
    public void InitializeOr()
    {
        ThrowIfInitialized_();
        
        HasZero = true;
        ZeroName = "None";

        HasPlus = true;
        PlusName = "OrElse";

        _initialized = true;
    }
    
    /* ========================================================================================== *
     * Public Methods
     * ========================================================================================== */

    // EmitMonad -----------------------------------------------------------------------------------

    // Generates a Monad.
    public void EmitMonad()
    {
        WriteHeader_();
#>
namespace <#= Namespace #> 
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Diagnostics.Contracts;
    using System.Linq;

    using global::Narvalo;

<#+ EmitCoreClass(); #>
<#+ NewLine_(); #>
<#+ EmitExtensions(); #>
<#+ NewLine_(); #>
<#+ EmitKleisliExtensions(); #>
}
<#+
    } // End of EmitMonad().

    // EmitComonad ---------------------------------------------------------------------------------
    
    // Generates a Comonad.
    public void EmitComonad()
    {
        WriteHeader_();
#>
namespace <#= Namespace #> 
{
    using System.Diagnostics.Contracts;

<#+ EmitCoreComonad(); #>
}
<#+
    } // End of EmitComonad().

    // EmitLinq ------------------------------------------------------------------------------------
    
    // Generates the LINQ extensions.
    public void EmitLinq()
    {
        WriteHeader_();
#>
namespace <#= LinqNamespace #> 
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.Contracts;

    using <#= Namespace #>;
    using <#= LinqNamespace #>.Internal;

<#+ EmitEnumerableMonadExtensions(); #>
<#+ NewLine_(); #>
<#+ EmitEnumerableExtensions(); #>
}

namespace <#= LinqNamespace #>.Internal
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Diagnostics.Contracts;
    using System.Linq;

    using global::Narvalo;
    using <#= Namespace #>;

<#+ EmitEnumerableMonadInternalExtensions(); #>
<#+ NewLine_(); #>
<#+ EmitEnumerableInternalExtensions(); #>
}
<#+
    } // End of EmitLinq().
    
    /* ========================================================================================== *
     * Protected Methods
     * ========================================================================================== */

    // EmitCoreClass -------------------------------------------------------------------------------

    // Generates the core Monad methods.
    protected void EmitCoreClass() 
    {
#>
    /// <summary>
    /// Provides a set of static and extension methods for <see cref="<#= Name #>{T}" />.
    /// </summary>
    /// <remarks>
    /// Sometimes we prefer to use extension methods over static methods to be able to locally override them.
    /// </remarks>
<#+ WriteCompilerAttributes_(); #>
    public static partial class <#= Name #>
    {
        private static readonly <#= Name #><global::Narvalo.Fx.Unit> s_Unit = <#= ReturnName #>(global::Narvalo.Fx.Unit.Single);
<#+ if (HasZero) { #>
        private static readonly <#= Name #><global::Narvalo.Fx.Unit> s_<#= ZeroName #> = <#= Name #><global::Narvalo.Fx.Unit>.<#= ZeroName #>;
<#+ } #>

        /// <summary>
        /// Gets the unique object of type <c><#= Name #>&lt;Unit&gt;</c>.
        /// </summary>
        /// <value>The unique object of type <c><#= Name #>&lt;Unit&gt;</c>.</value>
        public static <#= Name #><global::Narvalo.Fx.Unit> Unit { get { return s_Unit; } }

<#+ if (HasZero) { #>
        /// <summary>
        /// Gets the zero for <see cref="<#= Name #>{T}"/>.
        /// </summary>
        /// <remarks>
        /// Named <c>mzero</c> in Haskell parlance.
        /// </remarks>
        /// <value>The zero for <see cref="<#= Name #>{T}"/>.</value>
        public static <#= Name #><global::Narvalo.Fx.Unit> <#= ZeroName #> { get { return s_<#= ZeroName #>; } }
<#+ } #>

        /// <summary>
        /// Obtains an instance of the <see cref="<#= Name #>{T}"/> class for the specified value.
        /// </summary>
        /// <remarks>
        /// Named <c>return</c> in Haskell parlance.
        /// </remarks>
        /// <typeparam name="T">The underlying type of the <paramref name="value"/>.</typeparam>
        /// <param name="value">A value to be wrapped into a <see cref="<#= Name #>{T}"/> object.</param>
        /// <returns>An instance of the <see cref="<#= Name #>{T}"/> class for the specified value.</returns>
        public static <#= Name #><T> <#= ReturnName #><T>(T value)
<#+ StructConstraint_("T"); #>
        {
<#+ if (IsNullable && UnitReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><T>>() != null);
<#+ } #>

            return <#= Name #><T>.η(value);
        }
        
        #region Generalisations of list functions (Prelude)

        /// <summary>
        /// Removes one level of structure, projecting its bound value into the outer level.
        /// </summary>
        /// <remarks>
        /// Named <c>join</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><T> Flatten<T>(<#= Name #><<#= Name #><T>> square)
<#+ StructConstraint_("T"); #>
        {
<#+ if (IsNullable) { #>
            Contract.Requires(square != null);
<#+ } #>
<#+ if (IsNullable && MultiplicationReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><T>>() != null);
<#+ } #>

            return <#= Name #><T>.μ(square);
        }

        #endregion

        #region Monadic lifting operators (Prelude)

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T}" /> values.
        /// </summary>
        /// <remarks>
        /// Named <c>liftM</c> in Haskell parlance.
        /// </remarks>
        public static Func<<#= Name #><T>, <#= Name #><TResult>> Lift<T, TResult>(
            Func<T, TResult> fun)
<#+ StructConstraint_("T"); #>
<#+ StructConstraint_("TResult"); #>
        {
            Contract.Ensures(Contract.Result<Func<<#= Name #><T>, <#= Name #><TResult>>>() != null);

            return m => {
<#+ if (!RequireStruct) { PushIndent("    "); NotNull_("m", MapName, true); PopIndent(); }  #>
                return m.<#= MapName #>(fun);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T}" /> values, scanning the 
        /// monadic arguments from left to right.
        /// </summary>
        /// <remarks>
        /// Named <c>liftM2</c> in Haskell parlance.
        /// </remarks>
        public static Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><TResult>>
            Lift<T1, T2, TResult>(Func<T1, T2, TResult> fun)
<#+ StructConstraint_("T1"); #>
<#+ StructConstraint_("T2"); #>
<#+ StructConstraint_("TResult"); #>
        {
            Contract.Ensures(Contract.Result<Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><TResult>>>() != null);

            return (m1, m2) => {
<#+ if (!RequireStruct) { PushIndent("    "); NotNull_("m1", "Zip", true); PopIndent(); }  #>
                return m1.Zip(m2, fun);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T}" /> values, scanning the 
        /// monadic arguments from left to right.
        /// </summary>
        /// <remarks>
        /// Named <c>liftM3</c> in Haskell parlance.
        /// </remarks>
        public static Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><T3>, <#= Name #><TResult>>
            Lift<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> fun)
<#+ StructConstraint_("T1"); #>
<#+ StructConstraint_("T2"); #>
<#+ StructConstraint_("T3"); #>
<#+ StructConstraint_("TResult"); #>
        {
            Contract.Ensures(Contract.Result<Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><T3>, <#= Name #><TResult>>>() != null);

            return (m1, m2, m3) => {
<#+ if (!RequireStruct) { PushIndent("    "); NotNull_("m1", "Zip", true); PopIndent(); }  #>
                return m1.Zip(m2, m3, fun);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        /// <remarks>
        /// Named <c>liftM4</c> in Haskell parlance.
        /// </remarks>
        public static Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><T3>, <#= Name #><T4>, <#= Name #><TResult>>
            Lift<T1, T2, T3, T4, TResult>(
            Func<T1, T2, T3, T4, TResult> fun)
<#+ StructConstraint_("T1"); #>
<#+ StructConstraint_("T2"); #>
<#+ StructConstraint_("T3"); #>
<#+ StructConstraint_("T4"); #>
<#+ StructConstraint_("TResult"); #>
        {
            Contract.Ensures(Contract.Result<Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><T3>, <#= Name #><T4>, <#= Name #><TResult>>>() != null);
            
            return (m1, m2, m3, m4) => {
<#+ if (!RequireStruct) { PushIndent("    "); NotNull_("m1", "Zip", true); PopIndent(); }  #>
                return m1.Zip(m2, m3, m4, fun);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="<#= Name #>{T}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        /// <remarks>
        /// Named <c>liftM5</c> in Haskell parlance.
        /// </remarks>
        public static Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><T3>, <#= Name #><T4>, <#= Name #><T5>, <#= Name #><TResult>>
            Lift<T1, T2, T3, T4, T5, TResult>(
            Func<T1, T2, T3, T4, T5, TResult> fun)
<#+ StructConstraint_("T1"); #>
<#+ StructConstraint_("T2"); #>
<#+ StructConstraint_("T3"); #>
<#+ StructConstraint_("T4"); #>
<#+ StructConstraint_("T5"); #>
<#+ StructConstraint_("TResult"); #>
        {
            Contract.Ensures(Contract.Result<Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><T3>, <#= Name #><T4>, <#= Name #><T5>, <#= Name #><TResult>>>() != null);
       
            return (m1, m2, m3, m4, m5) => {
<#+ if (!RequireStruct) { PushIndent("    "); NotNull_("m1", "Zip", true); PopIndent(); }  #>
                return m1.Zip(m2, m3, m4, m5, fun);
            };
        }

        #endregion
    } // End of the class <#= Name #>.
<#+
    } // End of EmitCoreClass().
    
    // EmitCoreComonad -----------------------------------------------------------------------------

    protected void EmitCoreComonad() 
    {
#>
    // Implements core Comonad methods.
    public static partial class <#= Name #>
    {
        /// <remarks>
        /// Named <c>extract</c> in Haskell parlance.
        /// </remarks>
        public static T Extract<T>(<#= Name #><T> monad)
<#+ StructConstraint_("T"); #>
        {
            Contract.Requires(monad != null);

            return <#= Name #><T>.ε(monad);
        }

        /// <remarks>
        /// Named <c>duplicate</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><<#= Name #><T>> Duplicate<T>(<#= Name #><T> monad)
<#+ StructConstraint_("T"); #>
        {
            return <#= Name #><T>.δ(monad);
        }
    } // End of the class <#= Name #>.
<#+
    } // End of EmitCoreComonad().

    // EmitExtensions ------------------------------------------------------------------------------

    protected void EmitExtensions()
    {
#>
    /// <content>
    /// Provides core Monad extension methods.
    /// </content>
    public static partial class <#= Name #>
    {
        #region Basic Monad functions (Prelude)

        /// <remarks>
        /// Named <c>fmap</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><TResult> <#= MapName #><TSource, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, TResult> selector)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(true); #>
<#+ NotNull_("selector", false); #>
<#+ if (IsNullable && BindReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.Bind(_ => <#= Name #>.<#= ReturnName #>(selector.Invoke(_)));
        }

        /// <remarks>
        /// Named <c>&gt;&gt;</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><TResult> Then<TSource, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TResult> other)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(true); #>
<#+ if (IsNullable && BindReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.Bind(_ => other);
        }
        
        #endregion

        #region Generalisations of list functions (Prelude)

<#+ if (HasZero) { #>
        /// <remarks>
        /// Named <c>mfilter</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><TSource> <#= FilterName #><TSource>(
            this <#= Name #><TSource> @this,
            Func<TSource, bool> predicate)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(true); #>
<#+ NotNull_("predicate", false); #>
<#+ if (IsNullable && BindReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            return @this.Bind(
                _ => predicate.Invoke(_) ? @this : <#= Name #><TSource>.<#= ZeroName #>);
        }
<#+ } // End of HasZero. #>

<#+ if (!RequireStruct) { #>

        /// <remarks>
        /// Named <c>replicateM</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><IEnumerable<TSource>> Repeat<TSource>(
            this <#= Name #><TSource> @this,
            int count)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(MapName, true); #>
            Require.GreaterThanOrEqualTo(count, 1, "count");
<#+ if (IsNullable && MapReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><IEnumerable<TSource>>>() != null);
<#+ } #>

            return @this.<#= MapName #>(_ => Enumerable.Repeat(_, count));
        }
<#+ } // End of !RequireStruct. #>
        
        #endregion

        #region Conditional execution of monadic expressions (Prelude)

<#+ if (HasZero) { #>
        /// <remarks>
        /// Named <c>guard</c> in Haskell parlance.
        /// </remarks>
        [SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "this",
            Justification = "Extension method intended to be used in a fluent way.")]
        public static <#= Name #><global::Narvalo.Fx.Unit> Guard<TSource>(
            this <#= Name #><TSource> @this,
            bool predicate)
<#+ StructConstraint_("TSource"); #>
        {
<#+ if (IsNullable) { #>
            Contract.Ensures(Contract.Result<<#= Name #><global::Narvalo.Fx.Unit>>() != null);
<#+ } #>

            return predicate ? <#= Name #>.Unit : <#= Name #>.<#= ZeroName #>;
        }
<#+ } // End of HasZero. #>

        /// <remarks>
        /// Named <c>when</c> in Haskell parlance.
        /// </remarks>
        [SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "this",
            Justification = "Extension method intended to be used in a fluent way.")]
        public static <#= Name #><global::Narvalo.Fx.Unit> When<TSource>(
            this <#= Name #><TSource> @this, 
            bool predicate, 
            Action action)
<#+ StructConstraint_("TSource"); #>
        {
            Require.NotNull(action, "action");
<#+ if (IsNullable) { #>
            Contract.Ensures(Contract.Result<<#= Name #><global::Narvalo.Fx.Unit>>() != null);
<#+ } #>

            if (predicate) {
                action.Invoke();
            }

            return <#= Name #>.Unit;
        }

        /// <remarks>
        /// Named <c>unless</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><global::Narvalo.Fx.Unit> Unless<TSource>(
            this <#= Name #><TSource> @this,
            bool predicate,
            Action action)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(true); #>
            Contract.Requires(action != null);
<#+ if (IsNullable && WhenReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><global::Narvalo.Fx.Unit>>() != null);
<#+ } #>

            return @this.When(!predicate, action);
        }

        #endregion

        #region Monadic lifting operators (Prelude)

        /// <see cref="Lift{T1, T2, T3}" />
        public static <#= Name #><TResult> Zip<TFirst, TSecond, TResult>(
            this <#= Name #><TFirst> @this,
            <#= Name #><TSecond> second,
            Func<TFirst, TSecond, TResult> resultSelector)
<#+ StructConstraint_("TFirst"); #>
<#+ StructConstraint_("TSecond"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(true); #>
<#+ NotNull_("second", MapName, true); #>
<#+ NotNull_("resultSelector", false); #>
<#+ if (IsNullable && BindReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.Bind(v1 => second.<#= MapName #>(v2 => resultSelector.Invoke(v1, v2)));
        }

        /// <see cref="Lift{T1, T2, T3, T4}" />
        public static <#= Name #><TResult> Zip<T1, T2, T3, TResult>(
            this <#= Name #><T1> @this,
            <#= Name #><T2> second,
            <#= Name #><T3> third,
            Func<T1, T2, T3, TResult> resultSelector)
<#+ StructConstraint_("T1"); #>
<#+ StructConstraint_("T2"); #>
<#+ StructConstraint_("T3"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(true); #>
<#+ NotNull_("second", "Zip", true); #>
<#+ NotNull_("resultSelector", false); #>
<#+ if (IsNullable && BindReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            Func<T1, <#= Name #><TResult>> g
                = t1 => second.Zip(third, (t2, t3) => resultSelector.Invoke(t1, t2, t3));

            return @this.Bind(g);
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5}" />
        public static <#= Name #><TResult> Zip<T1, T2, T3, T4, TResult>(
             this <#= Name #><T1> @this,
             <#= Name #><T2> second,
             <#= Name #><T3> third,
             <#= Name #><T4> fourth,
             Func<T1, T2, T3, T4, TResult> resultSelector)
<#+ StructConstraint_("T1"); #>
<#+ StructConstraint_("T2"); #>
<#+ StructConstraint_("T3"); #>
<#+ StructConstraint_("T4"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(true); #>
<#+ NotNull_("second", "Zip", true); #>
<#+ NotNull_("resultSelector", false); #>
<#+ if (IsNullable && BindReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            Func<T1, <#= Name #><TResult>> g
                = t1 => second.Zip(
                    third,
                    fourth, 
                    (t2, t3, t4) => resultSelector.Invoke(t1, t2, t3, t4));

            return @this.Bind(g);
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5, T6}" />
        public static <#= Name #><TResult> Zip<T1, T2, T3, T4, T5, TResult>(
            this <#= Name #><T1> @this,
            <#= Name #><T2> second,
            <#= Name #><T3> third,
            <#= Name #><T4> fourth,
            <#= Name #><T5> fifth,
            Func<T1, T2, T3, T4, T5, TResult> resultSelector)
<#+ StructConstraint_("T1"); #>
<#+ StructConstraint_("T2"); #>
<#+ StructConstraint_("T3"); #>
<#+ StructConstraint_("T4"); #>
<#+ StructConstraint_("T5"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(true); #>
<#+ NotNull_("second", "Zip", true); #>
<#+ NotNull_("resultSelector", false); #>
<#+ if (IsNullable && BindReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            Func<T1, <#= Name #><TResult>> g
                = t1 => second.Zip(
                    third,
                    fourth, 
                    fifth,
                    (t2, t3, t4, t5) => resultSelector.Invoke(t1, t2, t3, t4, t5));

            return @this.Bind(g);
        }

        #endregion

        #region Query Expression Pattern

<#+ if (!PreferLinqDialect) { #>
<#+ if (HasZero) { #>
        public static <#= Name #><TSource> Where<TSource>(
            this <#= Name #><TSource> @this, 
            Func<TSource, bool> predicate)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(FilterName, true); #>
<#+ if (IsNullable && FilterReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            return @this.<#= FilterName #>(predicate);
        }
<#+ } // End of HasZero. #>

        public static <#= Name #><TResult> Select<TSource, TResult>(
            this <#= Name #><TSource> @this, 
            Func<TSource, TResult> selector)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(MapName, true); #>
<#+ if (IsNullable && MapReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.<#= MapName #>(selector);
        }
<#+ } // End of !PreferLinqDialect. #>

        /// <remarks>
        /// Kind of generalisation of Zip (liftM2).
        /// </remarks>
        public static <#= Name #><TResult> SelectMany<TSource, TMiddle, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, <#= Name #><TMiddle>> valueSelectorM,
            Func<TSource, TMiddle, TResult> resultSelector)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TMiddle"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(true); #>
<#+ NotNull_("valueSelectorM", false); #>
<#+ NotNull_("resultSelector", false); #>
<#+ if (IsNullable && BindReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.Bind(
                _ => valueSelectorM.Invoke(_).<#= MapName #>(
                    middle => resultSelector.Invoke(_, middle)));
        }

<#+ if (HasZero) { #>
        public static <#= Name #><TResult> Join<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TInner"); #>
<#+ StructConstraint_("TKey"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_("Join", true); #>
<#+ if (IsNullable) { #>
            Contract.Requires(inner != null);
<#+ } #>
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(resultSelector != null);
<#+ if (IsNullable && JoinReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.Join(
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                EqualityComparer<TKey>.Default);
        }

        public static <#= Name #><TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, <#= Name #><TInner>, TResult> resultSelector)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TInner"); #>
<#+ StructConstraint_("TKey"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_("GroupJoin", true); #>
<#+ if (IsNullable) { #>
            Contract.Requires(inner != null);
<#+ } #>
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(resultSelector != null);
<#+ if (IsNullable && GroupJoinReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.GroupJoin(
                inner, 
                outerKeySelector,
                innerKeySelector, 
                resultSelector, 
                EqualityComparer<TKey>.Default);
        }
<#+ } // End of HasZero. #>

        #endregion
        
        #region LINQ extensions

<#+ if (HasZero) { #>
        public static <#= Name #><TResult> Join<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TInner"); #>
<#+ StructConstraint_("TKey"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ if (IsNullable) { #>
            Contract.Requires(@this != null);
            Contract.Requires(inner != null);
<#+ } #>
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(resultSelector != null);
<#+ if (IsNullable && JoinReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return JoinCore_(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                comparer ?? EqualityComparer<TKey>.Default);
        }

        public static <#= Name #><TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, <#= Name #><TInner>, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TInner"); #>
<#+ StructConstraint_("TKey"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ if (IsNullable) { #>
            Contract.Requires(@this != null);
            Contract.Requires(inner != null);
<#+ } #>
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(resultSelector != null);
<#+ if (IsNullable && GroupJoinReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return GroupJoinCore_(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                comparer ?? EqualityComparer<TKey>.Default);
        }
        
        private static <#= Name #><TResult> JoinCore_<TSource, TInner, TKey, TResult>(
            <#= Name #><TSource> seq,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TInner"); #>
<#+ StructConstraint_("TKey"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ NotNull_("seq", true); #>
<#+ NotNull_("resultSelector", false); #>
<#+ if (IsNullable) { #>
            Contract.Requires(inner != null);
<#+ } #>
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(comparer != null);
<#+ if (IsNullable && MapReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>
            
            var keyLookupM = GetKeyLookup_(inner, outerKeySelector, innerKeySelector, comparer);

            return from outerValue in seq
                   from innerValue in keyLookupM.Invoke(outerValue).Then(inner)
                   select resultSelector.Invoke(outerValue, innerValue);
        }
        
        private static <#= Name #><TResult> GroupJoinCore_<TSource, TInner, TKey, TResult>(
            <#= Name #><TSource> seq,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, <#= Name #><TInner>, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TInner"); #>
<#+ StructConstraint_("TKey"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ NotNull_("seq", true); #>
<#+ NotNull_("resultSelector", false); #>
<#+ if (IsNullable) { #>
            Contract.Requires(inner != null);
<#+ } #>
            Contract.Requires(outerKeySelector != null);
            Contract.Requires(innerKeySelector != null);
            Contract.Requires(comparer != null);
<#+ if (IsNullable && MapReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            var keyLookupM = GetKeyLookup_(inner, outerKeySelector, innerKeySelector, comparer);

            return from outerValue in seq
                   select resultSelector.Invoke(outerValue, keyLookupM.Invoke(outerValue).Then(inner));
        }

        private static Func<TSource, <#= Name #><TKey>> GetKeyLookup_<TSource, TInner, TKey>(
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            IEqualityComparer<TKey> comparer)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TInner"); #>
<#+ StructConstraint_("TKey"); #>
        {
<#+ NotNull_("inner", MapName, true); #>
<#+ NotNull_("outerKeySelector", false); #>
<#+ NotNull_("comparer", false); #>
            Contract.Requires(innerKeySelector != null);
            Contract.Ensures(Contract.Result<Func<TSource, <#= Name #><TKey>>>() != null);

            return source => {
                TKey outerKey = outerKeySelector.Invoke(source);
            
                return inner.<#= MapName #>(innerKeySelector).<#= FilterName #>(_ => comparer.Equals(_, outerKey));
            };
        }
<#+ } // End of HasZero. #>

        #endregion

        #region Non-standard extensions
        
        public static <#= Name #><TResult> Coalesce<TSource, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, bool> predicate,
            <#= Name #><TResult> then,
            <#= Name #><TResult> otherwise)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(true); #>
<#+ NotNull_("predicate", false); #>
<#+ if (IsNullable && BindReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.Bind(_ => predicate.Invoke(_) ? then : otherwise);
        }

<#+ if (HasZero) { #>
        public static <#= Name #><TResult> Then<TSource, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, bool> predicate,
            <#= Name #><TResult> other)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_("Coalesce", true); #>
            Contract.Requires(predicate != null);
<#+ if (IsNullable && CoalesceReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.Coalesce(predicate, other, <#= Name #><TResult>.<#= ZeroName #>);
        }

        public static <#= Name #><TResult> Otherwise<TSource, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, bool> predicate,
            <#= Name #><TResult> other)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_("Coalesce", true); #>
            Contract.Requires(predicate != null);
<#+ if (IsNullable && CoalesceReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return @this.Coalesce(predicate, <#= Name #><TResult>.<#= ZeroName #>, other);
        }
<#+ } // End of HasZero. #>

        public static <#= Name #><TSource> Run<TSource>(
            this <#= Name #><TSource> @this,
            Action<TSource> action)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(true); #>
            Require.NotNull(action, "action");
<#+ if (IsNullable && BindReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            return @this.Bind(_ => { action.Invoke(_); return @this; });
        }

<#+ if (HasZero) { #>
        public static <#= Name #><TSource> On<#= ZeroName #><TSource>(
            this <#= Name #><TSource> @this,
            Action action)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_("Then", true); #>
<#+ NotNull_("action", false); #>
<#+ if (IsNullable && ThenReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            return @this.Then(<#= Name #>.Unit).Run(_ => action.Invoke()).Then(@this);
        }
<#+ } // End of HasZero. #>

        #endregion
    } // End of the class <#= Name #>.
<#+
    } // End of EmitExtensions().
    
    // EmitKleisliExtensions -----------------------------------------------------------------------

    public void EmitKleisliExtensions()
    {
#>
    /// <summary>
    /// Provides extension methods for <c>Func&lt;TSource, <#= Name #>&lt;TResult&gt;&gt;</c>.
    /// </summary>
    public static partial class FuncExtensions
    {
        #region Basic Monad functions (Prelude)

        /// <remarks>
        /// Named <c>=&lt;&lt;</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><TResult> Invoke<TSource, TResult>(
            this Func<TSource, <#= Name #><TResult>> @this,
            <#= Name #><TSource> value)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ NotNull_("value", true); #>
            Contract.Requires(@this != null);
<#+ if (IsNullable && BindReturnsSome) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TResult>>() != null);
<#+ } #>

            return value.Bind(@this);
        }

        /// <remarks>
        /// Named <c>&gt;=&gt;</c> in Haskell parlance.
        /// </remarks>
        public static Func<TSource, <#= Name #><TResult>> Compose<TSource, TMiddle, TResult>(
            this Func<TSource, <#= Name #><TMiddle>> @this,
            Func<TMiddle, <#= Name #><TResult>> funM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TMiddle"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(false); #>
            Contract.Requires(funM != null);
            Contract.Ensures(Contract.Result<Func<TSource, <#= Name #><TResult>>>() != null);

            return _ => @this.Invoke(_).Bind(funM);
        }

        /// <remarks>
        /// Named <c>&lt;=&lt;</c> in Haskell parlance.
        /// </remarks>
        public static Func<TSource, <#= Name #><TResult>> ComposeBack<TSource, TMiddle, TResult>(
            this Func<TMiddle, <#= Name #><TResult>> @this,
            Func<TSource, <#= Name #><TMiddle>> funM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TMiddle"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ NotNull_("funM", false); #>
            Contract.Requires(@this != null);
            Contract.Ensures(Contract.Result<Func<TSource, <#= Name #><TResult>>>() != null);

            return _ => funM.Invoke(_).Bind(@this);
        }

        #endregion
    } // End of the class FuncExtensions.
<#+
    } // End of EmitKleisliExtensions().

    // EmitEnumerableMonadExtensions ---------------------------------------------------------------

    protected void EmitEnumerableMonadExtensions()
    {
#>
    /// <summary>
    /// Provides extension methods for <c>IEnumerable&lt;<#= Name #>&lt;T&gt;&gt;</c>.
    /// </summary>
<#+ WriteCompilerAttributes_(); #>
    public static partial class Enumerable<#= Name #>Extensions
    {
        #region Basic Monad functions (Prelude)

<#+ if (!RequireStruct) { #>
        /// <remarks>
        /// Named <c>sequence</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><IEnumerable<TSource>> Collect<TSource>(
            this IEnumerable<<#= Name #><TSource>> @this)
<#+ StructConstraint_("TSource"); #>
        {
            // No need to check for null-reference, "CollectCore" is an extension method.
            Contract.Requires(@this != null);
<#+ if (IsNullable) { #>
            Contract.Ensures(Contract.Result<<#= Name #><IEnumerable<TSource>>>() != null);
<#+ } #>

            return @this.CollectCore();
        }
<#+ } // End of !RequireStruct. #>
        
        #endregion
<#+ if (HasZero && HasPlus) { #>

        #region Generalisations of list functions (Prelude)

        /// <remarks>
        /// Named <c>msum</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><TSource> Sum<TSource>(
            this IEnumerable<<#= Name #><TSource>> @this)
<#+ StructConstraint_("TSource"); #>
        {
            // No need to check for null-reference, "SumCore" is an extension method.
            Contract.Requires(@this != null);
<#+ if (IsNullable) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            return @this.SumCore();
        }

        #endregion
<#+ } // End of HasZero && HasPlus. #>
    } // End of the class Enumerable<#= Name #>Extensions.
<#+
    } // End of EmitEnumerableMonadExtensions().

    // EmitEnumerableMonadInternalExtensions -------------------------------------------------------

    protected void EmitEnumerableMonadInternalExtensions()
    {
#>
    /// <summary>
    /// Provides extension methods for <c>IEnumerable&lt;<#= Name #>&lt;T&gt;&gt;</c>
    /// and <see cref="IEnumerable{T}"/>.
    /// </summary>
    internal static partial class Enumerable<#= Name #>Extensions
    {
<#+ if (!RequireStruct) { #>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "This method has been localy overriden.")]
        internal static <#= Name #><IEnumerable<TSource>> CollectCore<TSource>(
            this IEnumerable<<#= Name #><TSource>> @this)
<#+ StructConstraint_("TSource"); #>
        {
            // No need to check for null-reference, "Enumerable.Aggregate" is an extension method.
            Contract.Requires(@this != null);
<#+ if (IsNullable) { #>
            Contract.Ensures(Contract.Result<<#= Name #><IEnumerable<TSource>>>() != null);
<#+ } #>

            var seed = <#= Name #>.<#= ReturnName #>(Enumerable.Empty<TSource>());
            Func<<#= Name #><IEnumerable<TSource>>, <#= Name #><TSource>, <#= Name #><IEnumerable<TSource>>> fun
                = (m, n) =>
                    m.Bind(list => {
                        return n.Bind(item => <#= Name #>.<#= ReturnName #>(
                            list.Concat(Enumerable.Repeat(item, 1))));
                    });

            return @this.Aggregate(seed, fun)<#+ if (IsNullable) { #>.AssumeNotNull_()<#+ } #>;
        }
<#+ } // End of !RequireStruct. #>

<#+ if (HasZero && HasPlus) { #>

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "This method has been localy overriden.")]
        internal static <#= Name #><TSource> SumCore<TSource>(
            this IEnumerable<<#= Name #><TSource>> @this)
<#+ StructConstraint_("TSource"); #>
        {
            // No need to check for null-reference, "Enumerable.Aggregate" is an extension method. 
            Contract.Requires(@this != null);
<#+ if (IsNullable) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            return @this.Aggregate(<#= Name #><TSource>.<#= ZeroName #>, (m, n) => m.<#= PlusName #>(n))<#+ if (IsNullable) { #>.AssumeNotNull_()<#+ } #>;
        }
<#+ } // End of HasZero && HasPlus. #>

        /// <summary>
        /// Instructs code analysis tools to assume that the specified value is not null,
        /// even if it cannot be statically proven to always be not null.
        /// When Code Contracts is disabled, this method is meant to be erased by the JIT compiler.
        /// </summary>
        [DebuggerHidden]
#if !CONTRACTS_FULL
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
#endif
        private static T AssumeNotNull_<T>(this T @this) where T : class
        {
            Contract.Ensures(Contract.Result<T>() == @this);
            Contract.Ensures(Contract.Result<T>() != null);
            Contract.Assume(@this != null);

            return @this;
        }
    } // End of the class Enumerable<#= Name #>Extensions.
<#+
    } // End of EmitEnumerableMonadInternalExtensions().

    // EmitEnumerableExtensions --------------------------------------------------------------------

    protected void EmitEnumerableExtensions()
    {
#>
    /// <summary>
    /// Provides extension methods for <see cref="IEnumerable{T}"/>.
    /// </summary>
    public static partial class EnumerableExtensions
    {
        #region Basic Monad functions (Prelude)

<#+ if (!RequireStruct) { #>
        /// <remarks>
        /// Named <c>mapM</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><IEnumerable<TResult>> Map<TSource, TResult>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><TResult>> funM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
            // No need to check for null-reference, "MapCore" is an extension method. 
            Contract.Requires(@this != null);
            Contract.Requires(funM != null);
<#+ if (IsNullable) { #>
            Contract.Ensures(Contract.Result<<#= Name #><IEnumerable<TResult>>>() != null);
<#+ } #>

            return @this.MapCore(funM);
        }
<#+ } #>
        
        #endregion

        #region Generalisations of list functions (Prelude)

<#+ // REVIEW: Haskell use a differente signature. #>
        /// <remarks>
        /// Named <c>filterM</c> in Haskell parlance.
        /// </remarks>
        public static IEnumerable<TSource> Filter<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><bool>> predicateM)
<#+ StructConstraint_("TSource"); #>
        {
            // No need to check for null-reference, "FilterCore" is an extension method. 
            Contract.Requires(@this != null);
            Contract.Requires(predicateM != null);
            Contract.Ensures(Contract.Result<IEnumerable<TSource>>() != null);

            return @this.FilterCore(predicateM);
        }

<#+ if (!RequireStruct) { #>
        /// <remarks>
        /// Named <c>mapAndUnzipM</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>>
            MapAndUnzip<TSource, TFirst, TSecond>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><Tuple<TFirst, TSecond>>> funM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TFirst"); #>
<#+ StructConstraint_("TSecond"); #>
        {
            // No need to check for null-reference, "MapAndUnzipCore" is an extension method. 
            Contract.Requires(@this != null);
            Contract.Requires(funM != null);
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>>>() != null);
<#+ } #>

            return @this.MapAndUnzipCore(funM);
        }

        /// <remarks>
        /// Named <c>zipWithM</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><IEnumerable<TResult>> Zip<TFirst, TSecond, TResult>(
            this IEnumerable<TFirst> @this,
            IEnumerable<TSecond> second,
            Func<TFirst, TSecond, <#= Name #><TResult>> resultSelectorM)
<#+ StructConstraint_("TFirst"); #>
<#+ StructConstraint_("TSecond"); #>
<#+ StructConstraint_("TResult"); #>
        {
            // No need to check for null-reference, "ZipCore" is an extension method. 
            Contract.Requires(@this != null);
            Contract.Requires(second != null);
            Contract.Requires(resultSelectorM != null);
<#+ if (IsNullable) { #>
            Contract.Ensures(Contract.Result<<#= Name #><IEnumerable<TResult>>>() != null);
<#+ } #>

            return @this.ZipCore(second, resultSelectorM);
        }
<#+ } #>

        /// <remarks>
        /// Named <c>foldM</c> in Haskell parlance.
        /// </remarks>
        public static <#= Name #><TAccumulate> Fold<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulatorM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TAccumulate"); #>
        {
            // No need to check for null-reference, "FoldCore" is an extension method. 
            Contract.Requires(@this != null);
            Contract.Requires(accumulatorM != null);
<#+ // "FoldCore" can not guarantee non null return value. #>
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TAccumulate>>() != null);
<#+ } #>

            return @this.FoldCore(seed, accumulatorM);
        }

        #endregion
        
        #region Aggregate Operators

        public static <#= Name #><TAccumulate> FoldBack<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulatorM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TAccumulate"); #>
        {
            // No need to check for null-reference, "FoldBackCore" is an extension method. 
            Contract.Requires(@this != null);
            Contract.Requires(accumulatorM != null);
<#+ // "FoldBackCore" can not guarantee non null return value. #>
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TAccumulate>>() != null);
<#+ } #>

            return @this.FoldBackCore(seed, accumulatorM);
        }

        public static <#= Name #><TSource> Reduce<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulatorM)
<#+ StructConstraint_("TSource"); #>
        {
            // No need to check for null-reference, "ReduceCore" is an extension method. 
            Contract.Requires(@this != null);
            Contract.Requires(accumulatorM != null);
<#+ // "ReduceCore" can not guarantee non null return value. #>
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>
            
            return @this.ReduceCore(accumulatorM);
        }

        public static <#= Name #><TSource> ReduceBack<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulatorM)
<#+ StructConstraint_("TSource"); #>
        {
            // No need to check for null-reference, "ReduceBackCore" is an extension method. 
            Contract.Requires(@this != null);
            Contract.Requires(accumulatorM != null);
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            return @this.ReduceBackCore(accumulatorM);
        }

        #endregion

        #region Catamorphisms

<#+ // REVIEW: Haskell use a differente signature. #>
        public static <#= Name #><TAccumulate> Fold<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulatorM,
            Func<<#= Name #><TAccumulate>, bool> predicate)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TAccumulate"); #>
        {
            // No need to check for null-reference, "FoldCore" is an extension method. 
            Contract.Requires(@this != null);
            Contract.Requires(accumulatorM != null);
            Contract.Requires(predicate != null);
<#+ // "FoldCore" does not guarantee non null return value. #>
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TAccumulate>>() != null);
<#+ } #>

            return @this.FoldCore(seed, accumulatorM, predicate);
        }
        
<#+ // REVIEW: Haskell use a differente signature. #>
        public static <#= Name #><TSource> Reduce<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulatorM,
            Func<<#= Name #><TSource>, bool> predicate)
<#+ StructConstraint_("TSource"); #>
        {
            // No need to check for null-reference, "ReduceCore" is an extension method. 
            Contract.Requires(@this != null);
            Contract.Requires(accumulatorM != null);
            Contract.Requires(predicate != null);
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            return @this.ReduceCore(accumulatorM, predicate);
        }

        #endregion
    } // End of the class EnumerableExtensions.
<#+
    } // End of EmitEnumerableExtensions().
    
    // EmitEnumerableInternalExtensions ------------------------------------------------------------

    protected void EmitEnumerableInternalExtensions()
    {
        // Normally we would name the class with EnumerableExtensions, but we prefer
        // Enumerable{Name}Extensions to avoid any method collision.
        // Indeed if we generate two monads in the same namespace, we would end up 
        // with two methods named AssumeNotNull_() in the same class EnumerableExtensions.
#>
    /// <content>
    /// Provides extension methods for <see cref="IEnumerable{T}"/>.
    /// </content>
    internal static partial class Enumerable<#= Name #>Extensions
    {
<#+ if (!RequireStruct) { #>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "This method has been localy overriden.")]
        internal static <#= Name #><IEnumerable<TResult>> MapCore<TSource, TResult>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><TResult>> funM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
            // No need to check for null-reference, "Enumerable.Select" is an extension method. 
            Contract.Requires(@this != null);
            Contract.Requires(funM != null);
<#+ if (IsNullable) { #>
            Contract.Ensures(Contract.Result<<#= Name #><IEnumerable<TResult>>>() != null);
<#+ } #>

            return @this.Select(funM).AssumeNotNull_().Collect();
        }
<#+ } #>

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "This method has been localy overriden.")]
        internal static IEnumerable<TSource> FilterCore<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><bool>> predicateM)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(false); #>
<#+ NotNull_("predicateM"); #>
            Contract.Ensures(Contract.Result<IEnumerable<TSource>>() != null);

            // NB: Haskell uses tail recursion, we don't.
            var list = new List<TSource>();

            foreach (var item in @this) {
                var m = predicateM.Invoke(item);

                if (m != null) {
                    m.Run(_ => {
                        if (_ == true) {
                            list.Add(item);
                        }
                    });
                }
            }

            return list;
        }

<#+ if (!RequireStruct) { #>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "This method has been localy overriden.")]
        internal static <#= Name #><Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>>
            MapAndUnzipCore<TSource, TFirst, TSecond>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><Tuple<TFirst, TSecond>>> funM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TFirst"); #>
<#+ StructConstraint_("TSecond"); #>
        {
            // No need to check for null-reference, "Enumerable.Select" is an extension method. 
            Contract.Requires(@this != null);
            Contract.Requires(funM != null);
<#+ if (IsNullable && BindReturnsSome) { #>
<#+ // Select() guarantees a non-null return value. #>
            Contract.Ensures(Contract.Result<<#= Name #><Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>>>() != null);
<#+ } #>

            var m = @this.Select(funM).AssumeNotNull_().Collect();

            return m.Select(tuples => {
                IEnumerable<TFirst> list1 = tuples.Select(_ => _.Item1);
                IEnumerable<TSecond> list2 = tuples.Select(_ => _.Item2);

                return new Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>(list1, list2);
            });
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "This method has been localy overriden.")]
        internal static <#= Name #><IEnumerable<TResult>> ZipCore<TFirst, TSecond, TResult>(
            this IEnumerable<TFirst> @this,
            IEnumerable<TSecond> second,
            Func<TFirst, TSecond, <#= Name #><TResult>> resultSelectorM)
<#+ StructConstraint_("TFirst"); #>
<#+ StructConstraint_("TSecond"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ NotNull_("resultSelectorM"); #>
            Contract.Requires(@this != null); // No need to check for null-reference, "Enumerable.Zip" is an extension method. 
            Contract.Requires(second != null);
<#+ if (IsNullable) { #>
            Contract.Ensures(Contract.Result<<#= Name #><IEnumerable<TResult>>>() != null);
<#+ } #>

            Func<TFirst, TSecond, <#= Name #><TResult>> resultSelector
                = (v1, v2) => resultSelectorM.Invoke(v1, v2);

            // WARNING: Do not remove "resultSelector", otherwise .NET will make a recursive call
            // instead of using the Zip from LINQ.
            return @this.Zip(second, resultSelector: resultSelector).AssumeNotNull_().Collect();
        }
<#+ } #>

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "This method has been localy overriden.")]
        internal static <#= Name #><TAccumulate> FoldCore<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulatorM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TAccumulate"); #>
        {
<#+ ObjectNotNull_(false); #>
<#+ NotNull_("accumulatorM"); #>
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TAccumulate>>() != null);
<#+ } #>

            <#= Name #><TAccumulate> result = <#= Name #>.<#= ReturnName #>(seed);

            foreach (TSource item in @this) {
<#+ if (IsNullable && !HasZero) { #>
                if (result == null) {
                    return null;
                }

<#+ } #>
                result = result.Bind(_ => accumulatorM.Invoke(_, item));
            }

            return result;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "This method has been localy overriden.")]
        internal static <#= Name #><TAccumulate> FoldBackCore<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulatorM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TAccumulate"); #>
        {
            // No need to check for null-reference, "Enumerable.Reverse" is an extension method. 
            Contract.Requires(@this != null);
            Contract.Requires(accumulatorM != null);
<#+ // "Fold" can not guarantee non null return value. #>
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TAccumulate>>() != null);
<#+ } #>

            return @this.Reverse().AssumeNotNull_().Fold(seed, accumulatorM);
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "This method has been localy overriden.")]
        internal static <#= Name #><TSource> ReduceCore<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulatorM)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(false); #>
<#+ NotNull_("accumulatorM", false); #>
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            using (var iter = @this.GetEnumerator()) {
                if (!iter.MoveNext()) {
                    throw new InvalidOperationException("Source sequence was empty.");
                }

                <#= Name #><TSource> result = <#= Name #>.<#= ReturnName #>(iter.Current);

                while (iter.MoveNext()) {
<#+ if (IsNullable && !HasZero) { #>
                    if (result == null) {
                        return null;
                    }

<#+ } #>
                    result = result.Bind(_ => accumulatorM.Invoke(_, iter.Current));
                }

                return result;
            }
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "This method has been localy overriden.")]
        internal static <#= Name #><TSource> ReduceBackCore<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulatorM)
<#+ StructConstraint_("TSource"); #>
        {
            // No need to check for null-reference, "Enumerable.Reverse" is an extension method. 
            Contract.Requires(@this != null);
            Contract.Requires(accumulatorM != null);
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            return @this.Reverse().AssumeNotNull_().Reduce(accumulatorM);
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "This method has been localy overriden.")]
        internal static <#= Name #><TAccumulate> FoldCore<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulatorM,
            Func<<#= Name #><TAccumulate>, bool> predicate)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TAccumulate"); #>
        {
<#+ ObjectNotNull_(false); #>
<#+ NotNull_("accumulatorM"); #>
<#+ NotNull_("predicate"); #>
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TAccumulate>>() != null);
<#+ } #>

            <#= Name #><TAccumulate> result = <#= Name #>.<#= ReturnName #>(seed);

            using (var iter = @this.GetEnumerator()) {
                while (predicate.Invoke(result) && iter.MoveNext()) {
<#+ if (IsNullable && !HasZero) { #>
                if (result == null) {
                    return null;
                }

<#+ } #>
                    result = result.Bind(_ => accumulatorM.Invoke(_, iter.Current));
                }
            }

            return result;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "This method has been localy overriden.")]
        internal static <#= Name #><TSource> ReduceCore<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulatorM,
            Func<<#= Name #><TSource>, bool> predicate)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(false); #>
<#+ NotNull_("accumulatorM"); #>
<#+ NotNull_("predicate"); #>
<#+ if (IsNullable && HasZero) { #>
            Contract.Ensures(Contract.Result<<#= Name #><TSource>>() != null);
<#+ } #>

            using (var iter = @this.GetEnumerator()) {
                if (!iter.MoveNext()) {
                    throw new InvalidOperationException("Source sequence was empty.");
                }

                <#= Name #><TSource> result = <#= Name #>.<#= ReturnName #>(iter.Current);

                while (predicate.Invoke(result) && iter.MoveNext()) {
<#+ if (IsNullable && !HasZero) { #>
                    if (result == null) {
                        return null;
                    }

<#+ } #>
                    result = result.Bind(_ => accumulatorM.Invoke(_, iter.Current));
                }

                return result;
            }
        }
    } // End of the class Enumerable<#= Name #>Extensions.
<#+
    } // End of EmitEnumerableInternalExtensions().

    /* ========================================================================================== *
     * Private Methods
     * ========================================================================================== */

    protected void WriteHeader_()
    {
        if (_headerWritten) {
            return;
        }

        // See http://msdn.microsoft.com/en-us/library/ms244717.aspx for an explanation
        // of the SuppressMessage attribute used at module scope.
#>
// Copyright (c) Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
//
// Runtime Version: <#= System.Environment.Version #>
// </auto-generated>
//------------------------------------------------------------------------------

using global::System.Diagnostics.CodeAnalysis;

[module: SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass",
    Justification = "This rule is disabled for files generated by a Text Template.")]
[module: SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1403:FileMayOnlyContainASingleNamespace",
    Justification = "This rule is disabled for files generated by a Text Template.")]
    
[module: SuppressMessage("StyleCop.CSharp.OrderingRules", "SA1202:ElementsMustBeOrderedByAccess",
    Justification = "For files generated by Text Template, we favour T4 readibility over StyleCop rules.")]
[module: SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1505:OpeningCurlyBracketsMustNotBeFollowedByBlankLine",
    Justification = "For files generated by Text Template, we favour T4 readibility over StyleCop rules.")]
[module: SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1507:CodeMustNotContainMultipleBlankLinesInARow",
    Justification = "For files generated by Text Template, we favour T4 readibility over StyleCop rules.")]

[module: SuppressMessage("StyleCop.CSharp.OrderingRules", "SA1210:UsingDirectivesMustBeOrderedAlphabeticallyByNamespace",
    Justification = "The directives are correctly ordered in the T4 source file.")]

<#+
        _headerWritten = true;
    } // End of WriteHeader_().
    
    protected void WriteCompilerAttributes_()
    {
#>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating.12.0", "12.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [global::System.Runtime.CompilerServices.CompilerGenerated]
<#+
    } // End of WriteCompilerAttributes_().
    
    private string InferName_() 
    {
        return System.IO.Path.GetFileNameWithoutExtension(Host.TemplateFile);
    }
    
    private string InferNamespace_() 
    {
        return System.Runtime.Remoting.Messaging.CallContext
            .LogicalGetData("NamespaceHint")
            .ToString();
    }
    
    private void StructConstraint_(string name)
    {
        if (RequireStruct) {
#>
            where <#= name #> : struct
<#+
        }
    } // End of StructConstraint_().

    private void ObjectNotNull_(bool isMonad = true) 
    {
        if (!isMonad || IsNullable) {
#>
            Require.Object(@this);
<#+
        }
    } // End of ObjectNotNull_().
    
    private void ObjectNotNull_(string methodName, bool isMonad = true) 
    {
        if (!isMonad || IsNullable) {
#>
            Require.Object(@this); <#+ WarmNull_(methodName); #>
<#+
        }
    } // End of ObjectNotNull_().

    private void NotNull_(string name, bool isMonad = true) 
    {
        if (!isMonad || IsNullable) {
#>
            Require.NotNull(<#= name #>, "<#= name #>");
<#+
        }
    } // End of NotNull_().
    
    private void NotNull_(string name, string methodName, bool isMonad = true) 
    {
        if (!isMonad || IsNullable) {
#>
            Require.NotNull(<#= name #>, "<#= name #>"); <#+ WarmNull_(methodName); #>
<#+
        }
    } // End of NotNull_().
    
    // Null-reference check with extension methods is not always necessary but we never know for sure here.
    private void WarmNull_(string methodName) 
    {
#>// Null-reference check: "<#= methodName #>" could have been overriden by a normal method.
<#+
    } // End of WarmNull_().

    private void ThrowIfInitialized_() 
    {
        if (_initialized) {
            throw new InvalidOperationException("You can only initialize the template once.");
        }
    }

    private void NewLine_()
    {
        WriteLine(String.Empty);
    }
#>
