<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".g.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.Schema" #>
<#

bool DEBUG = false;

var settings = new XmlReaderSettings {
    CheckCharacters = false,
    CloseInput = true,
    DtdProcessing = DtdProcessing.Ignore,
    IgnoreComments = true,
    IgnoreProcessingInstructions = true,
    IgnoreWhitespace = true,
    ValidationFlags = XmlSchemaValidationFlags.None,
    ValidationType = ValidationType.None,
};

var codeSet = new HashSet<string>();

#>
// Copyright (c) Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
//
// Runtime Version: <#= System.Environment.Version #>
// </auto-generated>
//------------------------------------------------------------------------------

namespace Narvalo.Globalization
{
    using System.Collections.Generic;

    public sealed partial class DefaultCurrencyProvider
    {
        /// <summary>
        /// Gets the list of currently active currencies.
        /// </summary>
        /// <remarks>
        /// The list is built out of data found on the "Association Suisse de Normalisation"
        /// <see cref="!:http://www.currency-iso.org/en/home.html">website</see>.
        /// </remarks>
        /// <value>The list of currently active currencies.</value>
        internal static IEnumerable<CurrencyInfo> CurrentCurrencies
        {
            get 
            {
<#
    var source = Host.ResolvePath(@"..\Resources\ISO4217\20150101\A1.xml");

    using (var reader = XmlReader.Create(source, settings)) {
        var root = XElement.Load(reader, LoadOptions.None);
        var list = root.Element("CcyTbl").Elements("CcyNtry");

        foreach (var item in list) {
            // Currency Alphabetic Code
            var codeElement = item.Element("Ccy");
            if (codeElement == null) {
                if (DEBUG) {
                    Warning("Found a country without universal currency: " + item.Element("CtryNm").Value);
                }

                continue;
            }
            var code = codeElement.Value;

            // Add the code to the codeSet
            codeSet.Add(code);

            // Currency Numeric Code
            // NB: Int16.Parse should never fail.
            var numericCode = Int16.Parse(item.Element("CcyNbr").Value);

            // Currency English Name
            var englishNameElement = item.Element("CcyNm");
            var englishName = englishNameElement.Value
                .Replace("\"", "\"\"");

            // Fund Currency
            bool isFund = false;
            var isFundAttr = englishNameElement.Attribute("IsFund");
            if (isFundAttr != null) {
                isFund = isFundAttr.Value == "true";
            }

            // Country English Name
            var englishRegionName = item.Element("CtryNm").Value
                .Replace("’", "'")
                .Replace("\"", "\"\"")
                .Replace("\n", "");

            // Minor Units
            var minorUnitsValue = item.Element("CcyMnrUnts").Value;
            short? minorUnits = null;
            if (minorUnitsValue != "N.A.") {
                // NB: ParseTo should never fail.
                minorUnits = Int16.Parse(minorUnitsValue);
            }
#>
                yield return new CurrencyInfo("<#= code #>", <#= numericCode #>) {
                    EnglishName = @"<#= englishName #>",
                    EnglishRegionName = @"<#= englishRegionName #>",
<# if (isFund) { #>
                    IsFund = true,
<# } #>
<# if (minorUnits.HasValue) { #>
                    MinorUnits = <#= minorUnits.Value.ToString() #>,
<# } #>
                };
<#
        }
    }
#>
            }
        }
        
        /// <summary>
        /// Gets the list of discontinued currencies.
        /// </summary>
        /// <remarks>
        /// The list is built out of data found on the "Association Suisse de Normalisation"
        /// <see cref="!:http://www.currency-iso.org/en/home.html">website</see>.
        /// </remarks>
        /// <value>The list of discontinued currencies.</value>
        internal static IEnumerable<CurrencyInfo> LegacyCurrencies
        {
            get 
            {
<#
    var legacySource = Host.ResolvePath(@"..\Resources\ISO4217\20150101\A3.xml");

    using (var reader = XmlReader.Create(legacySource, settings)) {
        var root = XElement.Load(reader, LoadOptions.None);
        var list = root.Element("HstrcCcyTbl").Elements("HstrcCcyNtry");

        foreach (var item in list) {
            // Currency Alphabetic Code
            var code = item.Element("Ccy").Value;

            // Add the code to the codeSet
            codeSet.Add(code);

            // Currency Numeric Code
            // NB: ParseTo should never fail.
            var numericCodeElement = item.Element("CcyNbr");
            short numericCode;
            if (numericCodeElement == null) {
                if (DEBUG) {
                    Warning("Found a legacy currency without a numeric code: " + item.Element("CtryNm").Value);
                }
                numericCode = (short)0;
            } else {
                numericCode = Int16.Parse(numericCodeElement.Value);
            }

            // Currency English Name
            var englishNameElement = item.Element("CcyNm");
            var englishName = englishNameElement.Value
                .Replace("\"", "\"\"");

            // Fund Currency
            bool isFund = false;
            var isFundAttr = englishNameElement.Attribute("IsFund");
            if (isFundAttr != null) {
                // NB: There are whitespace-only values, there are interpreted to be the same as no attibrute.
                isFund = isFundAttr.Value == "true";
            }

            // Country English Name
            var englishRegionName = item.Element("CtryNm").Value
                .Replace("’", "'")
                .Replace("\"", "\"\"")
                .Replace("\n", "");
#>
                yield return new CurrencyInfo("<#= code #>", <#= numericCode #>) {
                    EnglishName = @"<#= englishName #>",
                    EnglishRegionName = @"<#= englishRegionName #>",
<# if (isFund) { #>
                    IsFund = true,
<# } #>
                    Superseded = true,
                };
<#
        }
    }
#>
            }
        }

        private static readonly HashSet<string> s_CurrencyCodeSet = new HashSet<string>() {
<#
    foreach (var code in codeSet.OrderBy(_ => _)) {
#>
            "<#= code #>",
<#
    }
#>
        };
    }
}