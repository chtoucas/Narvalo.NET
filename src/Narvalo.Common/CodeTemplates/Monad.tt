<#+
	//
	// Fields
	//

	public const string DefaultPlusName = "Plus";
	public const string DefaultReturnName = "Return";
	public const string DefaultZeroName = "Zero";

	string _name;
	string _namespace;
	string _linqNamespace;
	bool _hasZero = false;
	string _zeroName;
	bool _hasPlus = false;
	string _plusName;
	string _returnName = DefaultReturnName;
	bool _complete = true;
	bool _preferLinqDialect = false;

	//
	// Properties
	//

    protected string Namespace
	{
		get
		{
			if (_namespace == null) {
				_namespace = InferNamespace_();
			}

			return _namespace;
		}

		set
		{
			if (String.IsNullOrEmpty(value)) {
				throw new ArgumentException();
			}

			_namespace = value;
		}
	}
	
    protected string LinqNamespace
	{
		get
		{
			if (_linqNamespace == null) {
				_linqNamespace = InferNamespace_();
			}

			return _linqNamespace;
		}

		set
		{
			if (String.IsNullOrEmpty(value)) {
				throw new ArgumentException();
			}

			_linqNamespace = value;
		}
	}

    protected string Name
	{
		get
		{
			if (_name == null) {
				_name = InferName_();
			}

			return _name;
		}

		set
		{
			if (String.IsNullOrEmpty(value)) {
				throw new ArgumentException();
			}

			_name = value;
		}
	}

	protected bool HasPlus { get { return _hasPlus; } private set { _hasPlus = value; } }

	protected bool HasZero { get { return _hasZero; } private set { _hasZero = value; } }

	protected string ZeroName { 
		get { return _zeroName; }  
		private set
		{
			if (String.IsNullOrEmpty(value)) {
				throw new ArgumentException();
			}
			
			_zeroName = value;
		} 
	}
	
	protected string PlusName
	{
		get { return _plusName; }
		private set
		{
			if (String.IsNullOrEmpty(value)) {
				throw new ArgumentException();
			}
			
			_plusName = value;
		} 
	}

	protected bool Complete { get { return _complete; } set { _complete = value; } }

	protected bool PreferLinqDialect { get { return _preferLinqDialect; } set { _preferLinqDialect = value; } }

	protected string FilterName
	{
		get { return PreferLinqDialect ? "Where" : "Filter"; }
	}
	
	protected string MapName
	{
		get { return PreferLinqDialect ? "Select" : "Map"; }
	}
	
	protected string ReturnName
	{
		get { return _returnName; }
		set 
		{
			if (String.IsNullOrEmpty(value)) {
				throw new ArgumentException();
			}
			
			_returnName = value; 
		}
	}
	
	//
	// Protected Methods
	//

	protected void EnableZero(string zeroName = DefaultZeroName)
	{
		HasZero = true;
		ZeroName = zeroName;
	}
	
	protected void EnablePlus(string plusName = DefaultPlusName)
	{
		HasPlus = true;
		PlusName = plusName;
	}

    protected void EmitMonad()
    {
		WriteWarning_();
#>

namespace <#= Namespace #> {
	using System;
    using System.Collections.Generic;
    using System.Linq;
<#+ if (Namespace != InferNamespace_()) { #>
	using Narvalo.Fx;
<#+ } #>
<#+ NewLine_(); #>
<#+ EmitCoreClass(); #>
<#+ NewLine_(); #>
<#+ EmitCoreExtensions(); #>
<#+ NewLine_(); #>
<#+ EmitExtensions(); #>
<#+ NewLine_(); #>
<#+ EmitKleisliExtensions(); #>
}
<#+
	}	// End of EmitMonad

    protected void EmitLinq()
    {
		WriteWarning_();
#>

namespace <#= LinqNamespace #> {
	using System;
    using System.Collections.Generic;
    using System.Linq;
<#+ if (LinqNamespace != Namespace) { #>
    using <#= Namespace #>;
<#+ } #>
<#+ NewLine_(); #>
<#+ EmitQepExtensions(); #>
<#+ NewLine_(); #>
<#+ EmitLinqExtensions(); #>
<#+ NewLine_(); #>
<#+ EmitCoreEnumerableExtensions(); #>
<#+ NewLine_(); #>
<#+ EmitEnumerableExtensions(); #>
}
<#+
    }	// End of EmitLinq
	
	protected void EmitCoreClass() 
	{
#>
    public static partial class <#= Name #>
    {
        static readonly <#= Name #><Unit> Unit_ = <#= ReturnName #>(Narvalo.Fx.Unit.Single);
<#+ if (HasZero) { #>
        static readonly <#= Name #><Unit> <#= ZeroName #>_ = <#= Name #><Unit>.<#= ZeroName #>;
<#+ } #>

        public static <#= Name #><Unit> Unit { get { return Unit_; } }
<#+ if (HasZero) { #>
<#+ NewLine_(); #>
        // [Haskell] mzero
        public static <#= Name #><Unit> <#= ZeroName #> { get { return <#= ZeroName #>_; } }
<#+ } #>

        // [Haskell] return
        public static <#= Name #><T> <#= ReturnName #><T>(T value)
        {
            return <#= Name #><T>.η(value);
        }
		
        #region Generalisations of list functions (Prelude)

        // [Haskell] join
        public static <#= Name #><T> Flatten<T>(<#= Name #><<#= Name #><T>> square)
        {
            return <#= Name #><T>.μ(square);
        }

        #endregion

		#region Monadic lifting operators
<#+ if (Complete) { #>
<#+ NewLine_(); #>
        public static Func<<#= Name #><T>, <#= Name #><TResult>> Lift<T, TResult>(Func<T, TResult> fun)
        {
            return m => m.<#= MapName #>(fun);
        }

        public static Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><TResult>>
            Lift<T1, T2, TResult>(Func<T1, T2, TResult> fun)
        {
            return (m1, m2) => m1.Zip(m2, fun);
        }

        public static Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><T3>, <#= Name #><TResult>>
            Lift<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> fun)
        {
            return (m1, m2, m3) => m1.Zip(m2, m3, fun);
        }

        public static Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><T3>, <#= Name #><T4>, <#= Name #><TResult>>
            Lift<T1, T2, T3, T4, TResult>(
            Func<T1, T2, T3, T4, TResult> fun)
        {
            return (m1, m2, m3, m4) => m1.Zip(m2, m3, m4, fun);
        }

        public static Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><T3>, <#= Name #><T4>, <#= Name #><T5>, <#= Name #><TResult>>
            Lift<T1, T2, T3, T4, T5, TResult>(
            Func<T1, T2, T3, T4, T5, TResult> fun)
        {
            return (m1, m2, m3, m4, m5) => m1.Zip(m2, m3, m4, m5, fun);
        }

        #endregion
<#+ } #>
    }
<#+
	}	// End of EmitCoreClass

	protected void EmitCoreExtensions()
	{
#>
	// Prelude extensions for <#= Name #><T>.
    public static partial class <#= Name #>Extensions
    {
		#region Basic monadic functions

        public static <#= Name #><TResult> <#= MapName #><TSource, TResult>(this <#= Name #><TSource> @this, Func<TSource, TResult> selector)
        {
            return @this.Bind(_ => <#= Name #>.<#= ReturnName #>(selector.Invoke(_)));
        }

        public static <#= Name #><TResult> Then<TSource, TResult>(this <#= Name #><TSource> @this, <#= Name #><TResult> other)
        {
            return @this.Bind(_ => other);
        }
		
        #endregion

        #region Generalisations of list functions (Prelude)
<#+ if (HasZero) { #>
<#+ NewLine_(); #>
        // [Haskell] mfilter
        public static <#= Name #><TSource> <#= FilterName #><TSource>(this <#= Name #><TSource> @this, Func<TSource, bool> predicate)
        {
            Require.Object(@this);
            Require.NotNull(predicate, "predicate");

            return @this.Bind(_ => predicate.Invoke(_) ? @this : <#= Name #><TSource>.<#= ZeroName #>);
        }
<#+ } #>

        // [Haskell] replicateM
        public static <#= Name #><IEnumerable<TSource>> Repeat<TSource>(this <#= Name #><TSource> @this, int count)
        {
            return @this.<#= MapName #>(_ => Enumerable.Repeat(_, count));
        }
		
        #endregion
<#+ if (Complete) { #>
<#+ NewLine_(); #>
        #region Conditional execution of monadic expressions (Prelude)
<#+ if (HasZero) { #>
<#+ NewLine_(); #>
        // [Haskell] guard
        public static <#= Name #><Unit> Guard<TSource>(this <#= Name #><TSource> @this, bool predicate)
        {
            return predicate ? <#= Name #>.Unit : <#= Name #>.<#= ZeroName #>;
        }
<#+ } #>

        // [Haskell] when
        public static <#= Name #><Unit> When<TSource>(this <#= Name #><TSource> @this, bool predicate, Action action)
        {
            Require.NotNull(action, "action");

			if (predicate) {
				action.Invoke();
			}

            return <#= Name #>.Unit;
        }

        // [Haskell] unless
        public static <#= Name #><Unit> Unless<TSource>(this <#= Name #><TSource> @this, bool predicate, Action action)
        {
            return @this.When(!predicate, action);
        }

        #endregion
<#+ } #>

        #region Monadic lifting operators (Prelude)

        // [Haskell] liftM2
        public static <#= Name #><TResult> Zip<TFirst, TSecond, TResult>(
            this <#= Name #><TFirst> @this,
            <#= Name #><TSecond> second,
            Func<TFirst, TSecond, TResult> resultSelector)
        {
            Require.Object(@this);
            Require.NotNull(second, "second");
            Require.NotNull(resultSelector, "resultSelector");

            return @this.Bind(v1 => second.<#= MapName #>(v2 => resultSelector.Invoke(v1, v2)));
        }
<#+ if (Complete) { #>
<#+ NewLine_(); #>
        // [Haskell] liftM3
        public static <#= Name #><TResult> Zip<T1, T2, T3, TResult>(
            this <#= Name #><T1> @this,
            <#= Name #><T2> second,
            <#= Name #><T3> third,
            Func<T1, T2, T3, TResult> resultSelector)
        {
            Require.Object(@this);
            Require.NotNull(second, "second");
            Require.NotNull(resultSelector, "resultSelector");

            Func<T1, <#= Name #><TResult>> g
                = t1 => second.Zip(third, (t2, t3) => resultSelector.Invoke(t1, t2, t3));

            return @this.Bind(g);
        }

        // [Haskell] liftM4
        public static <#= Name #><TResult> Zip<T1, T2, T3, T4, TResult>(
             this <#= Name #><T1> @this,
             <#= Name #><T2> second,
             <#= Name #><T3> third,
             <#= Name #><T4> fourth,
             Func<T1, T2, T3, T4, TResult> resultSelector)
        {
            Require.Object(@this);
            Require.NotNull(second, "second");
            Require.NotNull(resultSelector, "resultSelector");

            Func<T1, <#= Name #><TResult>> g
                = t1 => second.Zip(third, fourth, (t2, t3, t4) => resultSelector.Invoke(t1, t2, t3, t4));

            return @this.Bind(g);
        }

        // [Haskell] liftM5
        public static <#= Name #><TResult> Zip<T1, T2, T3, T4, T5, TResult>(
            this <#= Name #><T1> @this,
            <#= Name #><T2> second,
            <#= Name #><T3> third,
            <#= Name #><T4> fourth,
            <#= Name #><T5> fifth,
            Func<T1, T2, T3, T4, T5, TResult> resultSelector)
        {
            Require.Object(@this);
            Require.NotNull(second, "second");
            Require.NotNull(resultSelector, "resultSelector");

            Func<T1, <#= Name #><TResult>> g
                = t1 => second.Zip(third, fourth, fifth, (t2, t3, t4, t5) => resultSelector.Invoke(t1, t2, t3, t4, t5));

            return @this.Bind(g);
        }
<#+ } #>

        #endregion
    }
<#+
	}	// End of EmitCoreExtensions
	
	protected void EmitExtensions()
	{
#>
	// More extensions for <#= Name #><T>.
    public static partial class <#= Name #>Extensions
    {
        public static <#= Name #><TResult> Coalesce<TSource, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, bool> predicate,
            <#= Name #><TResult> then,
            <#= Name #><TResult> otherwise)
        {
            Require.Object(@this);
            Require.NotNull(predicate, "predicate");

            return @this.Bind(_ => predicate.Invoke(_) ? then : otherwise);
        }
<#+ if (HasZero) { #>
<#+ NewLine_(); #>
        public static <#= Name #><TResult> Then<TSource, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, bool> predicate,
            <#= Name #><TResult> other)
        {
            return @this.Coalesce(predicate, other, <#= Name #><TResult>.<#= ZeroName #>);
        }

        public static <#= Name #><TResult> Otherwise<TSource, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, bool> predicate,
            <#= Name #><TResult> other)
        {
            return @this.Coalesce(predicate, <#= Name #><TResult>.<#= ZeroName #>, other);
        }
<#+ } #>

        public static <#= Name #><Unit> Run<TSource>(this <#= Name #><TSource> @this, Func<TSource, <#= Name #><Unit>> actionM)
        {
            Require.Object(@this);
            Require.NotNull(actionM, "actionM");

            return @this.Bind(actionM);
        }

        //public static <#= Name #><Unit> OnZero<TSource>(this <#= Name #><TSource> @this, Func<Unit, <#= Name #><Unit>> actionM)
        //{
        //    Require.Object(@this);
        //    Require.NotNull(actionM, "actionM");

        //    throw new NotImplementedException();
        //}
	}
<#+
	}	// End of EmitExtensions

    public void EmitKleisliExtensions()
    {
#>
	// Kleisli extensions for Func<T, <#= Name #><TResult>>.
	public static partial class FuncExtensions
    {
        #region Basic Monad functions (Prelude)

        // [Haskell] =<<
        public static <#= Name #><TResult> Invoke<TSource, TResult>(
            this Func<TSource, <#= Name #><TResult>> @this,
            <#= Name #><TSource> monad)
        {
            return monad.Bind(@this);
        }

        // [Haskell] >=>
        public static Func<TSource, <#= Name #><TResult>> Compose<TSource, TMiddle, TResult>(
            this Func<TSource, <#= Name #><TMiddle>> @this,
            Func<TMiddle, <#= Name #><TResult>> funM)
        {
            Require.Object(@this);

            return _ => @this.Invoke(_).Bind(funM);
        }
<#+ if (Complete) { #>
<#+ NewLine_(); #>
        // [Haskell] <=<
        public static Func<TSource, <#= Name #><TResult>> ComposeBack<TSource, TMiddle, TResult>(
            this Func<TMiddle, <#= Name #><TResult>> @this,
            Func<TSource, <#= Name #><TMiddle>> funM)
        {
            Require.Object(@this);
            Require.NotNull(funM, "funM");

            return _ => funM.Invoke(_).Bind(@this);
        }
<#+ } #>

        #endregion
    }
<#+
    }	// End of EmitKleisliExtensions

	protected void EmitQepExtensions()
	{
#>
	// Query Expression Pattern for <#= Name #><T>.
	public static partial class <#= Name #>Extensions
    {
<#+ if (!PreferLinqDialect) { #>
<#+ if (HasZero) { #>
        public static <#= Name #><TSource> Where<TSource>(
            this <#= Name #><TSource> @this, 
            Func<TSource, bool> predicate)
        {
            Require.Object(@this);

            return @this.Filter(predicate);
        }
<#+ NewLine_(); #>
<#+ } #>
        public static <#= Name #><TResult> Select<TSource, TResult>(
            this <#= Name #><TSource> @this, 
            Func<TSource, TResult> selector)
        {
            Require.Object(@this);

            return @this.Map(selector);
        }
<#+ } #>

        // Kind of generalisation of Zip (liftM2).
        public static <#= Name #><TResult> SelectMany<TSource, TMiddle, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, <#= Name #><TMiddle>> valueSelectorM,
            Func<TSource, TMiddle, TResult> resultSelector)
        {
            Require.Object(@this);
            Require.NotNull(valueSelectorM, "valueSelectorM");
            Require.NotNull(resultSelector, "resultSelector");

            return @this.Bind(_ => valueSelectorM.Invoke(_).<#= MapName #>(middle => resultSelector.Invoke(_, middle)));
        }

        public static <#= Name #><TResult> Join<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector)
        {
            return @this.Join(inner, outerKeySelector, innerKeySelector, resultSelector, EqualityComparer<TKey>.Default);
        }

        public static <#= Name #><TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, <#= Name #><TInner>, TResult> resultSelectorM)
        {
            Require.Object(@this);
            Require.NotNull(inner, "inner");
            Require.NotNull(outerKeySelector, "valueSelector");
            Require.NotNull(innerKeySelector, "innerKeySelector");
            Require.NotNull(resultSelectorM, "resultSelectorM");

            throw new NotImplementedException();
        }
	}
<#+
	}	// End of EmitQepExtensions
	
	protected void EmitLinqExtensions()
	{
#>
	// Linq extensions for <#= Name #><T>.
	public static partial class <#= Name #>Extensions
    {
        public static <#= Name #><TResult> Join<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
        {
            Require.Object(@this);
            Require.NotNull(inner, "inner");
            Require.NotNull(outerKeySelector, "valueSelector");
            Require.NotNull(innerKeySelector, "innerKeySelector");
            Require.NotNull(resultSelector, "resultSelector");

            throw new NotImplementedException();
        }
	}
<#+
	}	// End of EmitLinqExtensions

	protected void EmitCoreEnumerableExtensions()
	{
#>
	// Prelude extensions for IEnumerable<<#= Name #><T>>.
	public static partial class Enumerable<#= Name #>Extensions
    {
        #region Basic Monad functions (Prelude)

        // [Haskell] sequence
        public static <#= Name #><IEnumerable<TSource>> Collect<TSource>(this IEnumerable<<#= Name #><TSource>> @this)
        {
            Require.Object(@this);

            var seed = <#= Name #>.<#= ReturnName #>(Enumerable.Empty<TSource>());
            Func<<#= Name #><IEnumerable<TSource>>, <#= Name #><TSource>, <#= Name #><IEnumerable<TSource>>> fun
                = (m, n) =>
                    m.Bind(list =>
                    {
                        return n.Bind(item => <#= Name #>.<#= ReturnName #>(list.Concat(Enumerable.Repeat(item, 1))));
                    });

            return @this.Aggregate(seed, fun);
        }
		
        #endregion
<#+ if (HasZero && HasPlus) { #>
<#+ NewLine_(); #>
        #region Generalisations of list functions (Prelude)

        // [Haskell] msum
        public static <#= Name #><TSource> Sum<TSource>(this IEnumerable<<#= Name #><TSource>> @this)
        {
            Require.Object(@this);

            return @this.Aggregate(<#= Name #><TSource>.<#= ZeroName #>, (m, n) => m.<#= PlusName #>(n));
        }

        #endregion
<#+ } #>
	}

	// Prelude extensions for IEnumerable<T>.
    public static partial class EnumerableExtensions
    {
        #region Basic Monad functions (Prelude)

        // [Haskell] mapM
        public static <#= Name #><IEnumerable<TResult>> Map<TSource, TResult>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><TResult>> funM)
        {
            Require.Object(@this);
            Require.NotNull(funM, "funM");

            return (from _ in @this select funM.Invoke(_)).Collect();
        }
		
        #endregion

        #region Generalisations of list functions (Prelude)

        // [Haskell] filterM
        public static <#= Name #><IEnumerable<TSource>> Filter<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><bool>> predicateM)
        {
            Require.Object(@this);
            Require.NotNull(predicateM, "predicateM");

            // NB: Haskell uses tail recursion, we don't.
            var list = new List<TSource>();

            foreach (var item in @this) {
                predicateM.Invoke(item)
                    .Bind(_ =>
                    {
                        if (_ == true) {
                            list.Add(item);
                        }

                        return <#= Name #>.Unit;
                    });
            }

            return <#= Name #>.<#= ReturnName #>(list.AsEnumerable());
        }
<#+ if (Complete) { #>
<#+ NewLine_(); #>
        // [Haskell] mapAndUnzipM
        public static <#= Name #><Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>> MapAndUnzip<TSource, TFirst, TSecond>(
           this IEnumerable<TSource> @this,
           Func<TSource, <#= Name #><Tuple<TFirst, TSecond>>> funM)
        {
            Require.Object(@this);
            Require.NotNull(funM, "funM");

            return from _ in
                       (from _ in @this select funM.Invoke(_)).Collect()
                   let item1 = from item in _ select item.Item1
                   let item2 = from item in _ select item.Item2
                   select new Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>(item1, item2);
        }
<#+ } #>

        // [Haskell] zipWithM
        public static <#= Name #><IEnumerable<TResult>> Zip<TFirst, TSecond, TResult>(
            this IEnumerable<TFirst> @this,
            IEnumerable<TSecond> second,
            Func<TFirst, TSecond, <#= Name #><TResult>> resultSelectorM)
        {
            Require.Object(@this);
            Require.NotNull(second, "second");
            Require.NotNull(resultSelectorM, "resultSelectorM");

            Func<TFirst, TSecond, <#= Name #><TResult>> resultSelector = (v1, v2) => resultSelectorM.Invoke(v1, v2);

			// WARNING: Do not remove resultSelector, otherwise .NET will make a recursive call to Zip 
			// instead of using the Zip from Linq.
            return @this.Zip(second, resultSelector: resultSelector).Collect();
        }

        // [Haskell] foldM
        public static <#= Name #><TAccumulate> Fold<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulatorM)
        {
            Require.Object(@this);
            Require.NotNull(accumulatorM, "accumulatorM");

            <#= Name #><TAccumulate> result = <#= Name #>.<#= ReturnName #>(seed);

            foreach (TSource item in @this) {
                result = result.Bind(_ => accumulatorM.Invoke(_, item));
            }

            return result;
        }

        #endregion
    }
<#+
	}	// End of EmitCoreEnumerableExtensions

	protected void EmitEnumerableExtensions()
	{
#>
	// More extensions for IEnumerable<T>.
	public static partial class EnumerableExtensions
    {
        #region Aggregate Operators

        public static <#= Name #><TAccumulate> FoldBack<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulatorM)
        {
            Require.Object(@this);

            return @this.Reverse().Fold(seed, accumulatorM);
        }

        public static <#= Name #><TSource> Reduce<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulatorM)
        {
            Require.Object(@this);
            Require.NotNull(accumulatorM, "accumulatorM");

            using (var iter = @this.GetEnumerator()) {
                if (!iter.MoveNext()) {
                    throw new InvalidOperationException("Source sequence was empty.");
                }

                <#= Name #><TSource> result = <#= Name #>.<#= ReturnName #>(iter.Current);

                while (iter.MoveNext()) {
                    result = result.Bind(_ => accumulatorM.Invoke(_, iter.Current));
                }

                return result;
            }
        }

        public static <#= Name #><TSource> ReduceBack<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulatorM)
        {
            Require.Object(@this);

            return @this.Reverse().Reduce(accumulatorM);
        }

        #endregion
<#+ if (HasZero) { #>
<#+ NewLine_(); #>
        #region Element Operators

        // FIXME: 
        public static <#= Name #><TSource> FirstOr<#= ZeroName #><TSource>(this IEnumerable<TSource> @this)
        {
            return FirstOr<#= ZeroName #>(@this, _ => true);
        }

        // FIXME: Func<TSource, <#= Name #><bool>>
        public static <#= Name #><TSource> FirstOr<#= ZeroName #><TSource>(this IEnumerable<TSource> @this, Func<TSource, bool> predicate)
        {
            Require.Object(@this);
            Require.NotNull(predicate, "predicate");

            var seq = from t in @this where predicate.Invoke(t) select <#= Name #>.<#= ReturnName #>(t);
            using (var iter = seq.GetEnumerator()) {
                return iter.MoveNext() ? iter.Current : <#= Name #><TSource>.<#= ZeroName #>;
            }
        }

        // FIXME: 
        public static <#= Name #><TSource> LastOr<#= ZeroName #><TSource>(this IEnumerable<TSource> @this)
        {
            return LastOr<#= ZeroName #>(@this, _ => true);
        }

        // FIXME: Func<TSource, <#= Name #><bool>>
        public static <#= Name #><TSource> LastOr<#= ZeroName #><TSource>(this IEnumerable<TSource> @this, Func<TSource, bool> predicate)
        {
            Require.Object(@this);
            Require.NotNull(predicate, "predicate");

            var seq = from t in @this where predicate.Invoke(t) select <#= Name #>.<#= ReturnName #>(t);
            using (var iter = seq.GetEnumerator()) {
                if (!iter.MoveNext()) {
                    return <#= Name #><TSource>.<#= ZeroName #>;
                }

                var value = iter.Current;
                while (iter.MoveNext()) {
                    value = iter.Current;
                }

                return value;
            }
        }

        // FIXME: 
        public static <#= Name #><TSource> SingleOr<#= ZeroName #><TSource>(this IEnumerable<TSource> @this)
        {
            return SingleOr<#= ZeroName #>(@this, _ => true);
        }

        // FIXME: Func<TSource, <#= Name #><bool>>
        public static <#= Name #><TSource> SingleOr<#= ZeroName #><TSource>(this IEnumerable<TSource> @this, Func<TSource, bool> predicate)
        {
            Require.Object(@this);
            Require.NotNull(predicate, "predicate");

            var seq = from t in @this where predicate.Invoke(t) select <#= Name #>.<#= ReturnName #>(t);
            using (var iter = seq.GetEnumerator()) {
                var result = iter.MoveNext() ? iter.Current : <#= Name #><TSource>.<#= ZeroName #>;

                // On retourne <#= Name #>.<#= ZeroName #> si il y a encore un élément.
                return iter.MoveNext() ? <#= Name #><TSource>.<#= ZeroName #> : result;
            }
        }

        #endregion
<#+ } #>
	}
<#+
	}	// End of EmitEnumerableExtensions

	//
	// Private Methods
	//
	
    protected void WriteWarning_()
    {
#>
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#+
	}
	
	string InferName_() 
	{
		return System.IO.Path.GetFileNameWithoutExtension(Host.TemplateFile);
	}
	
	string InferNamespace_() 
	{
		return System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint").ToString();
	}

	void NewLine_()
	{
		WriteLine("");
	}
#>
