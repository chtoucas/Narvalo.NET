<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".g.cs" #><#+

    /* ====================================================================== *
     * Fields
     * ====================================================================== */

    bool _initialized = false;
    bool _headerWritten = false;
    string _name;
    string _namespace;
    string _linqNamespace;

    bool _isNullable = true;
    bool _requireStruct = false;
    bool _hasZero = false;
    string _zeroName;
    bool _hasPlus = false;
    string _plusName;
    string _returnName = "Return";
    bool _full = true;
    bool _preferLinqDialect = true;

    /* ====================================================================== *
     * Properties
     * ====================================================================== */

    protected string Namespace
    {
        get
        {
            if (_namespace == null) {
                _namespace = InferNamespace_();
            }

            return _namespace;
        }

        set
        {
            if (String.IsNullOrEmpty(value)) {
                throw new ArgumentException();
            }

            _namespace = value;
        }
    }
    
    protected string LinqNamespace
    {
        get
        {
            if (_linqNamespace == null) {
                _linqNamespace = InferNamespace_();

                if (_linqNamespace == Namespace) {
                    _linqNamespace = Namespace + "." + Name + "Ex";
                }
            }

            return _linqNamespace;
        }

        set
        {
            if (String.IsNullOrEmpty(value)) {
                throw new ArgumentException();
            }

            _linqNamespace = value;
        }
    }

    protected string Name
    {
        get
        {
            if (_name == null) {
                _name = InferName_();
            }

            return _name;
        }

        set
        {
            if (String.IsNullOrEmpty(value)) {
                throw new ArgumentException();
            }

            _name = value;
        }
    }
    
    protected bool IsNullable { get { return _isNullable; } set { _isNullable = value; } }

    protected bool RequireStruct { get { return _requireStruct; } set { _requireStruct = value; } }
    
    protected bool HasPlus { get { return _hasPlus; } private set { _hasPlus = value; } }

    protected bool HasZero { get { return _hasZero; } private set { _hasZero = value; } }

    protected string ZeroName { 
        get 
        { 
            if (!HasZero) {
                throw new InvalidOperationException();
            }
            
            return _zeroName; 
        }  

        set
        {
            if (String.IsNullOrEmpty(value)) {
                throw new ArgumentException();
            }
            
            _zeroName = value;
        } 
    }
    
    protected string PlusName
    {
        get
        { 
            if (!HasPlus) {
                throw new InvalidOperationException();
            }

            return _plusName; 
        }

        set
        {
            if (String.IsNullOrEmpty(value)) {
                throw new ArgumentException();
            }
            
            _plusName = value;
        } 
    }

    protected bool Full { get { return _full; } set { _full = value; } }

    protected bool PreferLinqDialect { get { return _preferLinqDialect; } set { _preferLinqDialect = value; } }

    protected string FilterName
    {
        get 
        { 
            if (!HasZero) {
                throw new InvalidOperationException();
            }

            return PreferLinqDialect ? "Where" : "Filter";
        }
    }
    
    protected string MapName
    {
        get { return PreferLinqDialect ? "Select" : "Map"; }
    }
    
    protected string ReturnName
    {
        get { return _returnName; }

        set 
        {
            if (String.IsNullOrEmpty(value)) {
                throw new ArgumentException();
            }
            
            _returnName = value; 
        }
    }
    
    /* ====================================================================== *
     * "Constructors"
     * ====================================================================== */

    public void InitializeZero()
    {
        ThrowIfInitialized_();
        
        HasZero = true;
        ZeroName = "Zero";

        _initialized = true;
    }
    
    public void InitializePlus()
    {
        ThrowIfInitialized_();
        
        HasZero = true;
        ZeroName = "Zero";

        HasPlus = true;
        PlusName = "Plus";

        _initialized = true;
    }
    
    public void InitializeOr()
    {
        ThrowIfInitialized_();
        
        HasZero = true;
        ZeroName = "None";

        HasPlus = true;
        PlusName = "OrElse";

        _initialized = true;
    }
    
    /* ====================================================================== *
     * Public Methods
     * ====================================================================== */

    // EmitMonad ---------------------------------------------------------------

    public void EmitMonad()
    {
        WriteHeader_();
#>

namespace <#= Namespace #> {
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using Narvalo;      // For Require
    using Narvalo.Fx;   // For Unit

<#+ EmitCoreClass(); #>
<#+ NewLine_(); #>
<#+ EmitExtensions(); #>
<#+ NewLine_(); #>
<#+ EmitKleisliExtensions(); #>
}
<#+
    }

    // EmitComonad -------------------------------------------------------------
    
    public void EmitComonad()
    {
        WriteHeader_();
#>

namespace <#= Namespace #> {
<#+ EmitCoreComonad(); #>
}
<#+
    }

    // EmitLinq ----------------------------------------------------------------
    
    public void EmitLinq()
    {
        WriteHeader_();
#>

namespace <#= LinqNamespace #> {
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Narvalo;      // For Require
    using Narvalo.Fx;   // For Unit
<#+ if (Namespace != "Narvalo.Fx") { #>
    using <#= Namespace #>;
<#+ } #>

<#+ NewLine_(); #>
<#+ EmitEnumerableMonadExtensions(); #>
<#+ NewLine_(); #>
<#+ EmitEnumerableExtensions(); #>
<#+ NewLine_(); #>
<#+ EmitUnsafeEnumerableExtensions(); #>
}
<#+
    }
    
    /* ====================================================================== *
     * Protected Methods
     * ====================================================================== */

    // EmitCoreClass -----------------------------------------------------------

    protected void EmitCoreClass() 
    {
#>
    // Monad methods.
    public static partial class <#= Name #>
    {
        static readonly <#= Name #><Unit> Unit_ = <#= ReturnName #>(Narvalo.Fx.Unit.Single);
<#+ if (HasZero) { #>
        static readonly <#= Name #><Unit> <#= ZeroName #>_ = <#= Name #><Unit>.<#= ZeroName #>;
<#+ } #>

        public static <#= Name #><Unit> Unit { get { return Unit_; } }

<#+ if (HasZero) { #>
        // [Haskell] mzero
        public static <#= Name #><Unit> <#= ZeroName #> { get { return <#= ZeroName #>_; } }
<#+ } #>

        // [Haskell] return
        public static <#= Name #><T> <#= ReturnName #><T>(T value)
<#+ StructConstraint_("T"); #>
        {
            return <#= Name #><T>.η(value);
        }
        
        #region Generalisations of list functions (Prelude)

        // [Haskell] join
        public static <#= Name #><T> Flatten<T>(<#= Name #><<#= Name #><T>> square)
<#+ StructConstraint_("T"); #>
        {
            return <#= Name #><T>.μ(square);
        }

        #endregion

<#+ if (Full) { #>
        #region Monadic lifting operators

        public static Func<<#= Name #><T>, <#= Name #><TResult>> Lift<T, TResult>(Func<T, TResult> fun)
<#+ StructConstraint_("T"); #>
<#+ StructConstraint_("TResult"); #>
        {
            return m => m.<#= MapName #>(fun);
        }

        public static Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><TResult>>
            Lift<T1, T2, TResult>(Func<T1, T2, TResult> fun)
<#+ StructConstraint_("T1"); #>
<#+ StructConstraint_("T2"); #>
<#+ StructConstraint_("TResult"); #>
        {
            return (m1, m2) => m1.Zip(m2, fun);
        }

        public static Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><T3>, <#= Name #><TResult>>
            Lift<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> fun)
<#+ StructConstraint_("T1"); #>
<#+ StructConstraint_("T2"); #>
<#+ StructConstraint_("T3"); #>
<#+ StructConstraint_("TResult"); #>
        {
            return (m1, m2, m3) => m1.Zip(m2, m3, fun);
        }

        public static Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><T3>, <#= Name #><T4>, <#= Name #><TResult>>
            Lift<T1, T2, T3, T4, TResult>(
            Func<T1, T2, T3, T4, TResult> fun)
<#+ StructConstraint_("T1"); #>
<#+ StructConstraint_("T2"); #>
<#+ StructConstraint_("T3"); #>
<#+ StructConstraint_("T4"); #>
<#+ StructConstraint_("TResult"); #>
        {
            return (m1, m2, m3, m4) => m1.Zip(m2, m3, m4, fun);
        }

        public static Func<<#= Name #><T1>, <#= Name #><T2>, <#= Name #><T3>, <#= Name #><T4>, <#= Name #><T5>, <#= Name #><TResult>>
            Lift<T1, T2, T3, T4, T5, TResult>(
            Func<T1, T2, T3, T4, T5, TResult> fun)
<#+ StructConstraint_("T1"); #>
<#+ StructConstraint_("T2"); #>
<#+ StructConstraint_("T3"); #>
<#+ StructConstraint_("T4"); #>
<#+ StructConstraint_("T5"); #>
<#+ StructConstraint_("TResult"); #>
        {
            return (m1, m2, m3, m4, m5) => m1.Zip(m2, m3, m4, m5, fun);
        }

        #endregion
<#+ } #>
    }
<#+
    }
    
    // EmitCoreComonad -------------------------------------------------------------

    protected void EmitCoreComonad() 
    {
#>
    // Comonad methods.
    public static partial class <#= Name #>
    {
        // [Haskell] extract
        public static T Extract<T>(<#= Name #><T> monad)
<#+ StructConstraint_("T"); #>
        {
            return <#= Name #><T>.ε(monad);
        }

        // [Haskell] duplicate
        public static <#= Name #><<#= Name #><T>> Duplicate<T>(<#= Name #><T> monad)
<#+ StructConstraint_("T"); #>
        {
            return <#= Name #><T>.δ(monad);
        }
    }
<#+
    }

    // EmitExtensions ----------------------------------------------------------

    protected void EmitExtensions()
    {
#>
    // Extensions for <#= Name #><T>.
    public static partial class <#= Name #>Extensions
    {
        #region Basic Monad functions (Prelude)

        // [Haskell] fmap
        public static <#= Name #><TResult> <#= MapName #><TSource, TResult>(this <#= Name #><TSource> @this, Func<TSource, TResult> selector)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
            return @this.Bind(_ => <#= Name #>.<#= ReturnName #>(selector.Invoke(_)));
        }

        // [Haskell] >>
        public static <#= Name #><TResult> Then<TSource, TResult>(this <#= Name #><TSource> @this, <#= Name #><TResult> other)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>        
        {
            return @this.Bind(_ => other);
        }
        
        #endregion

        #region Generalisations of list functions (Prelude)

<#+ if (HasZero) { #>
        // [Haskell] mfilter
        public static <#= Name #><TSource> <#= FilterName #><TSource>(this <#= Name #><TSource> @this, Func<TSource, bool> predicate)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>
            Require.NotNull(predicate, "predicate");

            return @this.Bind(_ => predicate.Invoke(_) ? @this : <#= Name #><TSource>.<#= ZeroName #>);
        }
<#+ } #>

<#+ if (!RequireStruct) { #>
        // [Haskell] replicateM
        public static <#= Name #><IEnumerable<TSource>> Repeat<TSource>(this <#= Name #><TSource> @this, int count)
<#+ StructConstraint_("TSource"); #>
        {
            return @this.<#= MapName #>(_ => Enumerable.Repeat(_, count));
        }
<#+ } #>
        
        #endregion

<#+ if (Full) { #>
        #region Conditional execution of monadic expressions (Prelude)

<#+ if (HasZero) { #>
        // [Haskell] guard
        [SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "this")]
        public static <#= Name #><Unit> Guard<TSource>(this <#= Name #><TSource> @this, bool predicate)
<#+ StructConstraint_("TSource"); #>
        {
            return predicate ? <#= Name #>.Unit : <#= Name #>.<#= ZeroName #>;
        }
<#+ } #>

        // [Haskell] when
        [SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "this")]
        public static <#= Name #><Unit> When<TSource>(this <#= Name #><TSource> @this, bool predicate, Action action)
<#+ StructConstraint_("TSource"); #>
        {
            Require.NotNull(action, "action");

            if (predicate) {
                action.Invoke();
            }

            return <#= Name #>.Unit;
        }

        // [Haskell] unless
        public static <#= Name #><Unit> Unless<TSource>(this <#= Name #><TSource> @this, bool predicate, Action action)
<#+ StructConstraint_("TSource"); #>
        {
            return @this.When(!predicate, action);
        }

        #endregion
<#+ } #>

        #region Monadic lifting operators (Prelude)

        // [Haskell] liftM2
        public static <#= Name #><TResult> Zip<TFirst, TSecond, TResult>(
            this <#= Name #><TFirst> @this,
            <#= Name #><TSecond> second,
            Func<TFirst, TSecond, TResult> resultSelector)
<#+ StructConstraint_("TFirst"); #>
<#+ StructConstraint_("TSecond"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
<#+ NotNull_("second"); #>
            Require.NotNull(resultSelector, "resultSelector");

            return @this.Bind(v1 => second.<#= MapName #>(v2 => resultSelector.Invoke(v1, v2)));
        }

<#+ if (Full) { #>
        // [Haskell] liftM3
        public static <#= Name #><TResult> Zip<T1, T2, T3, TResult>(
            this <#= Name #><T1> @this,
            <#= Name #><T2> second,
            <#= Name #><T3> third,
            Func<T1, T2, T3, TResult> resultSelector)
<#+ StructConstraint_("T1"); #>
<#+ StructConstraint_("T2"); #>
<#+ StructConstraint_("T3"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
<#+ NotNull_("second"); #>
            Require.NotNull(resultSelector, "resultSelector");

            Func<T1, <#= Name #><TResult>> g
                = t1 => second.Zip(third, (t2, t3) => resultSelector.Invoke(t1, t2, t3));

            return @this.Bind(g);
        }

        // [Haskell] liftM4
        public static <#= Name #><TResult> Zip<T1, T2, T3, T4, TResult>(
             this <#= Name #><T1> @this,
             <#= Name #><T2> second,
             <#= Name #><T3> third,
             <#= Name #><T4> fourth,
             Func<T1, T2, T3, T4, TResult> resultSelector)
<#+ StructConstraint_("T1"); #>
<#+ StructConstraint_("T2"); #>
<#+ StructConstraint_("T3"); #>
<#+ StructConstraint_("T4"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
<#+ NotNull_("second"); #>
            Require.NotNull(resultSelector, "resultSelector");

            Func<T1, <#= Name #><TResult>> g
                = t1 => second.Zip(third, fourth, (t2, t3, t4) => resultSelector.Invoke(t1, t2, t3, t4));

            return @this.Bind(g);
        }

        // [Haskell] liftM5
        public static <#= Name #><TResult> Zip<T1, T2, T3, T4, T5, TResult>(
            this <#= Name #><T1> @this,
            <#= Name #><T2> second,
            <#= Name #><T3> third,
            <#= Name #><T4> fourth,
            <#= Name #><T5> fifth,
            Func<T1, T2, T3, T4, T5, TResult> resultSelector)
<#+ StructConstraint_("T1"); #>
<#+ StructConstraint_("T2"); #>
<#+ StructConstraint_("T3"); #>
<#+ StructConstraint_("T4"); #>
<#+ StructConstraint_("T5"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
<#+ NotNull_("second"); #>
            Require.NotNull(resultSelector, "resultSelector");

            Func<T1, <#= Name #><TResult>> g
                = t1 => second.Zip(third, fourth, fifth, (t2, t3, t4, t5) => resultSelector.Invoke(t1, t2, t3, t4, t5));

            return @this.Bind(g);
        }
<#+ } #>

        #endregion

        #region Query Expression Pattern

<#+ if (!PreferLinqDialect) { #>
<#+ if (HasZero) { #>
        public static <#= Name #><TSource> Where<TSource>(
            this <#= Name #><TSource> @this, 
            Func<TSource, bool> predicate)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>

            return @this.Filter(predicate);
        }
<#+ } #>

        public static <#= Name #><TResult> Select<TSource, TResult>(
            this <#= Name #><TSource> @this, 
            Func<TSource, TResult> selector)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>

            return @this.<#= MapName #>(selector);
        }
<#+ } #>

        // Kind of generalisation of Zip (liftM2).
        public static <#= Name #><TResult> SelectMany<TSource, TMiddle, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, <#= Name #><TMiddle>> valueSelectorM,
            Func<TSource, TMiddle, TResult> resultSelector)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TMiddle"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
            Require.NotNull(valueSelectorM, "valueSelectorM");
            Require.NotNull(resultSelector, "resultSelector");

            return @this.Bind(_ => valueSelectorM.Invoke(_).<#= MapName #>(middle => resultSelector.Invoke(_, middle)));
        }

<#+ if (HasZero) { #>
        public static <#= Name #><TResult> Join<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TInner"); #>
<#+ StructConstraint_("TKey"); #>
<#+ StructConstraint_("TResult"); #>
        {
            return @this.Join(inner, outerKeySelector, innerKeySelector, resultSelector, EqualityComparer<TKey>.Default);
        }

        public static <#= Name #><TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, <#= Name #><TInner>, TResult> resultSelector)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TInner"); #>
<#+ StructConstraint_("TKey"); #>
<#+ StructConstraint_("TResult"); #>
        {
            return @this.GroupJoin(inner, outerKeySelector, innerKeySelector, resultSelector, EqualityComparer<TKey>.Default);
        }
<#+ } #>

        #endregion
        
        #region Linq extensions

<#+ if (HasZero) { #>
        public static <#= Name #><TResult> Join<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TInner"); #>
<#+ StructConstraint_("TKey"); #>
<#+ StructConstraint_("TResult"); #>
        {
            return JoinCore_(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                comparer ?? EqualityComparer<TKey>.Default);
        }

        public static <#= Name #><TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, <#= Name #><TInner>, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TInner"); #>
<#+ StructConstraint_("TKey"); #>
<#+ StructConstraint_("TResult"); #>
        {
            return GroupJoinCore_(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                comparer ?? EqualityComparer<TKey>.Default);
        }
        
        static <#= Name #><TResult> JoinCore_<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TInner"); #>
<#+ StructConstraint_("TKey"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
<#+ NotNull_("inner"); #>
            Require.NotNull(outerKeySelector, "valueSelector");
            Require.NotNull(innerKeySelector, "innerKeySelector");
            Require.NotNull(resultSelector, "resultSelector");
            
            var keyLookupM = GetKeyLookup_(inner, outerKeySelector, innerKeySelector, comparer);

            return from outerValue in @this
                   from innerValue in keyLookupM.Invoke(outerValue).Then(inner)
                   select resultSelector.Invoke(outerValue, innerValue);
        }
        
        static <#= Name #><TResult> GroupJoinCore_<TSource, TInner, TKey, TResult>(
            this <#= Name #><TSource> @this,
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, <#= Name #><TInner>, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TInner"); #>
<#+ StructConstraint_("TKey"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
<#+ NotNull_("inner"); #>
            Require.NotNull(outerKeySelector, "valueSelector");
            Require.NotNull(innerKeySelector, "innerKeySelector");
            Require.NotNull(resultSelector, "resultSelector");

            var keyLookupM = GetKeyLookup_(inner, outerKeySelector, innerKeySelector, comparer);

            return from outerValue in @this
                   select resultSelector.Invoke(outerValue, keyLookupM.Invoke(outerValue).Then(inner));
        }

        static Func<TSource, <#= Name #><TKey>> GetKeyLookup_<TSource, TInner, TKey>(
            <#= Name #><TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            IEqualityComparer<TKey> comparer)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TInner"); #>
<#+ StructConstraint_("TKey"); #>
        {
            return source =>
            {
                TKey outerKey = outerKeySelector.Invoke(source);
            
                return inner.Select(innerKeySelector).Where(_ => comparer.Equals(_, outerKey));
            };
        }
<#+ } #>

        #endregion

        #region Non-standard extensions
        
        public static <#= Name #><TResult> Coalesce<TSource, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, bool> predicate,
            <#= Name #><TResult> then,
            <#= Name #><TResult> otherwise)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
            Require.NotNull(predicate, "predicate");

            return @this.Bind(_ => predicate.Invoke(_) ? then : otherwise);
        }

<#+ if (HasZero) { #>
        public static <#= Name #><TResult> Then<TSource, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, bool> predicate,
            <#= Name #><TResult> other)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
            return @this.Coalesce(predicate, other, <#= Name #><TResult>.<#= ZeroName #>);
        }

        public static <#= Name #><TResult> Otherwise<TSource, TResult>(
            this <#= Name #><TSource> @this,
            Func<TSource, bool> predicate,
            <#= Name #><TResult> other)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
            return @this.Coalesce(predicate, <#= Name #><TResult>.<#= ZeroName #>, other);
        }
<#+ } #>

        public static <#= Name #><TSource> Run<TSource>(this <#= Name #><TSource> @this, Action<TSource> action)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>
            Require.NotNull(action, "action");

            return @this.Bind(_ => { action.Invoke(_); return @this; });
        }

<#+ if (HasZero) { #>
        public static <#= Name #><TSource> On<#= ZeroName #><TSource>(this <#= Name #><TSource> @this, Action action)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>
            Require.NotNull(action, "action");

            return @this.Then(<#= Name #>.Unit).Run(_ => action.Invoke()).Then(@this);
        }
<#+ } #>

        #endregion
    }
<#+
    }
    
    // EmitKleisliExtensions ---------------------------------------------------

    public void EmitKleisliExtensions()
    {
#>
    // Extensions for Func<T, <#= Name #><TResult>>.
    public static partial class FuncExtensions
    {
        #region Basic Monad functions (Prelude)

        // [Haskell] =<<
        public static <#= Name #><TResult> Invoke<TSource, TResult>(
            this Func<TSource, <#= Name #><TResult>> @this,
            <#= Name #><TSource> monad)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
            return monad.Bind(@this);
        }

        // [Haskell] >=>
        public static Func<TSource, <#= Name #><TResult>> Compose<TSource, TMiddle, TResult>(
            this Func<TSource, <#= Name #><TMiddle>> @this,
            Func<TMiddle, <#= Name #><TResult>> funM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TMiddle"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>

            return _ => @this.Invoke(_).Bind(funM);
        }

<#+ if (Full) { #>
        // [Haskell] <=<
        public static Func<TSource, <#= Name #><TResult>> ComposeBack<TSource, TMiddle, TResult>(
            this Func<TMiddle, <#= Name #><TResult>> @this,
            Func<TSource, <#= Name #><TMiddle>> funM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TMiddle"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
            Require.NotNull(funM, "funM");

            return _ => funM.Invoke(_).Bind(@this);
        }
<#+ } #>

        #endregion
    }
<#+
    }

    // EmitEnumerableMonadExtensions -------------------------------------------

    protected void EmitEnumerableMonadExtensions()
    {
#>
    // Extensions for IEnumerable<<#= Name #><T>>.
    public static partial class Enumerable<#= Name #>Extensions
    {
        #region Basic Monad functions (Prelude)

<#+ if (!RequireStruct) { #>
        // [Haskell] sequence
        public static <#= Name #><IEnumerable<TSource>> Collect<TSource>(this IEnumerable<<#= Name #><TSource>> @this)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>

            var seed = <#= Name #>.<#= ReturnName #>(Enumerable.Empty<TSource>());
            Func<<#= Name #><IEnumerable<TSource>>, <#= Name #><TSource>, <#= Name #><IEnumerable<TSource>>> fun
                = (m, n) =>
                    m.Bind(list =>
                    {
                        return n.Bind(item => <#= Name #>.<#= ReturnName #>(list.Concat(Enumerable.Repeat(item, 1))));
                    });

            return @this.Aggregate(seed, fun);
        }
<#+ } #>
        
        #endregion

<#+ if (HasZero && HasPlus) { #>
        #region Generalisations of list functions (Prelude)

        // [Haskell] msum
        public static <#= Name #><TSource> Sum<TSource>(this IEnumerable<<#= Name #><TSource>> @this)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>

            return @this.Aggregate(<#= Name #><TSource>.<#= ZeroName #>, (m, n) => m.<#= PlusName #>(n));
        }

        #endregion
<#+ } #>
    }
<#+
    }

    // EmitEnumerableExtensions ------------------------------------------------

    protected void EmitEnumerableExtensions()
    {
#>
    // Extensions for IEnumerable<T>.
    public static partial class EnumerableExtensions
    {
        #region Basic Monad functions (Prelude)

<#+ if (!RequireStruct) { #>
        // [Haskell] mapM
        public static <#= Name #><IEnumerable<TResult>> Map<TSource, TResult>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><TResult>> funM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
            Require.NotNull(funM, "funM");

            return (from _ in @this select funM.Invoke(_)).Collect();
        }
<#+ } #>
        
        #endregion

        #region Generalisations of list functions (Prelude)

<#+ if (!RequireStruct) { #>
        // [Haskell] filterM
        public static <#= Name #><IEnumerable<TSource>> Filter<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, <#= Name #><bool>> predicateM)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>
            Require.NotNull(predicateM, "predicateM");

            // NB: Haskell uses tail recursion, we don't.
            var list = new List<TSource>();

            foreach (var item in @this) {
                predicateM.Invoke(item)
                    .Run(_ =>
                    {
                        if (_ == true) {
                            list.Add(item);
                        }
                    });
            }

            // REVIEW: Why do we create a Monad here?
            return <#= Name #>.<#= ReturnName #>(list.AsEnumerable());
        }

<#+ if (Full) { #>
        // [Haskell] mapAndUnzipM
        public static <#= Name #><Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>> MapAndUnzip<TSource, TFirst, TSecond>(
           this IEnumerable<TSource> @this,
           Func<TSource, <#= Name #><Tuple<TFirst, TSecond>>> funM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TFirst"); #>
<#+ StructConstraint_("TSecond"); #>
        {
<#+ ObjectNotNull_(); #>
            Require.NotNull(funM, "funM");

            return from _ in
                       (from _ in @this select funM.Invoke(_)).Collect()
                   let item1 = from item in _ select item.Item1
                   let item2 = from item in _ select item.Item2
                   select new Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>(item1, item2);
        }
<#+ } #>

        // [Haskell] zipWithM
        public static <#= Name #><IEnumerable<TResult>> Zip<TFirst, TSecond, TResult>(
            this IEnumerable<TFirst> @this,
            IEnumerable<TSecond> second,
            Func<TFirst, TSecond, <#= Name #><TResult>> resultSelectorM)
<#+ StructConstraint_("TFirst"); #>
<#+ StructConstraint_("TSecond"); #>
<#+ StructConstraint_("TResult"); #>
        {
<#+ ObjectNotNull_(); #>
<#+ NotNull_("second"); #>
            Require.NotNull(resultSelectorM, "resultSelectorM");

            Func<TFirst, TSecond, <#= Name #><TResult>> resultSelector = (v1, v2) => resultSelectorM.Invoke(v1, v2);

            // WARNING: Do not remove resultSelector, otherwise .NET will make a recursive call
            // to this method instead of using the Zip from Linq.
            return @this.Zip(second, resultSelector: resultSelector).Collect();
        }
<#+ } #>

        // [Haskell] foldM
        public static <#= Name #><TAccumulate> Fold<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulatorM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TAccumulate"); #>
        {
<#+ ObjectNotNull_(); #>
            Require.NotNull(accumulatorM, "accumulatorM");

            <#= Name #><TAccumulate> result = <#= Name #>.<#= ReturnName #>(seed);

            foreach (TSource item in @this) {
                result = result.Bind(_ => accumulatorM.Invoke(_, item));
            }

            return result;
        }

        #endregion
        
        #region Aggregate Operators

<#+ if (Full) { #>
        public static <#= Name #><TAccumulate> FoldBack<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, <#= Name #><TAccumulate>> accumulatorM)
<#+ StructConstraint_("TSource"); #>
<#+ StructConstraint_("TAccumulate"); #>
        {
 <#+ ObjectNotNull_(); #>

            return @this.Reverse().Fold(seed, accumulatorM);
        }
<#+ } #>

        public static <#= Name #><TSource> Reduce<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulatorM)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>
            Require.NotNull(accumulatorM, "accumulatorM");

            using (var iter = @this.GetEnumerator()) {
                if (!iter.MoveNext()) {
                    throw new InvalidOperationException("Source sequence was empty.");
                }

                <#= Name #><TSource> result = <#= Name #>.<#= ReturnName #>(iter.Current);

                while (iter.MoveNext()) {
                    result = result.Bind(_ => accumulatorM.Invoke(_, iter.Current));
                }

                return result;
            }
        }

<#+ if (Full) { #>
        public static <#= Name #><TSource> ReduceBack<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, <#= Name #><TSource>> accumulatorM)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>

            return @this.Reverse().Reduce(accumulatorM);
        }
<#+ } #>

        #endregion
    }
<#+
    }

    // EmitUnsafeEnumerableExtensions ------------------------------------------

    protected void EmitUnsafeEnumerableExtensions()
    {
        if (!HasZero) { 
            return;
        }
#>
    // Possibly conflicting extensions for IEnumerable<T>.
    public static partial class UnsafeEnumerableExtensions
    {
        #region Element Operators

        public static <#= Name #><TSource> FirstOr<#= ZeroName #><TSource>(this IEnumerable<TSource> @this)
<#+ StructConstraint_("TSource"); #>
        {
            return FirstOr<#= ZeroName #>(@this, _ => true);
        }

        public static <#= Name #><TSource> FirstOr<#= ZeroName #><TSource>(this IEnumerable<TSource> @this, Func<TSource, bool> predicate)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>
            Require.NotNull(predicate, "predicate");

            var seq = from t in @this where predicate.Invoke(t) select <#= Name #>.<#= ReturnName #>(t);
            using (var iter = seq.GetEnumerator()) {
                return iter.MoveNext() ? iter.Current : <#= Name #><TSource>.<#= ZeroName #>;
            }
        }

        public static <#= Name #><TSource> LastOr<#= ZeroName #><TSource>(this IEnumerable<TSource> @this)
<#+ StructConstraint_("TSource"); #>
        {
            return LastOr<#= ZeroName #>(@this, _ => true);
        }

        public static <#= Name #><TSource> LastOr<#= ZeroName #><TSource>(this IEnumerable<TSource> @this, Func<TSource, bool> predicate)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>
            Require.NotNull(predicate, "predicate");

            var seq = from t in @this where predicate.Invoke(t) select <#= Name #>.<#= ReturnName #>(t);
            using (var iter = seq.GetEnumerator()) {
                if (!iter.MoveNext()) {
                    return <#= Name #><TSource>.<#= ZeroName #>;
                }

                var value = iter.Current;
                while (iter.MoveNext()) {
                    value = iter.Current;
                }

                return value;
            }
        }

        public static <#= Name #><TSource> SingleOr<#= ZeroName #><TSource>(this IEnumerable<TSource> @this)
<#+ StructConstraint_("TSource"); #>
        {
            return SingleOr<#= ZeroName #>(@this, _ => true);
        }

        public static <#= Name #><TSource> SingleOr<#= ZeroName #><TSource>(this IEnumerable<TSource> @this, Func<TSource, bool> predicate)
<#+ StructConstraint_("TSource"); #>
        {
<#+ ObjectNotNull_(); #>
            Require.NotNull(predicate, "predicate");

            var seq = from t in @this where predicate.Invoke(t) select <#= Name #>.<#= ReturnName #>(t);
            using (var iter = seq.GetEnumerator()) {
                var result = iter.MoveNext() ? iter.Current : <#= Name #><TSource>.<#= ZeroName #>;

                // On retourne <#= Name #>.<#= ZeroName #> si il y a encore un élément.
                return iter.MoveNext() ? <#= Name #><TSource>.<#= ZeroName #> : result;
            }
        }

        #endregion
    }
<#+
    }

    /* ====================================================================== *
     * Private Methods
     * ====================================================================== */
    
    protected void WriteHeader_()
    {
        if (_headerWritten) {
            return;
        }
#>
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#+
        _headerWritten = true;
    }
    
    string InferName_() 
    {
        return System.IO.Path.GetFileNameWithoutExtension(Host.TemplateFile);
    }
    
    string InferNamespace_() 
    {
        return System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint").ToString();
    }
    
    void StructConstraint_(string name)
    {
        if (RequireStruct) {
#>
            where <#= name #> : struct
<#+
        }
    }

    void ObjectNotNull_() 
    {
        if (IsNullable) {
#>
            Require.Object(@this);
<#+
        }
    }

    void NotNull_(string name) 
    {
        if (IsNullable) {
#>
            Require.NotNull(<#= name #>, "<#= name #>");
<#+
        }
    }

    void ThrowIfInitialized_() 
    {
        if (_initialized) {
            throw new InvalidOperationException();
        }
    }

    void NewLine_()
    {
        WriteLine(String.Empty);
    }
#>
