<#@ include file="..\CodeTemplates\Iso4217.tt" #>
<#

var currentCurrencies = ParseCurrent(@"..\Resources\ISO4217\20150101\A1.xml");
var legacyCurrencies = ParseLegacy(@"..\Resources\ISO4217\20150101\A3.xml");

#>
// Copyright (c) Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
//
// Runtime Version: <#= System.Environment.Version #>
// </auto-generated>
//------------------------------------------------------------------------------

namespace Narvalo.Globalization
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;

    public sealed partial class InMemoryCurrencyInfoProvider
    {
        private static readonly Lazy<CurrencyInfoCollection> s_CurrentCurrencies
            = new Lazy<CurrencyInfoCollection>(InitializeCurrentCurrencies_);
        
        private static readonly Lazy<CurrencyInfoCollection> s_LegacyCurrencies
            = new Lazy<CurrencyInfoCollection>(InitializeLegacyCurrencies_);

        /// <summary>
        /// Gets the list of currently active currencies.
        /// </summary>
        /// <remarks>
        /// The list is built out of data found on the "Association Suisse de Normalisation"
        /// <seealso cref="!:http://www.currency-iso.org/en/home.html">website</seealso>.
        /// </remarks>
        /// <value>The list of currently active currencies.</value>
        [SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode",
            Justification = "[GeneratedCode] Lazy initialization of an (in-memory) list of currencies.")]
        [SuppressMessage("Microsoft.Performance", "CA1809:AvoidExcessiveLocals",
            Justification = "[GeneratedCode] Creation of an (in-memory) list of currencies.")]
        [SuppressMessage("Gendarme.Rules.Smells", "AvoidLongMethodsRule",
            Justification = "[GeneratedCode] Creation of an (in-memory) list of currencies.")]
        private static CurrencyInfoCollection InitializeCurrentCurrencies_()
        {
            var list = new List<CurrencyInfo>(<#= currentCurrencies.Count #>);

<# foreach (var item in currentCurrencies) { #>
            list.Add(new CurrencyInfo("<#= item.Code #>", <#= item.NumericCode #>) {
                EnglishName = @"<#= item.EnglishName #>",
                EnglishRegionName = @"<#= item.EnglishRegionName #>",
<# if (item.IsFund) { #>
                IsFund = true,
<# } #>
<# if (item.MinorUnits.HasValue) { #>
                MinorUnits = <#= item.MinorUnits.Value.ToString() #>,
<# } #>
            });

<# } #>
            return new CurrencyInfoCollection(list);
        }
        
        /// <summary>
        /// Gets the list of discontinued currencies.
        /// </summary>
        /// <remarks>
        /// The list is built out of data found on the "Association Suisse de Normalisation"
        /// <seealso cref="!:http://www.currency-iso.org/en/home.html">website</seealso>.
        /// </remarks>
        /// <value>The list of discontinued currencies.</value>
        [SuppressMessage("Microsoft.Performance", "CA1809:AvoidExcessiveLocals",
            Justification = "[GeneratedCode] Creation of an (in-memory) list of currencies.")]
        [SuppressMessage("Gendarme.Rules.Smells", "AvoidLongMethodsRule",
            Justification = "[GeneratedCode] Creation of an (in-memory) list of currencies.")]
        private static CurrencyInfoCollection InitializeLegacyCurrencies_()
        {
            var list = new List<CurrencyInfo>(<#= legacyCurrencies.Count #>);

<# foreach (var item in legacyCurrencies) { #>
            list.Add(new CurrencyInfo("<#= item.Code #>", <#= item.NumericCode #>) {
                EnglishName = @"<#= item.EnglishName #>",
                EnglishRegionName = @"<#= item.EnglishRegionName #>",
<# if (item.IsFund) { #>
                IsFund = true,
<# } #>
                Superseded = true,
            });

<# } #>
            return new CurrencyInfoCollection(list);
        }
    }
}