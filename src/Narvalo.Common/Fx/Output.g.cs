// Copyright (c) 2014, Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Narvalo.Fx {
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using Narvalo;      // For Require
    using Narvalo.Fx;   // For Unit

    // Monad methods.
    public static partial class Output
    {
        static readonly Output<Unit> Unit_ = Success(Narvalo.Fx.Unit.Single);

        public static Output<Unit> Unit { get { return Unit_; } }


        // [Haskell] return
        public static Output<T> Success<T>(T value)
        {
            return Output<T>.η(value);
        }
        
        #region Generalisations of list functions (Prelude)

        // [Haskell] join
        public static Output<T> Flatten<T>(Output<Output<T>> square)
        {
            return Output<T>.μ(square);
        }

        #endregion

    }
    // Extensions for Output<T>.
    public static partial class OutputExtensions
    {
        #region Basic Monad functions (Prelude)

        // [Haskell] fmap
        public static Output<TResult> Select<TSource, TResult>(this Output<TSource> @this, Func<TSource, TResult> selector)
        {
            return @this.Bind(_ => Output.Success(selector.Invoke(_)));
        }

        // [Haskell] >>
        public static Output<TResult> Then<TSource, TResult>(this Output<TSource> @this, Output<TResult> other)
        
        {
            return @this.Bind(_ => other);
        }
        
        #endregion

        #region Generalisations of list functions (Prelude)

        // [Haskell] replicateM
        public static Output<IEnumerable<TSource>> Repeat<TSource>(this Output<TSource> @this, int count)
        {
            return @this.Select(_ => Enumerable.Repeat(_, count));
        }
        
        #endregion


        #region Monadic lifting operators (Prelude)

        // [Haskell] liftM2
        public static Output<TResult> Zip<TFirst, TSecond, TResult>(
            this Output<TFirst> @this,
            Output<TSecond> second,
            Func<TFirst, TSecond, TResult> resultSelector)
        {
            Require.Object(@this);
            Require.NotNull(second, "second");
            Require.NotNull(resultSelector, "resultSelector");

            return @this.Bind(v1 => second.Select(v2 => resultSelector.Invoke(v1, v2)));
        }


        #endregion

        #region Query Expression Pattern


        // Kind of generalisation of Zip (liftM2).
        public static Output<TResult> SelectMany<TSource, TMiddle, TResult>(
            this Output<TSource> @this,
            Func<TSource, Output<TMiddle>> valueSelectorM,
            Func<TSource, TMiddle, TResult> resultSelector)
        {
            Require.Object(@this);
            Require.NotNull(valueSelectorM, "valueSelectorM");
            Require.NotNull(resultSelector, "resultSelector");

            return @this.Bind(_ => valueSelectorM.Invoke(_).Select(middle => resultSelector.Invoke(_, middle)));
        }


        #endregion
        
        #region Linq extensions


        #endregion

        #region Non-standard extensions
        
        public static Output<TResult> Coalesce<TSource, TResult>(
            this Output<TSource> @this,
            Func<TSource, bool> predicate,
            Output<TResult> then,
            Output<TResult> otherwise)
        {
            Require.Object(@this);
            Require.NotNull(predicate, "predicate");

            return @this.Bind(_ => predicate.Invoke(_) ? then : otherwise);
        }


        public static Output<TSource> Run<TSource>(this Output<TSource> @this, Action<TSource> action)
        {
            Require.Object(@this);
            Require.NotNull(action, "action");

            return @this.Bind(_ => { action.Invoke(_); return @this; });
        }


        #endregion
    }
    // Extensions for Func<T, Output<TResult>>.
    public static partial class FuncExtensions
    {
        #region Basic Monad functions (Prelude)

        // [Haskell] =<<
        public static Output<TResult> Invoke<TSource, TResult>(
            this Func<TSource, Output<TResult>> @this,
            Output<TSource> monad)
        {
            return monad.Bind(@this);
        }

        // [Haskell] >=>
        public static Func<TSource, Output<TResult>> Compose<TSource, TMiddle, TResult>(
            this Func<TSource, Output<TMiddle>> @this,
            Func<TMiddle, Output<TResult>> funM)
        {
            Require.Object(@this);

            return _ => @this.Invoke(_).Bind(funM);
        }


        #endregion
    }
}
