<#@ include file="..\CodeTemplates\Iso4217.tt" #>
<#

var currentCurrencies = ParseCurrent(@"..\Resources\ISO4217\20150101\A1.xml");
var legacyCurrencies = ParseLegacy(@"..\Resources\ISO4217\20150101\A3.xml");
var currencies = currentCurrencies.Concat(legacyCurrencies);


var codeSet = new HashSet<string>();

#>
// Copyright (c) Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
//
// Runtime Version: <#= System.Environment.Version #>
// </auto-generated>
//------------------------------------------------------------------------------

using global::System.Diagnostics.CodeAnalysis;

[module: SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass",
    Justification = "[GeneratedCode] A T4 template may contain multiple classes.")]
[module: SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1508:ClosingCurlyBracketsMustNotBePrecededByBlankLine",
    Justification = "[GeneratedCode] Newline rule disabled for T4 templates.")]

namespace <#= InferNamespace() #>
{
    using System;
    using System.Diagnostics.Contracts;

<#
    foreach (var currency in currencies.OrderBy(_ => _.Code))
    {
        if (codeSet.Contains(currency.Code))
        {
            continue;
        }

        codeSet.Add(currency.Code);

        // WARNING: If you change the name of the property "s_Currency",
        // you MUST also change the value of INSTANCE_CURRENCY_FIELD in 
        // Internal.CurrencyActivator<TCurrency>.
        // The same applies to CURRENCIES_NAMESPACE.
#>
    /// <summary>
    /// Represents the currency unit for the "<#= currency.EnglishName #>".
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly",
        Justification = "[Intentionally] Exceptionally we prefer to preserve the currency code casing.")]
    public sealed class <#= currency.Code #> : Currency
    {
        private static readonly <#= currency.Code #> s_Currency = new <#= currency.Code #>(true);

        public <#= currency.Code #>() : this(false) { }
        
        private <#= currency.Code #>(bool builtin) : base("<#= currency.Code #>") 
        { 
            if (!builtin) {
                throw new NotSupportedException();
            }
        }
        
        /// <summary>
        /// Gets the unique instance of the <see cref="Currency" /> class for the "<#= currency.EnglishName #>".
        /// </summary>
        /// <value>The unique instance of the <see cref="Currency" /> class for the "<#= currency.EnglishName #>".</value>
        public static <#= currency.Code #> Currency
        { 
            get 
            {
                Contract.Ensures(Contract.Result<Currency>() != null);
                return s_Currency;
            }
        }
    }

<#
    }
#>
}
