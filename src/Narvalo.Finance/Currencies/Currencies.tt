<#@ template language="C#" debug="false" hostspecific="true" inherits="Iso4217Template" #>
<#@ output extension=".g.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(T4NarvaloLibrary)" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Narvalo.T4" #>
<#

var currentCurrencies = ParseCurrent(@"..\Resources\ISO4217\20150101\A1.xml");
var legacyCurrencies = ParseLegacy(@"..\Resources\ISO4217\20150101\A3.xml");
var currencies = currentCurrencies.Concat(legacyCurrencies);

var codeSet = new HashSet<string>();

WriteHeader();

#>

using global::System.Diagnostics.CodeAnalysis;

[assembly: SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords", MessageId = "Try", Scope = "type", Target = "Narvalo.Finance.Currencies.TRY",
    Justification = "[Intentionally] TRY is the official currency code for the Turkish Lira.")]

namespace <#= Namespace #>
{
    using System.Diagnostics.Contracts;

<#
    foreach (var currency in currencies.OrderBy(_ => _.Code))
    {
        if (codeSet.Contains(currency.Code))
        {
            continue;
        }

        codeSet.Add(currency.Code);
#>
    /// <summary>
    /// Represents the currency unit for the "<#= currency.EnglishName #>".
    /// </summary>
    <# WriteCompilerAttributes(); #>
    [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly",
        Justification = "[Intentionally] Exceptionally we prefer to preserve the currency code casing.")]
    public sealed class <#= currency.Code #> : Currency
    {
        /// <summary>
        /// The unique instance of the <see cref="<#= currency.Code #>" /> class.
        /// </summary>
        private static readonly <#= currency.Code #> s_Instance = new <#= currency.Code #>();

        /// <summary>
        /// Initializes a new instance of the <see cref="<#= currency.Code #>" /> class.
        /// </summary>
        internal <#= currency.Code #>() : base("<#= currency.Code #>") { }

        /// <summary>
        /// Gets the unique instance of the <see cref="Currency" /> class for the "<#= currency.EnglishName #>".
        /// </summary>
        /// <value>The unique instance of the <see cref="Currency" /> class for the "<#= currency.EnglishName #>".</value>
        public static <#= currency.Code #> Currency
        {
            get
            {
                Contract.Ensures(Contract.Result<Currency>() != null);
                return s_Instance;
            }
        }
    }

<#
    }
#>
}
