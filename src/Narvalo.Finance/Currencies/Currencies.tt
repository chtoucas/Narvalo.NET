<#@ template language="C#" debug="true" hostspecific="true" inherits="Iso4217Template" #>
<#@ output extension=".g.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(T4NarvaloLibrary)" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Narvalo.T4" #>
<#

// To avoid any breaking change, we include all currencies (withdrawn or not).

// Uncomment to debug:
//Debug = true;

bool firstSeen = true;

var currentCurrencies = ParseCurrent(@"..\..\..\data\ISO4217\A1.xml");
var legacyCurrencies = ParseLegacy(@"..\..\..\data\ISO4217\A3.xml");
var currencies = currentCurrencies.Concat(legacyCurrencies);

var codeSet = new HashSet<string>();

WriteHeader();

#>
using global::System.Diagnostics.CodeAnalysis;

[assembly: SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords", MessageId = "Try", Scope = "type", Target = "Narvalo.Finance.Currencies.TRY", Justification = "[Intentionally] TRY is the official currency code for the Turkish Lira.")]

// Each currency code defines a class which is a lazy initalized singleton.
// The singleton implementation is taken from http://csharpindepth.com/Articles/General/Singleton.aspx.
namespace <#= Namespace #>
{
<#
    foreach (var currency in currencies.OrderBy(_ => _.Code))
    {
        if (codeSet.Contains(currency.Code))
        {
            continue;
        }

        codeSet.Add(currency.Code);
#>
    /// <summary>
    /// Represents the currency unit for the code "<#= currency.Code #>".
    /// </summary>
    <# WriteCompilerAttributes(); #>
<#
        if (firstSeen)
        {
            firstSeen = false;
        }
        else
        {
#>
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
<#
        }
#>
    [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", Justification = "[Intentionally] Exceptionally we prefer to preserve the currency code casing.")]
    public sealed class <#= currency.Code #> : Currency
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="<#= currency.Code #>" /> class.
        /// </summary>
        private <#= currency.Code #>() : base("<#= currency.Code #>") { }

        /// <summary>
        /// Gets the unique instance of the <see cref="Currency" /> class for the code "<#= currency.Code #>".
        /// </summary>
        /// <value>The unique instance of the <see cref="Currency" /> class for the code "<#= currency.Code #>".</value>
        public static <#= currency.Code #> Unit { get { Warrant.NotNull<Currency>(); return Uniq.Instance; } }

        [SuppressMessage("Microsoft.Performance", "CA1812:AvoidUninstantiatedInternalClasses", Justification = "[Ignore] Singleton pattern.")]
        private class Uniq
        {
            [SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline", Justification = "[Ignore] Singleton pattern.")]
            static Nested() { }
            internal static readonly <#= currency.Code #> Instance = new <#= currency.Code #>();
        }
    }

<#
    }
#>
}
