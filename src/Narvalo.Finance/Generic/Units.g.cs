// Copyright (c) Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
//
// Runtime Version: 4.0.30319.42000
// Microsoft.VisualStudio.TextTemplating: 14.0
// </auto-generated>
//------------------------------------------------------------------------------

// Below, the singleton implementation is taken from http://csharpindepth.com/Articles/General/Singleton.aspx.
namespace Narvalo.Finance.Generic
{
    using System;

    /// <summary>
    /// Represents the currency unit for the code "ADP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    public sealed class ADP : Currency<ADP>
    {
        private ADP() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ADP" /> class.
        /// </summary>
        public static ADP Unit { get { Warrant.NotNull<ADP>(); return Uniq.Instance; } }

        public static explicit operator ADP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ADP value) => value?.ToCurrency();

        public static ADP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ADP Instance = new ADP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "AED".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class AED : Currency<AED>
    {
        private AED() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="AED" /> class.
        /// </summary>
        public static AED Unit { get { Warrant.NotNull<AED>(); return Uniq.Instance; } }

        public static explicit operator AED(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(AED value) => value?.ToCurrency();

        public static AED FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly AED Instance = new AED();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "AFA".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class AFA : Currency<AFA>
    {
        private AFA() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="AFA" /> class.
        /// </summary>
        public static AFA Unit { get { Warrant.NotNull<AFA>(); return Uniq.Instance; } }

        public static explicit operator AFA(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(AFA value) => value?.ToCurrency();

        public static AFA FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly AFA Instance = new AFA();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "AFN".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class AFN : Currency<AFN>
    {
        private AFN() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="AFN" /> class.
        /// </summary>
        public static AFN Unit { get { Warrant.NotNull<AFN>(); return Uniq.Instance; } }

        public static explicit operator AFN(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(AFN value) => value?.ToCurrency();

        public static AFN FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly AFN Instance = new AFN();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ALK".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ALK : Currency<ALK>
    {
        private ALK() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ALK" /> class.
        /// </summary>
        public static ALK Unit { get { Warrant.NotNull<ALK>(); return Uniq.Instance; } }

        public static explicit operator ALK(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ALK value) => value?.ToCurrency();

        public static ALK FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ALK Instance = new ALK();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ALL".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ALL : Currency<ALL>
    {
        private ALL() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ALL" /> class.
        /// </summary>
        public static ALL Unit { get { Warrant.NotNull<ALL>(); return Uniq.Instance; } }

        public static explicit operator ALL(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ALL value) => value?.ToCurrency();

        public static ALL FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ALL Instance = new ALL();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "AMD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class AMD : Currency<AMD>
    {
        private AMD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="AMD" /> class.
        /// </summary>
        public static AMD Unit { get { Warrant.NotNull<AMD>(); return Uniq.Instance; } }

        public static explicit operator AMD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(AMD value) => value?.ToCurrency();

        public static AMD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly AMD Instance = new AMD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ANG".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ANG : Currency<ANG>
    {
        private ANG() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ANG" /> class.
        /// </summary>
        public static ANG Unit { get { Warrant.NotNull<ANG>(); return Uniq.Instance; } }

        public static explicit operator ANG(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ANG value) => value?.ToCurrency();

        public static ANG FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ANG Instance = new ANG();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "AOA".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class AOA : Currency<AOA>
    {
        private AOA() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="AOA" /> class.
        /// </summary>
        public static AOA Unit { get { Warrant.NotNull<AOA>(); return Uniq.Instance; } }

        public static explicit operator AOA(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(AOA value) => value?.ToCurrency();

        public static AOA FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly AOA Instance = new AOA();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "AOK".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class AOK : Currency<AOK>
    {
        private AOK() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="AOK" /> class.
        /// </summary>
        public static AOK Unit { get { Warrant.NotNull<AOK>(); return Uniq.Instance; } }

        public static explicit operator AOK(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(AOK value) => value?.ToCurrency();

        public static AOK FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly AOK Instance = new AOK();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "AON".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class AON : Currency<AON>
    {
        private AON() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="AON" /> class.
        /// </summary>
        public static AON Unit { get { Warrant.NotNull<AON>(); return Uniq.Instance; } }

        public static explicit operator AON(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(AON value) => value?.ToCurrency();

        public static AON FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly AON Instance = new AON();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "AOR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class AOR : Currency<AOR>
    {
        private AOR() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="AOR" /> class.
        /// </summary>
        public static AOR Unit { get { Warrant.NotNull<AOR>(); return Uniq.Instance; } }

        public static explicit operator AOR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(AOR value) => value?.ToCurrency();

        public static AOR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly AOR Instance = new AOR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ARA".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ARA : Currency<ARA>
    {
        private ARA() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ARA" /> class.
        /// </summary>
        public static ARA Unit { get { Warrant.NotNull<ARA>(); return Uniq.Instance; } }

        public static explicit operator ARA(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ARA value) => value?.ToCurrency();

        public static ARA FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ARA Instance = new ARA();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ARP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ARP : Currency<ARP>
    {
        private ARP() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ARP" /> class.
        /// </summary>
        public static ARP Unit { get { Warrant.NotNull<ARP>(); return Uniq.Instance; } }

        public static explicit operator ARP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ARP value) => value?.ToCurrency();

        public static ARP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ARP Instance = new ARP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ARS".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ARS : Currency<ARS>
    {
        private ARS() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ARS" /> class.
        /// </summary>
        public static ARS Unit { get { Warrant.NotNull<ARS>(); return Uniq.Instance; } }

        public static explicit operator ARS(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ARS value) => value?.ToCurrency();

        public static ARS FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ARS Instance = new ARS();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ARY".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ARY : Currency<ARY>
    {
        private ARY() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ARY" /> class.
        /// </summary>
        public static ARY Unit { get { Warrant.NotNull<ARY>(); return Uniq.Instance; } }

        public static explicit operator ARY(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ARY value) => value?.ToCurrency();

        public static ARY FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ARY Instance = new ARY();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ATS".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ATS : Currency<ATS>
    {
        private ATS() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ATS" /> class.
        /// </summary>
        public static ATS Unit { get { Warrant.NotNull<ATS>(); return Uniq.Instance; } }

        public static explicit operator ATS(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ATS value) => value?.ToCurrency();

        public static ATS FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ATS Instance = new ATS();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "AUD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class AUD : Currency<AUD>
    {
        private AUD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="AUD" /> class.
        /// </summary>
        public static AUD Unit { get { Warrant.NotNull<AUD>(); return Uniq.Instance; } }

        public static explicit operator AUD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(AUD value) => value?.ToCurrency();

        public static AUD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly AUD Instance = new AUD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "AWG".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class AWG : Currency<AWG>
    {
        private AWG() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="AWG" /> class.
        /// </summary>
        public static AWG Unit { get { Warrant.NotNull<AWG>(); return Uniq.Instance; } }

        public static explicit operator AWG(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(AWG value) => value?.ToCurrency();

        public static AWG FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly AWG Instance = new AWG();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "AYM".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class AYM : Currency<AYM>
    {
        private AYM() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="AYM" /> class.
        /// </summary>
        public static AYM Unit { get { Warrant.NotNull<AYM>(); return Uniq.Instance; } }

        public static explicit operator AYM(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(AYM value) => value?.ToCurrency();

        public static AYM FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly AYM Instance = new AYM();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "AZM".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class AZM : Currency<AZM>
    {
        private AZM() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="AZM" /> class.
        /// </summary>
        public static AZM Unit { get { Warrant.NotNull<AZM>(); return Uniq.Instance; } }

        public static explicit operator AZM(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(AZM value) => value?.ToCurrency();

        public static AZM FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly AZM Instance = new AZM();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "AZN".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class AZN : Currency<AZN>
    {
        private AZN() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="AZN" /> class.
        /// </summary>
        public static AZN Unit { get { Warrant.NotNull<AZN>(); return Uniq.Instance; } }

        public static explicit operator AZN(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(AZN value) => value?.ToCurrency();

        public static AZN FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly AZN Instance = new AZN();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BAD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BAD : Currency<BAD>
    {
        private BAD() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BAD" /> class.
        /// </summary>
        public static BAD Unit { get { Warrant.NotNull<BAD>(); return Uniq.Instance; } }

        public static explicit operator BAD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BAD value) => value?.ToCurrency();

        public static BAD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BAD Instance = new BAD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BAM".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BAM : Currency<BAM>
    {
        private BAM() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BAM" /> class.
        /// </summary>
        public static BAM Unit { get { Warrant.NotNull<BAM>(); return Uniq.Instance; } }

        public static explicit operator BAM(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BAM value) => value?.ToCurrency();

        public static BAM FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BAM Instance = new BAM();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BBD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BBD : Currency<BBD>
    {
        private BBD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BBD" /> class.
        /// </summary>
        public static BBD Unit { get { Warrant.NotNull<BBD>(); return Uniq.Instance; } }

        public static explicit operator BBD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BBD value) => value?.ToCurrency();

        public static BBD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BBD Instance = new BBD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BDT".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BDT : Currency<BDT>
    {
        private BDT() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BDT" /> class.
        /// </summary>
        public static BDT Unit { get { Warrant.NotNull<BDT>(); return Uniq.Instance; } }

        public static explicit operator BDT(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BDT value) => value?.ToCurrency();

        public static BDT FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BDT Instance = new BDT();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BEC".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BEC : Currency<BEC>
    {
        private BEC() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BEC" /> class.
        /// </summary>
        public static BEC Unit { get { Warrant.NotNull<BEC>(); return Uniq.Instance; } }

        public static explicit operator BEC(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BEC value) => value?.ToCurrency();

        public static BEC FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BEC Instance = new BEC();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BEF".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BEF : Currency<BEF>
    {
        private BEF() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BEF" /> class.
        /// </summary>
        public static BEF Unit { get { Warrant.NotNull<BEF>(); return Uniq.Instance; } }

        public static explicit operator BEF(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BEF value) => value?.ToCurrency();

        public static BEF FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BEF Instance = new BEF();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BEL".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BEL : Currency<BEL>
    {
        private BEL() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BEL" /> class.
        /// </summary>
        public static BEL Unit { get { Warrant.NotNull<BEL>(); return Uniq.Instance; } }

        public static explicit operator BEL(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BEL value) => value?.ToCurrency();

        public static BEL FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BEL Instance = new BEL();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BGJ".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BGJ : Currency<BGJ>
    {
        private BGJ() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BGJ" /> class.
        /// </summary>
        public static BGJ Unit { get { Warrant.NotNull<BGJ>(); return Uniq.Instance; } }

        public static explicit operator BGJ(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BGJ value) => value?.ToCurrency();

        public static BGJ FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BGJ Instance = new BGJ();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BGK".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BGK : Currency<BGK>
    {
        private BGK() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BGK" /> class.
        /// </summary>
        public static BGK Unit { get { Warrant.NotNull<BGK>(); return Uniq.Instance; } }

        public static explicit operator BGK(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BGK value) => value?.ToCurrency();

        public static BGK FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BGK Instance = new BGK();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BGL".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BGL : Currency<BGL>
    {
        private BGL() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BGL" /> class.
        /// </summary>
        public static BGL Unit { get { Warrant.NotNull<BGL>(); return Uniq.Instance; } }

        public static explicit operator BGL(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BGL value) => value?.ToCurrency();

        public static BGL FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BGL Instance = new BGL();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BGN".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BGN : Currency<BGN>
    {
        private BGN() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BGN" /> class.
        /// </summary>
        public static BGN Unit { get { Warrant.NotNull<BGN>(); return Uniq.Instance; } }

        public static explicit operator BGN(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BGN value) => value?.ToCurrency();

        public static BGN FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BGN Instance = new BGN();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BHD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BHD : Currency<BHD>
    {
        private BHD() : base(3) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BHD" /> class.
        /// </summary>
        public static BHD Unit { get { Warrant.NotNull<BHD>(); return Uniq.Instance; } }

        public static explicit operator BHD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BHD value) => value?.ToCurrency();

        public static BHD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BHD Instance = new BHD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BIF".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BIF : Currency<BIF>
    {
        private BIF() : base(0) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BIF" /> class.
        /// </summary>
        public static BIF Unit { get { Warrant.NotNull<BIF>(); return Uniq.Instance; } }

        public static explicit operator BIF(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BIF value) => value?.ToCurrency();

        public static BIF FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BIF Instance = new BIF();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BMD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BMD : Currency<BMD>
    {
        private BMD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BMD" /> class.
        /// </summary>
        public static BMD Unit { get { Warrant.NotNull<BMD>(); return Uniq.Instance; } }

        public static explicit operator BMD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BMD value) => value?.ToCurrency();

        public static BMD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BMD Instance = new BMD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BND".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BND : Currency<BND>
    {
        private BND() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BND" /> class.
        /// </summary>
        public static BND Unit { get { Warrant.NotNull<BND>(); return Uniq.Instance; } }

        public static explicit operator BND(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BND value) => value?.ToCurrency();

        public static BND FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BND Instance = new BND();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BOB".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BOB : Currency<BOB>
    {
        private BOB() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BOB" /> class.
        /// </summary>
        public static BOB Unit { get { Warrant.NotNull<BOB>(); return Uniq.Instance; } }

        public static explicit operator BOB(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BOB value) => value?.ToCurrency();

        public static BOB FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BOB Instance = new BOB();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BOP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BOP : Currency<BOP>
    {
        private BOP() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BOP" /> class.
        /// </summary>
        public static BOP Unit { get { Warrant.NotNull<BOP>(); return Uniq.Instance; } }

        public static explicit operator BOP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BOP value) => value?.ToCurrency();

        public static BOP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BOP Instance = new BOP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BOV".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BOV : Currency<BOV>
    {
        private BOV() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BOV" /> class.
        /// </summary>
        public static BOV Unit { get { Warrant.NotNull<BOV>(); return Uniq.Instance; } }

        public static explicit operator BOV(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BOV value) => value?.ToCurrency();

        public static BOV FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BOV Instance = new BOV();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BRB".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BRB : Currency<BRB>
    {
        private BRB() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BRB" /> class.
        /// </summary>
        public static BRB Unit { get { Warrant.NotNull<BRB>(); return Uniq.Instance; } }

        public static explicit operator BRB(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BRB value) => value?.ToCurrency();

        public static BRB FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BRB Instance = new BRB();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BRC".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BRC : Currency<BRC>
    {
        private BRC() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BRC" /> class.
        /// </summary>
        public static BRC Unit { get { Warrant.NotNull<BRC>(); return Uniq.Instance; } }

        public static explicit operator BRC(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BRC value) => value?.ToCurrency();

        public static BRC FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BRC Instance = new BRC();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BRE".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BRE : Currency<BRE>
    {
        private BRE() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BRE" /> class.
        /// </summary>
        public static BRE Unit { get { Warrant.NotNull<BRE>(); return Uniq.Instance; } }

        public static explicit operator BRE(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BRE value) => value?.ToCurrency();

        public static BRE FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BRE Instance = new BRE();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BRL".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BRL : Currency<BRL>
    {
        private BRL() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BRL" /> class.
        /// </summary>
        public static BRL Unit { get { Warrant.NotNull<BRL>(); return Uniq.Instance; } }

        public static explicit operator BRL(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BRL value) => value?.ToCurrency();

        public static BRL FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BRL Instance = new BRL();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BRN".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BRN : Currency<BRN>
    {
        private BRN() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BRN" /> class.
        /// </summary>
        public static BRN Unit { get { Warrant.NotNull<BRN>(); return Uniq.Instance; } }

        public static explicit operator BRN(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BRN value) => value?.ToCurrency();

        public static BRN FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BRN Instance = new BRN();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BRR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BRR : Currency<BRR>
    {
        private BRR() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BRR" /> class.
        /// </summary>
        public static BRR Unit { get { Warrant.NotNull<BRR>(); return Uniq.Instance; } }

        public static explicit operator BRR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BRR value) => value?.ToCurrency();

        public static BRR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BRR Instance = new BRR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BSD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BSD : Currency<BSD>
    {
        private BSD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BSD" /> class.
        /// </summary>
        public static BSD Unit { get { Warrant.NotNull<BSD>(); return Uniq.Instance; } }

        public static explicit operator BSD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BSD value) => value?.ToCurrency();

        public static BSD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BSD Instance = new BSD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BTN".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BTN : Currency<BTN>
    {
        private BTN() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BTN" /> class.
        /// </summary>
        public static BTN Unit { get { Warrant.NotNull<BTN>(); return Uniq.Instance; } }

        public static explicit operator BTN(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BTN value) => value?.ToCurrency();

        public static BTN FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BTN Instance = new BTN();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BUK".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BUK : Currency<BUK>
    {
        private BUK() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BUK" /> class.
        /// </summary>
        public static BUK Unit { get { Warrant.NotNull<BUK>(); return Uniq.Instance; } }

        public static explicit operator BUK(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BUK value) => value?.ToCurrency();

        public static BUK FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BUK Instance = new BUK();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BWP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BWP : Currency<BWP>
    {
        private BWP() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BWP" /> class.
        /// </summary>
        public static BWP Unit { get { Warrant.NotNull<BWP>(); return Uniq.Instance; } }

        public static explicit operator BWP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BWP value) => value?.ToCurrency();

        public static BWP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BWP Instance = new BWP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BYB".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BYB : Currency<BYB>
    {
        private BYB() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BYB" /> class.
        /// </summary>
        public static BYB Unit { get { Warrant.NotNull<BYB>(); return Uniq.Instance; } }

        public static explicit operator BYB(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BYB value) => value?.ToCurrency();

        public static BYB FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BYB Instance = new BYB();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BYN".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BYN : Currency<BYN>
    {
        private BYN() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BYN" /> class.
        /// </summary>
        public static BYN Unit { get { Warrant.NotNull<BYN>(); return Uniq.Instance; } }

        public static explicit operator BYN(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BYN value) => value?.ToCurrency();

        public static BYN FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BYN Instance = new BYN();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BYR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BYR : Currency<BYR>
    {
        private BYR() : base(0) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BYR" /> class.
        /// </summary>
        public static BYR Unit { get { Warrant.NotNull<BYR>(); return Uniq.Instance; } }

        public static explicit operator BYR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BYR value) => value?.ToCurrency();

        public static BYR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BYR Instance = new BYR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "BZD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class BZD : Currency<BZD>
    {
        private BZD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="BZD" /> class.
        /// </summary>
        public static BZD Unit { get { Warrant.NotNull<BZD>(); return Uniq.Instance; } }

        public static explicit operator BZD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(BZD value) => value?.ToCurrency();

        public static BZD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly BZD Instance = new BZD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "CAD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class CAD : Currency<CAD>
    {
        private CAD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="CAD" /> class.
        /// </summary>
        public static CAD Unit { get { Warrant.NotNull<CAD>(); return Uniq.Instance; } }

        public static explicit operator CAD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(CAD value) => value?.ToCurrency();

        public static CAD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly CAD Instance = new CAD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "CDF".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class CDF : Currency<CDF>
    {
        private CDF() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="CDF" /> class.
        /// </summary>
        public static CDF Unit { get { Warrant.NotNull<CDF>(); return Uniq.Instance; } }

        public static explicit operator CDF(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(CDF value) => value?.ToCurrency();

        public static CDF FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly CDF Instance = new CDF();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "CHC".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class CHC : Currency<CHC>
    {
        private CHC() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="CHC" /> class.
        /// </summary>
        public static CHC Unit { get { Warrant.NotNull<CHC>(); return Uniq.Instance; } }

        public static explicit operator CHC(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(CHC value) => value?.ToCurrency();

        public static CHC FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly CHC Instance = new CHC();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "CHE".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class CHE : Currency<CHE>
    {
        private CHE() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="CHE" /> class.
        /// </summary>
        public static CHE Unit { get { Warrant.NotNull<CHE>(); return Uniq.Instance; } }

        public static explicit operator CHE(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(CHE value) => value?.ToCurrency();

        public static CHE FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly CHE Instance = new CHE();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "CHF".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class CHF : Currency<CHF>
    {
        private CHF() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="CHF" /> class.
        /// </summary>
        public static CHF Unit { get { Warrant.NotNull<CHF>(); return Uniq.Instance; } }

        public static explicit operator CHF(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(CHF value) => value?.ToCurrency();

        public static CHF FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly CHF Instance = new CHF();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "CHW".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class CHW : Currency<CHW>
    {
        private CHW() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="CHW" /> class.
        /// </summary>
        public static CHW Unit { get { Warrant.NotNull<CHW>(); return Uniq.Instance; } }

        public static explicit operator CHW(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(CHW value) => value?.ToCurrency();

        public static CHW FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly CHW Instance = new CHW();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "CLF".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class CLF : Currency<CLF>
    {
        private CLF() : base(4) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="CLF" /> class.
        /// </summary>
        public static CLF Unit { get { Warrant.NotNull<CLF>(); return Uniq.Instance; } }

        public static explicit operator CLF(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(CLF value) => value?.ToCurrency();

        public static CLF FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly CLF Instance = new CLF();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "CLP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class CLP : Currency<CLP>
    {
        private CLP() : base(0) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="CLP" /> class.
        /// </summary>
        public static CLP Unit { get { Warrant.NotNull<CLP>(); return Uniq.Instance; } }

        public static explicit operator CLP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(CLP value) => value?.ToCurrency();

        public static CLP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly CLP Instance = new CLP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "CNX".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class CNX : Currency<CNX>
    {
        private CNX() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="CNX" /> class.
        /// </summary>
        public static CNX Unit { get { Warrant.NotNull<CNX>(); return Uniq.Instance; } }

        public static explicit operator CNX(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(CNX value) => value?.ToCurrency();

        public static CNX FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly CNX Instance = new CNX();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "CNY".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class CNY : Currency<CNY>
    {
        private CNY() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="CNY" /> class.
        /// </summary>
        public static CNY Unit { get { Warrant.NotNull<CNY>(); return Uniq.Instance; } }

        public static explicit operator CNY(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(CNY value) => value?.ToCurrency();

        public static CNY FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly CNY Instance = new CNY();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "COP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class COP : Currency<COP>
    {
        private COP() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="COP" /> class.
        /// </summary>
        public static COP Unit { get { Warrant.NotNull<COP>(); return Uniq.Instance; } }

        public static explicit operator COP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(COP value) => value?.ToCurrency();

        public static COP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly COP Instance = new COP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "COU".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class COU : Currency<COU>
    {
        private COU() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="COU" /> class.
        /// </summary>
        public static COU Unit { get { Warrant.NotNull<COU>(); return Uniq.Instance; } }

        public static explicit operator COU(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(COU value) => value?.ToCurrency();

        public static COU FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly COU Instance = new COU();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "CRC".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class CRC : Currency<CRC>
    {
        private CRC() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="CRC" /> class.
        /// </summary>
        public static CRC Unit { get { Warrant.NotNull<CRC>(); return Uniq.Instance; } }

        public static explicit operator CRC(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(CRC value) => value?.ToCurrency();

        public static CRC FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly CRC Instance = new CRC();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "CSD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class CSD : Currency<CSD>
    {
        private CSD() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="CSD" /> class.
        /// </summary>
        public static CSD Unit { get { Warrant.NotNull<CSD>(); return Uniq.Instance; } }

        public static explicit operator CSD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(CSD value) => value?.ToCurrency();

        public static CSD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly CSD Instance = new CSD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "CSJ".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class CSJ : Currency<CSJ>
    {
        private CSJ() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="CSJ" /> class.
        /// </summary>
        public static CSJ Unit { get { Warrant.NotNull<CSJ>(); return Uniq.Instance; } }

        public static explicit operator CSJ(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(CSJ value) => value?.ToCurrency();

        public static CSJ FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly CSJ Instance = new CSJ();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "CSK".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class CSK : Currency<CSK>
    {
        private CSK() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="CSK" /> class.
        /// </summary>
        public static CSK Unit { get { Warrant.NotNull<CSK>(); return Uniq.Instance; } }

        public static explicit operator CSK(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(CSK value) => value?.ToCurrency();

        public static CSK FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly CSK Instance = new CSK();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "CUC".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class CUC : Currency<CUC>
    {
        private CUC() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="CUC" /> class.
        /// </summary>
        public static CUC Unit { get { Warrant.NotNull<CUC>(); return Uniq.Instance; } }

        public static explicit operator CUC(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(CUC value) => value?.ToCurrency();

        public static CUC FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly CUC Instance = new CUC();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "CUP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class CUP : Currency<CUP>
    {
        private CUP() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="CUP" /> class.
        /// </summary>
        public static CUP Unit { get { Warrant.NotNull<CUP>(); return Uniq.Instance; } }

        public static explicit operator CUP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(CUP value) => value?.ToCurrency();

        public static CUP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly CUP Instance = new CUP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "CVE".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class CVE : Currency<CVE>
    {
        private CVE() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="CVE" /> class.
        /// </summary>
        public static CVE Unit { get { Warrant.NotNull<CVE>(); return Uniq.Instance; } }

        public static explicit operator CVE(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(CVE value) => value?.ToCurrency();

        public static CVE FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly CVE Instance = new CVE();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "CYP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class CYP : Currency<CYP>
    {
        private CYP() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="CYP" /> class.
        /// </summary>
        public static CYP Unit { get { Warrant.NotNull<CYP>(); return Uniq.Instance; } }

        public static explicit operator CYP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(CYP value) => value?.ToCurrency();

        public static CYP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly CYP Instance = new CYP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "CZK".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class CZK : Currency<CZK>
    {
        private CZK() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="CZK" /> class.
        /// </summary>
        public static CZK Unit { get { Warrant.NotNull<CZK>(); return Uniq.Instance; } }

        public static explicit operator CZK(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(CZK value) => value?.ToCurrency();

        public static CZK FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly CZK Instance = new CZK();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "DDM".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class DDM : Currency<DDM>
    {
        private DDM() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="DDM" /> class.
        /// </summary>
        public static DDM Unit { get { Warrant.NotNull<DDM>(); return Uniq.Instance; } }

        public static explicit operator DDM(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(DDM value) => value?.ToCurrency();

        public static DDM FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly DDM Instance = new DDM();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "DEM".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class DEM : Currency<DEM>
    {
        private DEM() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="DEM" /> class.
        /// </summary>
        public static DEM Unit { get { Warrant.NotNull<DEM>(); return Uniq.Instance; } }

        public static explicit operator DEM(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(DEM value) => value?.ToCurrency();

        public static DEM FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly DEM Instance = new DEM();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "DJF".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class DJF : Currency<DJF>
    {
        private DJF() : base(0) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="DJF" /> class.
        /// </summary>
        public static DJF Unit { get { Warrant.NotNull<DJF>(); return Uniq.Instance; } }

        public static explicit operator DJF(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(DJF value) => value?.ToCurrency();

        public static DJF FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly DJF Instance = new DJF();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "DKK".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class DKK : Currency<DKK>
    {
        private DKK() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="DKK" /> class.
        /// </summary>
        public static DKK Unit { get { Warrant.NotNull<DKK>(); return Uniq.Instance; } }

        public static explicit operator DKK(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(DKK value) => value?.ToCurrency();

        public static DKK FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly DKK Instance = new DKK();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "DOP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class DOP : Currency<DOP>
    {
        private DOP() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="DOP" /> class.
        /// </summary>
        public static DOP Unit { get { Warrant.NotNull<DOP>(); return Uniq.Instance; } }

        public static explicit operator DOP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(DOP value) => value?.ToCurrency();

        public static DOP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly DOP Instance = new DOP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "DZD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class DZD : Currency<DZD>
    {
        private DZD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="DZD" /> class.
        /// </summary>
        public static DZD Unit { get { Warrant.NotNull<DZD>(); return Uniq.Instance; } }

        public static explicit operator DZD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(DZD value) => value?.ToCurrency();

        public static DZD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly DZD Instance = new DZD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ECS".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ECS : Currency<ECS>
    {
        private ECS() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ECS" /> class.
        /// </summary>
        public static ECS Unit { get { Warrant.NotNull<ECS>(); return Uniq.Instance; } }

        public static explicit operator ECS(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ECS value) => value?.ToCurrency();

        public static ECS FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ECS Instance = new ECS();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ECV".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ECV : Currency<ECV>
    {
        private ECV() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ECV" /> class.
        /// </summary>
        public static ECV Unit { get { Warrant.NotNull<ECV>(); return Uniq.Instance; } }

        public static explicit operator ECV(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ECV value) => value?.ToCurrency();

        public static ECV FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ECV Instance = new ECV();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "EEK".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class EEK : Currency<EEK>
    {
        private EEK() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="EEK" /> class.
        /// </summary>
        public static EEK Unit { get { Warrant.NotNull<EEK>(); return Uniq.Instance; } }

        public static explicit operator EEK(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(EEK value) => value?.ToCurrency();

        public static EEK FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly EEK Instance = new EEK();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "EGP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class EGP : Currency<EGP>
    {
        private EGP() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="EGP" /> class.
        /// </summary>
        public static EGP Unit { get { Warrant.NotNull<EGP>(); return Uniq.Instance; } }

        public static explicit operator EGP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(EGP value) => value?.ToCurrency();

        public static EGP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly EGP Instance = new EGP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "EQE".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class EQE : Currency<EQE>
    {
        private EQE() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="EQE" /> class.
        /// </summary>
        public static EQE Unit { get { Warrant.NotNull<EQE>(); return Uniq.Instance; } }

        public static explicit operator EQE(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(EQE value) => value?.ToCurrency();

        public static EQE FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly EQE Instance = new EQE();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ERN".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ERN : Currency<ERN>
    {
        private ERN() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ERN" /> class.
        /// </summary>
        public static ERN Unit { get { Warrant.NotNull<ERN>(); return Uniq.Instance; } }

        public static explicit operator ERN(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ERN value) => value?.ToCurrency();

        public static ERN FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ERN Instance = new ERN();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ESA".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ESA : Currency<ESA>
    {
        private ESA() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ESA" /> class.
        /// </summary>
        public static ESA Unit { get { Warrant.NotNull<ESA>(); return Uniq.Instance; } }

        public static explicit operator ESA(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ESA value) => value?.ToCurrency();

        public static ESA FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ESA Instance = new ESA();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ESB".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ESB : Currency<ESB>
    {
        private ESB() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ESB" /> class.
        /// </summary>
        public static ESB Unit { get { Warrant.NotNull<ESB>(); return Uniq.Instance; } }

        public static explicit operator ESB(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ESB value) => value?.ToCurrency();

        public static ESB FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ESB Instance = new ESB();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ESP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ESP : Currency<ESP>
    {
        private ESP() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ESP" /> class.
        /// </summary>
        public static ESP Unit { get { Warrant.NotNull<ESP>(); return Uniq.Instance; } }

        public static explicit operator ESP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ESP value) => value?.ToCurrency();

        public static ESP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ESP Instance = new ESP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ETB".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ETB : Currency<ETB>
    {
        private ETB() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ETB" /> class.
        /// </summary>
        public static ETB Unit { get { Warrant.NotNull<ETB>(); return Uniq.Instance; } }

        public static explicit operator ETB(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ETB value) => value?.ToCurrency();

        public static ETB FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ETB Instance = new ETB();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "EUR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class EUR : Currency<EUR>
    {
        private EUR() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="EUR" /> class.
        /// </summary>
        public static EUR Unit { get { Warrant.NotNull<EUR>(); return Uniq.Instance; } }

        public static explicit operator EUR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(EUR value) => value?.ToCurrency();

        public static EUR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly EUR Instance = new EUR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "FIM".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class FIM : Currency<FIM>
    {
        private FIM() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="FIM" /> class.
        /// </summary>
        public static FIM Unit { get { Warrant.NotNull<FIM>(); return Uniq.Instance; } }

        public static explicit operator FIM(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(FIM value) => value?.ToCurrency();

        public static FIM FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly FIM Instance = new FIM();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "FJD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class FJD : Currency<FJD>
    {
        private FJD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="FJD" /> class.
        /// </summary>
        public static FJD Unit { get { Warrant.NotNull<FJD>(); return Uniq.Instance; } }

        public static explicit operator FJD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(FJD value) => value?.ToCurrency();

        public static FJD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly FJD Instance = new FJD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "FKP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class FKP : Currency<FKP>
    {
        private FKP() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="FKP" /> class.
        /// </summary>
        public static FKP Unit { get { Warrant.NotNull<FKP>(); return Uniq.Instance; } }

        public static explicit operator FKP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(FKP value) => value?.ToCurrency();

        public static FKP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly FKP Instance = new FKP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "FRF".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class FRF : Currency<FRF>
    {
        private FRF() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="FRF" /> class.
        /// </summary>
        public static FRF Unit { get { Warrant.NotNull<FRF>(); return Uniq.Instance; } }

        public static explicit operator FRF(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(FRF value) => value?.ToCurrency();

        public static FRF FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly FRF Instance = new FRF();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "GBP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class GBP : Currency<GBP>
    {
        private GBP() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="GBP" /> class.
        /// </summary>
        public static GBP Unit { get { Warrant.NotNull<GBP>(); return Uniq.Instance; } }

        public static explicit operator GBP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(GBP value) => value?.ToCurrency();

        public static GBP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly GBP Instance = new GBP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "GEK".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class GEK : Currency<GEK>
    {
        private GEK() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="GEK" /> class.
        /// </summary>
        public static GEK Unit { get { Warrant.NotNull<GEK>(); return Uniq.Instance; } }

        public static explicit operator GEK(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(GEK value) => value?.ToCurrency();

        public static GEK FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly GEK Instance = new GEK();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "GEL".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class GEL : Currency<GEL>
    {
        private GEL() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="GEL" /> class.
        /// </summary>
        public static GEL Unit { get { Warrant.NotNull<GEL>(); return Uniq.Instance; } }

        public static explicit operator GEL(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(GEL value) => value?.ToCurrency();

        public static GEL FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly GEL Instance = new GEL();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "GHC".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class GHC : Currency<GHC>
    {
        private GHC() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="GHC" /> class.
        /// </summary>
        public static GHC Unit { get { Warrant.NotNull<GHC>(); return Uniq.Instance; } }

        public static explicit operator GHC(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(GHC value) => value?.ToCurrency();

        public static GHC FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly GHC Instance = new GHC();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "GHP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class GHP : Currency<GHP>
    {
        private GHP() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="GHP" /> class.
        /// </summary>
        public static GHP Unit { get { Warrant.NotNull<GHP>(); return Uniq.Instance; } }

        public static explicit operator GHP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(GHP value) => value?.ToCurrency();

        public static GHP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly GHP Instance = new GHP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "GHS".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class GHS : Currency<GHS>
    {
        private GHS() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="GHS" /> class.
        /// </summary>
        public static GHS Unit { get { Warrant.NotNull<GHS>(); return Uniq.Instance; } }

        public static explicit operator GHS(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(GHS value) => value?.ToCurrency();

        public static GHS FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly GHS Instance = new GHS();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "GIP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class GIP : Currency<GIP>
    {
        private GIP() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="GIP" /> class.
        /// </summary>
        public static GIP Unit { get { Warrant.NotNull<GIP>(); return Uniq.Instance; } }

        public static explicit operator GIP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(GIP value) => value?.ToCurrency();

        public static GIP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly GIP Instance = new GIP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "GMD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class GMD : Currency<GMD>
    {
        private GMD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="GMD" /> class.
        /// </summary>
        public static GMD Unit { get { Warrant.NotNull<GMD>(); return Uniq.Instance; } }

        public static explicit operator GMD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(GMD value) => value?.ToCurrency();

        public static GMD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly GMD Instance = new GMD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "GNE".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class GNE : Currency<GNE>
    {
        private GNE() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="GNE" /> class.
        /// </summary>
        public static GNE Unit { get { Warrant.NotNull<GNE>(); return Uniq.Instance; } }

        public static explicit operator GNE(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(GNE value) => value?.ToCurrency();

        public static GNE FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly GNE Instance = new GNE();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "GNF".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class GNF : Currency<GNF>
    {
        private GNF() : base(0) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="GNF" /> class.
        /// </summary>
        public static GNF Unit { get { Warrant.NotNull<GNF>(); return Uniq.Instance; } }

        public static explicit operator GNF(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(GNF value) => value?.ToCurrency();

        public static GNF FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly GNF Instance = new GNF();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "GNS".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class GNS : Currency<GNS>
    {
        private GNS() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="GNS" /> class.
        /// </summary>
        public static GNS Unit { get { Warrant.NotNull<GNS>(); return Uniq.Instance; } }

        public static explicit operator GNS(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(GNS value) => value?.ToCurrency();

        public static GNS FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly GNS Instance = new GNS();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "GQE".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class GQE : Currency<GQE>
    {
        private GQE() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="GQE" /> class.
        /// </summary>
        public static GQE Unit { get { Warrant.NotNull<GQE>(); return Uniq.Instance; } }

        public static explicit operator GQE(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(GQE value) => value?.ToCurrency();

        public static GQE FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly GQE Instance = new GQE();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "GRD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class GRD : Currency<GRD>
    {
        private GRD() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="GRD" /> class.
        /// </summary>
        public static GRD Unit { get { Warrant.NotNull<GRD>(); return Uniq.Instance; } }

        public static explicit operator GRD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(GRD value) => value?.ToCurrency();

        public static GRD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly GRD Instance = new GRD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "GTQ".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class GTQ : Currency<GTQ>
    {
        private GTQ() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="GTQ" /> class.
        /// </summary>
        public static GTQ Unit { get { Warrant.NotNull<GTQ>(); return Uniq.Instance; } }

        public static explicit operator GTQ(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(GTQ value) => value?.ToCurrency();

        public static GTQ FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly GTQ Instance = new GTQ();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "GWE".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class GWE : Currency<GWE>
    {
        private GWE() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="GWE" /> class.
        /// </summary>
        public static GWE Unit { get { Warrant.NotNull<GWE>(); return Uniq.Instance; } }

        public static explicit operator GWE(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(GWE value) => value?.ToCurrency();

        public static GWE FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly GWE Instance = new GWE();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "GWP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class GWP : Currency<GWP>
    {
        private GWP() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="GWP" /> class.
        /// </summary>
        public static GWP Unit { get { Warrant.NotNull<GWP>(); return Uniq.Instance; } }

        public static explicit operator GWP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(GWP value) => value?.ToCurrency();

        public static GWP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly GWP Instance = new GWP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "GYD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class GYD : Currency<GYD>
    {
        private GYD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="GYD" /> class.
        /// </summary>
        public static GYD Unit { get { Warrant.NotNull<GYD>(); return Uniq.Instance; } }

        public static explicit operator GYD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(GYD value) => value?.ToCurrency();

        public static GYD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly GYD Instance = new GYD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "HKD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class HKD : Currency<HKD>
    {
        private HKD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="HKD" /> class.
        /// </summary>
        public static HKD Unit { get { Warrant.NotNull<HKD>(); return Uniq.Instance; } }

        public static explicit operator HKD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(HKD value) => value?.ToCurrency();

        public static HKD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly HKD Instance = new HKD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "HNL".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class HNL : Currency<HNL>
    {
        private HNL() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="HNL" /> class.
        /// </summary>
        public static HNL Unit { get { Warrant.NotNull<HNL>(); return Uniq.Instance; } }

        public static explicit operator HNL(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(HNL value) => value?.ToCurrency();

        public static HNL FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly HNL Instance = new HNL();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "HRD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class HRD : Currency<HRD>
    {
        private HRD() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="HRD" /> class.
        /// </summary>
        public static HRD Unit { get { Warrant.NotNull<HRD>(); return Uniq.Instance; } }

        public static explicit operator HRD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(HRD value) => value?.ToCurrency();

        public static HRD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly HRD Instance = new HRD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "HRK".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class HRK : Currency<HRK>
    {
        private HRK() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="HRK" /> class.
        /// </summary>
        public static HRK Unit { get { Warrant.NotNull<HRK>(); return Uniq.Instance; } }

        public static explicit operator HRK(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(HRK value) => value?.ToCurrency();

        public static HRK FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly HRK Instance = new HRK();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "HTG".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class HTG : Currency<HTG>
    {
        private HTG() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="HTG" /> class.
        /// </summary>
        public static HTG Unit { get { Warrant.NotNull<HTG>(); return Uniq.Instance; } }

        public static explicit operator HTG(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(HTG value) => value?.ToCurrency();

        public static HTG FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly HTG Instance = new HTG();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "HUF".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class HUF : Currency<HUF>
    {
        private HUF() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="HUF" /> class.
        /// </summary>
        public static HUF Unit { get { Warrant.NotNull<HUF>(); return Uniq.Instance; } }

        public static explicit operator HUF(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(HUF value) => value?.ToCurrency();

        public static HUF FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly HUF Instance = new HUF();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "IDR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class IDR : Currency<IDR>
    {
        private IDR() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="IDR" /> class.
        /// </summary>
        public static IDR Unit { get { Warrant.NotNull<IDR>(); return Uniq.Instance; } }

        public static explicit operator IDR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(IDR value) => value?.ToCurrency();

        public static IDR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly IDR Instance = new IDR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "IEP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class IEP : Currency<IEP>
    {
        private IEP() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="IEP" /> class.
        /// </summary>
        public static IEP Unit { get { Warrant.NotNull<IEP>(); return Uniq.Instance; } }

        public static explicit operator IEP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(IEP value) => value?.ToCurrency();

        public static IEP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly IEP Instance = new IEP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ILP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ILP : Currency<ILP>
    {
        private ILP() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ILP" /> class.
        /// </summary>
        public static ILP Unit { get { Warrant.NotNull<ILP>(); return Uniq.Instance; } }

        public static explicit operator ILP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ILP value) => value?.ToCurrency();

        public static ILP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ILP Instance = new ILP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ILR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ILR : Currency<ILR>
    {
        private ILR() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ILR" /> class.
        /// </summary>
        public static ILR Unit { get { Warrant.NotNull<ILR>(); return Uniq.Instance; } }

        public static explicit operator ILR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ILR value) => value?.ToCurrency();

        public static ILR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ILR Instance = new ILR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ILS".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ILS : Currency<ILS>
    {
        private ILS() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ILS" /> class.
        /// </summary>
        public static ILS Unit { get { Warrant.NotNull<ILS>(); return Uniq.Instance; } }

        public static explicit operator ILS(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ILS value) => value?.ToCurrency();

        public static ILS FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ILS Instance = new ILS();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "INR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class INR : Currency<INR>
    {
        private INR() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="INR" /> class.
        /// </summary>
        public static INR Unit { get { Warrant.NotNull<INR>(); return Uniq.Instance; } }

        public static explicit operator INR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(INR value) => value?.ToCurrency();

        public static INR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly INR Instance = new INR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "IQD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class IQD : Currency<IQD>
    {
        private IQD() : base(3) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="IQD" /> class.
        /// </summary>
        public static IQD Unit { get { Warrant.NotNull<IQD>(); return Uniq.Instance; } }

        public static explicit operator IQD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(IQD value) => value?.ToCurrency();

        public static IQD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly IQD Instance = new IQD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "IRR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class IRR : Currency<IRR>
    {
        private IRR() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="IRR" /> class.
        /// </summary>
        public static IRR Unit { get { Warrant.NotNull<IRR>(); return Uniq.Instance; } }

        public static explicit operator IRR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(IRR value) => value?.ToCurrency();

        public static IRR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly IRR Instance = new IRR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ISJ".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ISJ : Currency<ISJ>
    {
        private ISJ() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ISJ" /> class.
        /// </summary>
        public static ISJ Unit { get { Warrant.NotNull<ISJ>(); return Uniq.Instance; } }

        public static explicit operator ISJ(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ISJ value) => value?.ToCurrency();

        public static ISJ FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ISJ Instance = new ISJ();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ISK".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ISK : Currency<ISK>
    {
        private ISK() : base(0) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ISK" /> class.
        /// </summary>
        public static ISK Unit { get { Warrant.NotNull<ISK>(); return Uniq.Instance; } }

        public static explicit operator ISK(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ISK value) => value?.ToCurrency();

        public static ISK FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ISK Instance = new ISK();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ITL".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ITL : Currency<ITL>
    {
        private ITL() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ITL" /> class.
        /// </summary>
        public static ITL Unit { get { Warrant.NotNull<ITL>(); return Uniq.Instance; } }

        public static explicit operator ITL(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ITL value) => value?.ToCurrency();

        public static ITL FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ITL Instance = new ITL();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "JMD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class JMD : Currency<JMD>
    {
        private JMD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="JMD" /> class.
        /// </summary>
        public static JMD Unit { get { Warrant.NotNull<JMD>(); return Uniq.Instance; } }

        public static explicit operator JMD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(JMD value) => value?.ToCurrency();

        public static JMD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly JMD Instance = new JMD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "JOD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class JOD : Currency<JOD>
    {
        private JOD() : base(3) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="JOD" /> class.
        /// </summary>
        public static JOD Unit { get { Warrant.NotNull<JOD>(); return Uniq.Instance; } }

        public static explicit operator JOD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(JOD value) => value?.ToCurrency();

        public static JOD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly JOD Instance = new JOD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "JPY".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class JPY : Currency<JPY>
    {
        private JPY() : base(0) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="JPY" /> class.
        /// </summary>
        public static JPY Unit { get { Warrant.NotNull<JPY>(); return Uniq.Instance; } }

        public static explicit operator JPY(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(JPY value) => value?.ToCurrency();

        public static JPY FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly JPY Instance = new JPY();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "KES".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class KES : Currency<KES>
    {
        private KES() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="KES" /> class.
        /// </summary>
        public static KES Unit { get { Warrant.NotNull<KES>(); return Uniq.Instance; } }

        public static explicit operator KES(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(KES value) => value?.ToCurrency();

        public static KES FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly KES Instance = new KES();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "KGS".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class KGS : Currency<KGS>
    {
        private KGS() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="KGS" /> class.
        /// </summary>
        public static KGS Unit { get { Warrant.NotNull<KGS>(); return Uniq.Instance; } }

        public static explicit operator KGS(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(KGS value) => value?.ToCurrency();

        public static KGS FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly KGS Instance = new KGS();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "KHR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class KHR : Currency<KHR>
    {
        private KHR() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="KHR" /> class.
        /// </summary>
        public static KHR Unit { get { Warrant.NotNull<KHR>(); return Uniq.Instance; } }

        public static explicit operator KHR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(KHR value) => value?.ToCurrency();

        public static KHR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly KHR Instance = new KHR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "KMF".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class KMF : Currency<KMF>
    {
        private KMF() : base(0) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="KMF" /> class.
        /// </summary>
        public static KMF Unit { get { Warrant.NotNull<KMF>(); return Uniq.Instance; } }

        public static explicit operator KMF(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(KMF value) => value?.ToCurrency();

        public static KMF FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly KMF Instance = new KMF();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "KPW".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class KPW : Currency<KPW>
    {
        private KPW() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="KPW" /> class.
        /// </summary>
        public static KPW Unit { get { Warrant.NotNull<KPW>(); return Uniq.Instance; } }

        public static explicit operator KPW(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(KPW value) => value?.ToCurrency();

        public static KPW FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly KPW Instance = new KPW();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "KRW".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class KRW : Currency<KRW>
    {
        private KRW() : base(0) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="KRW" /> class.
        /// </summary>
        public static KRW Unit { get { Warrant.NotNull<KRW>(); return Uniq.Instance; } }

        public static explicit operator KRW(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(KRW value) => value?.ToCurrency();

        public static KRW FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly KRW Instance = new KRW();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "KWD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class KWD : Currency<KWD>
    {
        private KWD() : base(3) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="KWD" /> class.
        /// </summary>
        public static KWD Unit { get { Warrant.NotNull<KWD>(); return Uniq.Instance; } }

        public static explicit operator KWD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(KWD value) => value?.ToCurrency();

        public static KWD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly KWD Instance = new KWD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "KYD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class KYD : Currency<KYD>
    {
        private KYD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="KYD" /> class.
        /// </summary>
        public static KYD Unit { get { Warrant.NotNull<KYD>(); return Uniq.Instance; } }

        public static explicit operator KYD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(KYD value) => value?.ToCurrency();

        public static KYD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly KYD Instance = new KYD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "KZT".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class KZT : Currency<KZT>
    {
        private KZT() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="KZT" /> class.
        /// </summary>
        public static KZT Unit { get { Warrant.NotNull<KZT>(); return Uniq.Instance; } }

        public static explicit operator KZT(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(KZT value) => value?.ToCurrency();

        public static KZT FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly KZT Instance = new KZT();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "LAJ".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class LAJ : Currency<LAJ>
    {
        private LAJ() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="LAJ" /> class.
        /// </summary>
        public static LAJ Unit { get { Warrant.NotNull<LAJ>(); return Uniq.Instance; } }

        public static explicit operator LAJ(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(LAJ value) => value?.ToCurrency();

        public static LAJ FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly LAJ Instance = new LAJ();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "LAK".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class LAK : Currency<LAK>
    {
        private LAK() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="LAK" /> class.
        /// </summary>
        public static LAK Unit { get { Warrant.NotNull<LAK>(); return Uniq.Instance; } }

        public static explicit operator LAK(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(LAK value) => value?.ToCurrency();

        public static LAK FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly LAK Instance = new LAK();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "LBP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class LBP : Currency<LBP>
    {
        private LBP() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="LBP" /> class.
        /// </summary>
        public static LBP Unit { get { Warrant.NotNull<LBP>(); return Uniq.Instance; } }

        public static explicit operator LBP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(LBP value) => value?.ToCurrency();

        public static LBP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly LBP Instance = new LBP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "LKR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class LKR : Currency<LKR>
    {
        private LKR() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="LKR" /> class.
        /// </summary>
        public static LKR Unit { get { Warrant.NotNull<LKR>(); return Uniq.Instance; } }

        public static explicit operator LKR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(LKR value) => value?.ToCurrency();

        public static LKR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly LKR Instance = new LKR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "LRD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class LRD : Currency<LRD>
    {
        private LRD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="LRD" /> class.
        /// </summary>
        public static LRD Unit { get { Warrant.NotNull<LRD>(); return Uniq.Instance; } }

        public static explicit operator LRD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(LRD value) => value?.ToCurrency();

        public static LRD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly LRD Instance = new LRD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "LSL".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class LSL : Currency<LSL>
    {
        private LSL() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="LSL" /> class.
        /// </summary>
        public static LSL Unit { get { Warrant.NotNull<LSL>(); return Uniq.Instance; } }

        public static explicit operator LSL(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(LSL value) => value?.ToCurrency();

        public static LSL FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly LSL Instance = new LSL();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "LSM".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class LSM : Currency<LSM>
    {
        private LSM() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="LSM" /> class.
        /// </summary>
        public static LSM Unit { get { Warrant.NotNull<LSM>(); return Uniq.Instance; } }

        public static explicit operator LSM(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(LSM value) => value?.ToCurrency();

        public static LSM FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly LSM Instance = new LSM();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "LTL".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class LTL : Currency<LTL>
    {
        private LTL() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="LTL" /> class.
        /// </summary>
        public static LTL Unit { get { Warrant.NotNull<LTL>(); return Uniq.Instance; } }

        public static explicit operator LTL(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(LTL value) => value?.ToCurrency();

        public static LTL FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly LTL Instance = new LTL();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "LTT".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class LTT : Currency<LTT>
    {
        private LTT() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="LTT" /> class.
        /// </summary>
        public static LTT Unit { get { Warrant.NotNull<LTT>(); return Uniq.Instance; } }

        public static explicit operator LTT(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(LTT value) => value?.ToCurrency();

        public static LTT FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly LTT Instance = new LTT();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "LUC".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class LUC : Currency<LUC>
    {
        private LUC() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="LUC" /> class.
        /// </summary>
        public static LUC Unit { get { Warrant.NotNull<LUC>(); return Uniq.Instance; } }

        public static explicit operator LUC(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(LUC value) => value?.ToCurrency();

        public static LUC FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly LUC Instance = new LUC();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "LUF".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class LUF : Currency<LUF>
    {
        private LUF() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="LUF" /> class.
        /// </summary>
        public static LUF Unit { get { Warrant.NotNull<LUF>(); return Uniq.Instance; } }

        public static explicit operator LUF(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(LUF value) => value?.ToCurrency();

        public static LUF FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly LUF Instance = new LUF();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "LUL".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class LUL : Currency<LUL>
    {
        private LUL() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="LUL" /> class.
        /// </summary>
        public static LUL Unit { get { Warrant.NotNull<LUL>(); return Uniq.Instance; } }

        public static explicit operator LUL(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(LUL value) => value?.ToCurrency();

        public static LUL FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly LUL Instance = new LUL();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "LVL".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class LVL : Currency<LVL>
    {
        private LVL() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="LVL" /> class.
        /// </summary>
        public static LVL Unit { get { Warrant.NotNull<LVL>(); return Uniq.Instance; } }

        public static explicit operator LVL(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(LVL value) => value?.ToCurrency();

        public static LVL FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly LVL Instance = new LVL();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "LVR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class LVR : Currency<LVR>
    {
        private LVR() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="LVR" /> class.
        /// </summary>
        public static LVR Unit { get { Warrant.NotNull<LVR>(); return Uniq.Instance; } }

        public static explicit operator LVR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(LVR value) => value?.ToCurrency();

        public static LVR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly LVR Instance = new LVR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "LYD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class LYD : Currency<LYD>
    {
        private LYD() : base(3) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="LYD" /> class.
        /// </summary>
        public static LYD Unit { get { Warrant.NotNull<LYD>(); return Uniq.Instance; } }

        public static explicit operator LYD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(LYD value) => value?.ToCurrency();

        public static LYD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly LYD Instance = new LYD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MAD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MAD : Currency<MAD>
    {
        private MAD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MAD" /> class.
        /// </summary>
        public static MAD Unit { get { Warrant.NotNull<MAD>(); return Uniq.Instance; } }

        public static explicit operator MAD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MAD value) => value?.ToCurrency();

        public static MAD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MAD Instance = new MAD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MAF".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MAF : Currency<MAF>
    {
        private MAF() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MAF" /> class.
        /// </summary>
        public static MAF Unit { get { Warrant.NotNull<MAF>(); return Uniq.Instance; } }

        public static explicit operator MAF(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MAF value) => value?.ToCurrency();

        public static MAF FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MAF Instance = new MAF();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MDL".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MDL : Currency<MDL>
    {
        private MDL() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MDL" /> class.
        /// </summary>
        public static MDL Unit { get { Warrant.NotNull<MDL>(); return Uniq.Instance; } }

        public static explicit operator MDL(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MDL value) => value?.ToCurrency();

        public static MDL FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MDL Instance = new MDL();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MGA".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MGA : Currency<MGA>
    {
        private MGA() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MGA" /> class.
        /// </summary>
        public static MGA Unit { get { Warrant.NotNull<MGA>(); return Uniq.Instance; } }

        public static explicit operator MGA(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MGA value) => value?.ToCurrency();

        public static MGA FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MGA Instance = new MGA();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MGF".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MGF : Currency<MGF>
    {
        private MGF() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MGF" /> class.
        /// </summary>
        public static MGF Unit { get { Warrant.NotNull<MGF>(); return Uniq.Instance; } }

        public static explicit operator MGF(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MGF value) => value?.ToCurrency();

        public static MGF FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MGF Instance = new MGF();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MKD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MKD : Currency<MKD>
    {
        private MKD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MKD" /> class.
        /// </summary>
        public static MKD Unit { get { Warrant.NotNull<MKD>(); return Uniq.Instance; } }

        public static explicit operator MKD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MKD value) => value?.ToCurrency();

        public static MKD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MKD Instance = new MKD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MLF".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MLF : Currency<MLF>
    {
        private MLF() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MLF" /> class.
        /// </summary>
        public static MLF Unit { get { Warrant.NotNull<MLF>(); return Uniq.Instance; } }

        public static explicit operator MLF(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MLF value) => value?.ToCurrency();

        public static MLF FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MLF Instance = new MLF();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MMK".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MMK : Currency<MMK>
    {
        private MMK() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MMK" /> class.
        /// </summary>
        public static MMK Unit { get { Warrant.NotNull<MMK>(); return Uniq.Instance; } }

        public static explicit operator MMK(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MMK value) => value?.ToCurrency();

        public static MMK FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MMK Instance = new MMK();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MNT".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MNT : Currency<MNT>
    {
        private MNT() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MNT" /> class.
        /// </summary>
        public static MNT Unit { get { Warrant.NotNull<MNT>(); return Uniq.Instance; } }

        public static explicit operator MNT(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MNT value) => value?.ToCurrency();

        public static MNT FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MNT Instance = new MNT();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MOP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MOP : Currency<MOP>
    {
        private MOP() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MOP" /> class.
        /// </summary>
        public static MOP Unit { get { Warrant.NotNull<MOP>(); return Uniq.Instance; } }

        public static explicit operator MOP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MOP value) => value?.ToCurrency();

        public static MOP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MOP Instance = new MOP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MRO".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MRO : Currency<MRO>
    {
        private MRO() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MRO" /> class.
        /// </summary>
        public static MRO Unit { get { Warrant.NotNull<MRO>(); return Uniq.Instance; } }

        public static explicit operator MRO(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MRO value) => value?.ToCurrency();

        public static MRO FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MRO Instance = new MRO();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MTL".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MTL : Currency<MTL>
    {
        private MTL() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MTL" /> class.
        /// </summary>
        public static MTL Unit { get { Warrant.NotNull<MTL>(); return Uniq.Instance; } }

        public static explicit operator MTL(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MTL value) => value?.ToCurrency();

        public static MTL FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MTL Instance = new MTL();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MTP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MTP : Currency<MTP>
    {
        private MTP() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MTP" /> class.
        /// </summary>
        public static MTP Unit { get { Warrant.NotNull<MTP>(); return Uniq.Instance; } }

        public static explicit operator MTP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MTP value) => value?.ToCurrency();

        public static MTP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MTP Instance = new MTP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MUR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MUR : Currency<MUR>
    {
        private MUR() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MUR" /> class.
        /// </summary>
        public static MUR Unit { get { Warrant.NotNull<MUR>(); return Uniq.Instance; } }

        public static explicit operator MUR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MUR value) => value?.ToCurrency();

        public static MUR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MUR Instance = new MUR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MVQ".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MVQ : Currency<MVQ>
    {
        private MVQ() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MVQ" /> class.
        /// </summary>
        public static MVQ Unit { get { Warrant.NotNull<MVQ>(); return Uniq.Instance; } }

        public static explicit operator MVQ(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MVQ value) => value?.ToCurrency();

        public static MVQ FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MVQ Instance = new MVQ();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MVR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MVR : Currency<MVR>
    {
        private MVR() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MVR" /> class.
        /// </summary>
        public static MVR Unit { get { Warrant.NotNull<MVR>(); return Uniq.Instance; } }

        public static explicit operator MVR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MVR value) => value?.ToCurrency();

        public static MVR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MVR Instance = new MVR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MWK".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MWK : Currency<MWK>
    {
        private MWK() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MWK" /> class.
        /// </summary>
        public static MWK Unit { get { Warrant.NotNull<MWK>(); return Uniq.Instance; } }

        public static explicit operator MWK(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MWK value) => value?.ToCurrency();

        public static MWK FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MWK Instance = new MWK();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MXN".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MXN : Currency<MXN>
    {
        private MXN() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MXN" /> class.
        /// </summary>
        public static MXN Unit { get { Warrant.NotNull<MXN>(); return Uniq.Instance; } }

        public static explicit operator MXN(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MXN value) => value?.ToCurrency();

        public static MXN FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MXN Instance = new MXN();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MXP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MXP : Currency<MXP>
    {
        private MXP() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MXP" /> class.
        /// </summary>
        public static MXP Unit { get { Warrant.NotNull<MXP>(); return Uniq.Instance; } }

        public static explicit operator MXP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MXP value) => value?.ToCurrency();

        public static MXP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MXP Instance = new MXP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MXV".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MXV : Currency<MXV>
    {
        private MXV() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MXV" /> class.
        /// </summary>
        public static MXV Unit { get { Warrant.NotNull<MXV>(); return Uniq.Instance; } }

        public static explicit operator MXV(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MXV value) => value?.ToCurrency();

        public static MXV FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MXV Instance = new MXV();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MYR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MYR : Currency<MYR>
    {
        private MYR() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MYR" /> class.
        /// </summary>
        public static MYR Unit { get { Warrant.NotNull<MYR>(); return Uniq.Instance; } }

        public static explicit operator MYR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MYR value) => value?.ToCurrency();

        public static MYR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MYR Instance = new MYR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MZE".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MZE : Currency<MZE>
    {
        private MZE() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MZE" /> class.
        /// </summary>
        public static MZE Unit { get { Warrant.NotNull<MZE>(); return Uniq.Instance; } }

        public static explicit operator MZE(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MZE value) => value?.ToCurrency();

        public static MZE FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MZE Instance = new MZE();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MZM".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MZM : Currency<MZM>
    {
        private MZM() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MZM" /> class.
        /// </summary>
        public static MZM Unit { get { Warrant.NotNull<MZM>(); return Uniq.Instance; } }

        public static explicit operator MZM(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MZM value) => value?.ToCurrency();

        public static MZM FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MZM Instance = new MZM();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "MZN".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class MZN : Currency<MZN>
    {
        private MZN() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="MZN" /> class.
        /// </summary>
        public static MZN Unit { get { Warrant.NotNull<MZN>(); return Uniq.Instance; } }

        public static explicit operator MZN(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(MZN value) => value?.ToCurrency();

        public static MZN FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly MZN Instance = new MZN();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "NAD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class NAD : Currency<NAD>
    {
        private NAD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="NAD" /> class.
        /// </summary>
        public static NAD Unit { get { Warrant.NotNull<NAD>(); return Uniq.Instance; } }

        public static explicit operator NAD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(NAD value) => value?.ToCurrency();

        public static NAD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly NAD Instance = new NAD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "NGN".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class NGN : Currency<NGN>
    {
        private NGN() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="NGN" /> class.
        /// </summary>
        public static NGN Unit { get { Warrant.NotNull<NGN>(); return Uniq.Instance; } }

        public static explicit operator NGN(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(NGN value) => value?.ToCurrency();

        public static NGN FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly NGN Instance = new NGN();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "NIC".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class NIC : Currency<NIC>
    {
        private NIC() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="NIC" /> class.
        /// </summary>
        public static NIC Unit { get { Warrant.NotNull<NIC>(); return Uniq.Instance; } }

        public static explicit operator NIC(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(NIC value) => value?.ToCurrency();

        public static NIC FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly NIC Instance = new NIC();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "NIO".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class NIO : Currency<NIO>
    {
        private NIO() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="NIO" /> class.
        /// </summary>
        public static NIO Unit { get { Warrant.NotNull<NIO>(); return Uniq.Instance; } }

        public static explicit operator NIO(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(NIO value) => value?.ToCurrency();

        public static NIO FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly NIO Instance = new NIO();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "NLG".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class NLG : Currency<NLG>
    {
        private NLG() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="NLG" /> class.
        /// </summary>
        public static NLG Unit { get { Warrant.NotNull<NLG>(); return Uniq.Instance; } }

        public static explicit operator NLG(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(NLG value) => value?.ToCurrency();

        public static NLG FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly NLG Instance = new NLG();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "NOK".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class NOK : Currency<NOK>
    {
        private NOK() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="NOK" /> class.
        /// </summary>
        public static NOK Unit { get { Warrant.NotNull<NOK>(); return Uniq.Instance; } }

        public static explicit operator NOK(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(NOK value) => value?.ToCurrency();

        public static NOK FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly NOK Instance = new NOK();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "NPR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class NPR : Currency<NPR>
    {
        private NPR() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="NPR" /> class.
        /// </summary>
        public static NPR Unit { get { Warrant.NotNull<NPR>(); return Uniq.Instance; } }

        public static explicit operator NPR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(NPR value) => value?.ToCurrency();

        public static NPR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly NPR Instance = new NPR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "NZD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class NZD : Currency<NZD>
    {
        private NZD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="NZD" /> class.
        /// </summary>
        public static NZD Unit { get { Warrant.NotNull<NZD>(); return Uniq.Instance; } }

        public static explicit operator NZD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(NZD value) => value?.ToCurrency();

        public static NZD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly NZD Instance = new NZD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "OMR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class OMR : Currency<OMR>
    {
        private OMR() : base(3) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="OMR" /> class.
        /// </summary>
        public static OMR Unit { get { Warrant.NotNull<OMR>(); return Uniq.Instance; } }

        public static explicit operator OMR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(OMR value) => value?.ToCurrency();

        public static OMR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly OMR Instance = new OMR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "PAB".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class PAB : Currency<PAB>
    {
        private PAB() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="PAB" /> class.
        /// </summary>
        public static PAB Unit { get { Warrant.NotNull<PAB>(); return Uniq.Instance; } }

        public static explicit operator PAB(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(PAB value) => value?.ToCurrency();

        public static PAB FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly PAB Instance = new PAB();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "PEH".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class PEH : Currency<PEH>
    {
        private PEH() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="PEH" /> class.
        /// </summary>
        public static PEH Unit { get { Warrant.NotNull<PEH>(); return Uniq.Instance; } }

        public static explicit operator PEH(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(PEH value) => value?.ToCurrency();

        public static PEH FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly PEH Instance = new PEH();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "PEI".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class PEI : Currency<PEI>
    {
        private PEI() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="PEI" /> class.
        /// </summary>
        public static PEI Unit { get { Warrant.NotNull<PEI>(); return Uniq.Instance; } }

        public static explicit operator PEI(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(PEI value) => value?.ToCurrency();

        public static PEI FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly PEI Instance = new PEI();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "PEN".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class PEN : Currency<PEN>
    {
        private PEN() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="PEN" /> class.
        /// </summary>
        public static PEN Unit { get { Warrant.NotNull<PEN>(); return Uniq.Instance; } }

        public static explicit operator PEN(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(PEN value) => value?.ToCurrency();

        public static PEN FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly PEN Instance = new PEN();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "PES".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class PES : Currency<PES>
    {
        private PES() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="PES" /> class.
        /// </summary>
        public static PES Unit { get { Warrant.NotNull<PES>(); return Uniq.Instance; } }

        public static explicit operator PES(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(PES value) => value?.ToCurrency();

        public static PES FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly PES Instance = new PES();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "PGK".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class PGK : Currency<PGK>
    {
        private PGK() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="PGK" /> class.
        /// </summary>
        public static PGK Unit { get { Warrant.NotNull<PGK>(); return Uniq.Instance; } }

        public static explicit operator PGK(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(PGK value) => value?.ToCurrency();

        public static PGK FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly PGK Instance = new PGK();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "PHP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class PHP : Currency<PHP>
    {
        private PHP() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="PHP" /> class.
        /// </summary>
        public static PHP Unit { get { Warrant.NotNull<PHP>(); return Uniq.Instance; } }

        public static explicit operator PHP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(PHP value) => value?.ToCurrency();

        public static PHP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly PHP Instance = new PHP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "PKR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class PKR : Currency<PKR>
    {
        private PKR() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="PKR" /> class.
        /// </summary>
        public static PKR Unit { get { Warrant.NotNull<PKR>(); return Uniq.Instance; } }

        public static explicit operator PKR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(PKR value) => value?.ToCurrency();

        public static PKR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly PKR Instance = new PKR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "PLN".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class PLN : Currency<PLN>
    {
        private PLN() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="PLN" /> class.
        /// </summary>
        public static PLN Unit { get { Warrant.NotNull<PLN>(); return Uniq.Instance; } }

        public static explicit operator PLN(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(PLN value) => value?.ToCurrency();

        public static PLN FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly PLN Instance = new PLN();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "PLZ".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class PLZ : Currency<PLZ>
    {
        private PLZ() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="PLZ" /> class.
        /// </summary>
        public static PLZ Unit { get { Warrant.NotNull<PLZ>(); return Uniq.Instance; } }

        public static explicit operator PLZ(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(PLZ value) => value?.ToCurrency();

        public static PLZ FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly PLZ Instance = new PLZ();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "PTE".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class PTE : Currency<PTE>
    {
        private PTE() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="PTE" /> class.
        /// </summary>
        public static PTE Unit { get { Warrant.NotNull<PTE>(); return Uniq.Instance; } }

        public static explicit operator PTE(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(PTE value) => value?.ToCurrency();

        public static PTE FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly PTE Instance = new PTE();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "PYG".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class PYG : Currency<PYG>
    {
        private PYG() : base(0) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="PYG" /> class.
        /// </summary>
        public static PYG Unit { get { Warrant.NotNull<PYG>(); return Uniq.Instance; } }

        public static explicit operator PYG(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(PYG value) => value?.ToCurrency();

        public static PYG FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly PYG Instance = new PYG();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "QAR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class QAR : Currency<QAR>
    {
        private QAR() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="QAR" /> class.
        /// </summary>
        public static QAR Unit { get { Warrant.NotNull<QAR>(); return Uniq.Instance; } }

        public static explicit operator QAR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(QAR value) => value?.ToCurrency();

        public static QAR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly QAR Instance = new QAR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "RHD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class RHD : Currency<RHD>
    {
        private RHD() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="RHD" /> class.
        /// </summary>
        public static RHD Unit { get { Warrant.NotNull<RHD>(); return Uniq.Instance; } }

        public static explicit operator RHD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(RHD value) => value?.ToCurrency();

        public static RHD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly RHD Instance = new RHD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ROK".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ROK : Currency<ROK>
    {
        private ROK() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ROK" /> class.
        /// </summary>
        public static ROK Unit { get { Warrant.NotNull<ROK>(); return Uniq.Instance; } }

        public static explicit operator ROK(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ROK value) => value?.ToCurrency();

        public static ROK FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ROK Instance = new ROK();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ROL".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ROL : Currency<ROL>
    {
        private ROL() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ROL" /> class.
        /// </summary>
        public static ROL Unit { get { Warrant.NotNull<ROL>(); return Uniq.Instance; } }

        public static explicit operator ROL(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ROL value) => value?.ToCurrency();

        public static ROL FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ROL Instance = new ROL();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "RON".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class RON : Currency<RON>
    {
        private RON() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="RON" /> class.
        /// </summary>
        public static RON Unit { get { Warrant.NotNull<RON>(); return Uniq.Instance; } }

        public static explicit operator RON(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(RON value) => value?.ToCurrency();

        public static RON FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly RON Instance = new RON();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "RSD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class RSD : Currency<RSD>
    {
        private RSD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="RSD" /> class.
        /// </summary>
        public static RSD Unit { get { Warrant.NotNull<RSD>(); return Uniq.Instance; } }

        public static explicit operator RSD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(RSD value) => value?.ToCurrency();

        public static RSD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly RSD Instance = new RSD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "RUB".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class RUB : Currency<RUB>
    {
        private RUB() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="RUB" /> class.
        /// </summary>
        public static RUB Unit { get { Warrant.NotNull<RUB>(); return Uniq.Instance; } }

        public static explicit operator RUB(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(RUB value) => value?.ToCurrency();

        public static RUB FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly RUB Instance = new RUB();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "RUR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class RUR : Currency<RUR>
    {
        private RUR() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="RUR" /> class.
        /// </summary>
        public static RUR Unit { get { Warrant.NotNull<RUR>(); return Uniq.Instance; } }

        public static explicit operator RUR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(RUR value) => value?.ToCurrency();

        public static RUR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly RUR Instance = new RUR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "RWF".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class RWF : Currency<RWF>
    {
        private RWF() : base(0) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="RWF" /> class.
        /// </summary>
        public static RWF Unit { get { Warrant.NotNull<RWF>(); return Uniq.Instance; } }

        public static explicit operator RWF(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(RWF value) => value?.ToCurrency();

        public static RWF FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly RWF Instance = new RWF();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "SAR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class SAR : Currency<SAR>
    {
        private SAR() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="SAR" /> class.
        /// </summary>
        public static SAR Unit { get { Warrant.NotNull<SAR>(); return Uniq.Instance; } }

        public static explicit operator SAR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(SAR value) => value?.ToCurrency();

        public static SAR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly SAR Instance = new SAR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "SBD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class SBD : Currency<SBD>
    {
        private SBD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="SBD" /> class.
        /// </summary>
        public static SBD Unit { get { Warrant.NotNull<SBD>(); return Uniq.Instance; } }

        public static explicit operator SBD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(SBD value) => value?.ToCurrency();

        public static SBD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly SBD Instance = new SBD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "SCR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class SCR : Currency<SCR>
    {
        private SCR() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="SCR" /> class.
        /// </summary>
        public static SCR Unit { get { Warrant.NotNull<SCR>(); return Uniq.Instance; } }

        public static explicit operator SCR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(SCR value) => value?.ToCurrency();

        public static SCR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly SCR Instance = new SCR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "SDD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class SDD : Currency<SDD>
    {
        private SDD() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="SDD" /> class.
        /// </summary>
        public static SDD Unit { get { Warrant.NotNull<SDD>(); return Uniq.Instance; } }

        public static explicit operator SDD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(SDD value) => value?.ToCurrency();

        public static SDD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly SDD Instance = new SDD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "SDG".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class SDG : Currency<SDG>
    {
        private SDG() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="SDG" /> class.
        /// </summary>
        public static SDG Unit { get { Warrant.NotNull<SDG>(); return Uniq.Instance; } }

        public static explicit operator SDG(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(SDG value) => value?.ToCurrency();

        public static SDG FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly SDG Instance = new SDG();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "SDP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class SDP : Currency<SDP>
    {
        private SDP() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="SDP" /> class.
        /// </summary>
        public static SDP Unit { get { Warrant.NotNull<SDP>(); return Uniq.Instance; } }

        public static explicit operator SDP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(SDP value) => value?.ToCurrency();

        public static SDP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly SDP Instance = new SDP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "SEK".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class SEK : Currency<SEK>
    {
        private SEK() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="SEK" /> class.
        /// </summary>
        public static SEK Unit { get { Warrant.NotNull<SEK>(); return Uniq.Instance; } }

        public static explicit operator SEK(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(SEK value) => value?.ToCurrency();

        public static SEK FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly SEK Instance = new SEK();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "SGD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class SGD : Currency<SGD>
    {
        private SGD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="SGD" /> class.
        /// </summary>
        public static SGD Unit { get { Warrant.NotNull<SGD>(); return Uniq.Instance; } }

        public static explicit operator SGD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(SGD value) => value?.ToCurrency();

        public static SGD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly SGD Instance = new SGD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "SHP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class SHP : Currency<SHP>
    {
        private SHP() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="SHP" /> class.
        /// </summary>
        public static SHP Unit { get { Warrant.NotNull<SHP>(); return Uniq.Instance; } }

        public static explicit operator SHP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(SHP value) => value?.ToCurrency();

        public static SHP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly SHP Instance = new SHP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "SIT".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class SIT : Currency<SIT>
    {
        private SIT() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="SIT" /> class.
        /// </summary>
        public static SIT Unit { get { Warrant.NotNull<SIT>(); return Uniq.Instance; } }

        public static explicit operator SIT(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(SIT value) => value?.ToCurrency();

        public static SIT FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly SIT Instance = new SIT();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "SKK".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class SKK : Currency<SKK>
    {
        private SKK() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="SKK" /> class.
        /// </summary>
        public static SKK Unit { get { Warrant.NotNull<SKK>(); return Uniq.Instance; } }

        public static explicit operator SKK(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(SKK value) => value?.ToCurrency();

        public static SKK FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly SKK Instance = new SKK();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "SLL".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class SLL : Currency<SLL>
    {
        private SLL() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="SLL" /> class.
        /// </summary>
        public static SLL Unit { get { Warrant.NotNull<SLL>(); return Uniq.Instance; } }

        public static explicit operator SLL(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(SLL value) => value?.ToCurrency();

        public static SLL FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly SLL Instance = new SLL();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "SOS".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class SOS : Currency<SOS>
    {
        private SOS() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="SOS" /> class.
        /// </summary>
        public static SOS Unit { get { Warrant.NotNull<SOS>(); return Uniq.Instance; } }

        public static explicit operator SOS(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(SOS value) => value?.ToCurrency();

        public static SOS FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly SOS Instance = new SOS();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "SRD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class SRD : Currency<SRD>
    {
        private SRD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="SRD" /> class.
        /// </summary>
        public static SRD Unit { get { Warrant.NotNull<SRD>(); return Uniq.Instance; } }

        public static explicit operator SRD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(SRD value) => value?.ToCurrency();

        public static SRD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly SRD Instance = new SRD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "SRG".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class SRG : Currency<SRG>
    {
        private SRG() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="SRG" /> class.
        /// </summary>
        public static SRG Unit { get { Warrant.NotNull<SRG>(); return Uniq.Instance; } }

        public static explicit operator SRG(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(SRG value) => value?.ToCurrency();

        public static SRG FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly SRG Instance = new SRG();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "SSP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class SSP : Currency<SSP>
    {
        private SSP() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="SSP" /> class.
        /// </summary>
        public static SSP Unit { get { Warrant.NotNull<SSP>(); return Uniq.Instance; } }

        public static explicit operator SSP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(SSP value) => value?.ToCurrency();

        public static SSP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly SSP Instance = new SSP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "STD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class STD : Currency<STD>
    {
        private STD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="STD" /> class.
        /// </summary>
        public static STD Unit { get { Warrant.NotNull<STD>(); return Uniq.Instance; } }

        public static explicit operator STD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(STD value) => value?.ToCurrency();

        public static STD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly STD Instance = new STD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "SUR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class SUR : Currency<SUR>
    {
        private SUR() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="SUR" /> class.
        /// </summary>
        public static SUR Unit { get { Warrant.NotNull<SUR>(); return Uniq.Instance; } }

        public static explicit operator SUR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(SUR value) => value?.ToCurrency();

        public static SUR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly SUR Instance = new SUR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "SVC".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class SVC : Currency<SVC>
    {
        private SVC() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="SVC" /> class.
        /// </summary>
        public static SVC Unit { get { Warrant.NotNull<SVC>(); return Uniq.Instance; } }

        public static explicit operator SVC(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(SVC value) => value?.ToCurrency();

        public static SVC FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly SVC Instance = new SVC();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "SYP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class SYP : Currency<SYP>
    {
        private SYP() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="SYP" /> class.
        /// </summary>
        public static SYP Unit { get { Warrant.NotNull<SYP>(); return Uniq.Instance; } }

        public static explicit operator SYP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(SYP value) => value?.ToCurrency();

        public static SYP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly SYP Instance = new SYP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "SZL".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class SZL : Currency<SZL>
    {
        private SZL() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="SZL" /> class.
        /// </summary>
        public static SZL Unit { get { Warrant.NotNull<SZL>(); return Uniq.Instance; } }

        public static explicit operator SZL(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(SZL value) => value?.ToCurrency();

        public static SZL FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly SZL Instance = new SZL();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "THB".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class THB : Currency<THB>
    {
        private THB() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="THB" /> class.
        /// </summary>
        public static THB Unit { get { Warrant.NotNull<THB>(); return Uniq.Instance; } }

        public static explicit operator THB(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(THB value) => value?.ToCurrency();

        public static THB FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly THB Instance = new THB();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "TJR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class TJR : Currency<TJR>
    {
        private TJR() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="TJR" /> class.
        /// </summary>
        public static TJR Unit { get { Warrant.NotNull<TJR>(); return Uniq.Instance; } }

        public static explicit operator TJR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(TJR value) => value?.ToCurrency();

        public static TJR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly TJR Instance = new TJR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "TJS".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class TJS : Currency<TJS>
    {
        private TJS() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="TJS" /> class.
        /// </summary>
        public static TJS Unit { get { Warrant.NotNull<TJS>(); return Uniq.Instance; } }

        public static explicit operator TJS(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(TJS value) => value?.ToCurrency();

        public static TJS FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly TJS Instance = new TJS();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "TMM".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class TMM : Currency<TMM>
    {
        private TMM() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="TMM" /> class.
        /// </summary>
        public static TMM Unit { get { Warrant.NotNull<TMM>(); return Uniq.Instance; } }

        public static explicit operator TMM(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(TMM value) => value?.ToCurrency();

        public static TMM FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly TMM Instance = new TMM();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "TMT".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class TMT : Currency<TMT>
    {
        private TMT() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="TMT" /> class.
        /// </summary>
        public static TMT Unit { get { Warrant.NotNull<TMT>(); return Uniq.Instance; } }

        public static explicit operator TMT(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(TMT value) => value?.ToCurrency();

        public static TMT FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly TMT Instance = new TMT();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "TND".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class TND : Currency<TND>
    {
        private TND() : base(3) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="TND" /> class.
        /// </summary>
        public static TND Unit { get { Warrant.NotNull<TND>(); return Uniq.Instance; } }

        public static explicit operator TND(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(TND value) => value?.ToCurrency();

        public static TND FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly TND Instance = new TND();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "TOP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class TOP : Currency<TOP>
    {
        private TOP() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="TOP" /> class.
        /// </summary>
        public static TOP Unit { get { Warrant.NotNull<TOP>(); return Uniq.Instance; } }

        public static explicit operator TOP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(TOP value) => value?.ToCurrency();

        public static TOP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly TOP Instance = new TOP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "TPE".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class TPE : Currency<TPE>
    {
        private TPE() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="TPE" /> class.
        /// </summary>
        public static TPE Unit { get { Warrant.NotNull<TPE>(); return Uniq.Instance; } }

        public static explicit operator TPE(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(TPE value) => value?.ToCurrency();

        public static TPE FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly TPE Instance = new TPE();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "TRL".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class TRL : Currency<TRL>
    {
        private TRL() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="TRL" /> class.
        /// </summary>
        public static TRL Unit { get { Warrant.NotNull<TRL>(); return Uniq.Instance; } }

        public static explicit operator TRL(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(TRL value) => value?.ToCurrency();

        public static TRL FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly TRL Instance = new TRL();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "TRY".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class TRY : Currency<TRY>
    {
        private TRY() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="TRY" /> class.
        /// </summary>
        public static TRY Unit { get { Warrant.NotNull<TRY>(); return Uniq.Instance; } }

        public static explicit operator TRY(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(TRY value) => value?.ToCurrency();

        public static TRY FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly TRY Instance = new TRY();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "TTD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class TTD : Currency<TTD>
    {
        private TTD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="TTD" /> class.
        /// </summary>
        public static TTD Unit { get { Warrant.NotNull<TTD>(); return Uniq.Instance; } }

        public static explicit operator TTD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(TTD value) => value?.ToCurrency();

        public static TTD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly TTD Instance = new TTD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "TWD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class TWD : Currency<TWD>
    {
        private TWD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="TWD" /> class.
        /// </summary>
        public static TWD Unit { get { Warrant.NotNull<TWD>(); return Uniq.Instance; } }

        public static explicit operator TWD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(TWD value) => value?.ToCurrency();

        public static TWD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly TWD Instance = new TWD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "TZS".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class TZS : Currency<TZS>
    {
        private TZS() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="TZS" /> class.
        /// </summary>
        public static TZS Unit { get { Warrant.NotNull<TZS>(); return Uniq.Instance; } }

        public static explicit operator TZS(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(TZS value) => value?.ToCurrency();

        public static TZS FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly TZS Instance = new TZS();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "UAH".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class UAH : Currency<UAH>
    {
        private UAH() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="UAH" /> class.
        /// </summary>
        public static UAH Unit { get { Warrant.NotNull<UAH>(); return Uniq.Instance; } }

        public static explicit operator UAH(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(UAH value) => value?.ToCurrency();

        public static UAH FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly UAH Instance = new UAH();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "UAK".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class UAK : Currency<UAK>
    {
        private UAK() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="UAK" /> class.
        /// </summary>
        public static UAK Unit { get { Warrant.NotNull<UAK>(); return Uniq.Instance; } }

        public static explicit operator UAK(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(UAK value) => value?.ToCurrency();

        public static UAK FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly UAK Instance = new UAK();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "UGS".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class UGS : Currency<UGS>
    {
        private UGS() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="UGS" /> class.
        /// </summary>
        public static UGS Unit { get { Warrant.NotNull<UGS>(); return Uniq.Instance; } }

        public static explicit operator UGS(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(UGS value) => value?.ToCurrency();

        public static UGS FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly UGS Instance = new UGS();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "UGW".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class UGW : Currency<UGW>
    {
        private UGW() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="UGW" /> class.
        /// </summary>
        public static UGW Unit { get { Warrant.NotNull<UGW>(); return Uniq.Instance; } }

        public static explicit operator UGW(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(UGW value) => value?.ToCurrency();

        public static UGW FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly UGW Instance = new UGW();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "UGX".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class UGX : Currency<UGX>
    {
        private UGX() : base(0) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="UGX" /> class.
        /// </summary>
        public static UGX Unit { get { Warrant.NotNull<UGX>(); return Uniq.Instance; } }

        public static explicit operator UGX(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(UGX value) => value?.ToCurrency();

        public static UGX FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly UGX Instance = new UGX();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "USD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class USD : Currency<USD>
    {
        private USD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="USD" /> class.
        /// </summary>
        public static USD Unit { get { Warrant.NotNull<USD>(); return Uniq.Instance; } }

        public static explicit operator USD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(USD value) => value?.ToCurrency();

        public static USD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly USD Instance = new USD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "USN".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class USN : Currency<USN>
    {
        private USN() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="USN" /> class.
        /// </summary>
        public static USN Unit { get { Warrant.NotNull<USN>(); return Uniq.Instance; } }

        public static explicit operator USN(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(USN value) => value?.ToCurrency();

        public static USN FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly USN Instance = new USN();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "USS".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class USS : Currency<USS>
    {
        private USS() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="USS" /> class.
        /// </summary>
        public static USS Unit { get { Warrant.NotNull<USS>(); return Uniq.Instance; } }

        public static explicit operator USS(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(USS value) => value?.ToCurrency();

        public static USS FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly USS Instance = new USS();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "UYI".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class UYI : Currency<UYI>
    {
        private UYI() : base(0) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="UYI" /> class.
        /// </summary>
        public static UYI Unit { get { Warrant.NotNull<UYI>(); return Uniq.Instance; } }

        public static explicit operator UYI(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(UYI value) => value?.ToCurrency();

        public static UYI FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly UYI Instance = new UYI();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "UYN".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class UYN : Currency<UYN>
    {
        private UYN() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="UYN" /> class.
        /// </summary>
        public static UYN Unit { get { Warrant.NotNull<UYN>(); return Uniq.Instance; } }

        public static explicit operator UYN(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(UYN value) => value?.ToCurrency();

        public static UYN FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly UYN Instance = new UYN();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "UYP".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class UYP : Currency<UYP>
    {
        private UYP() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="UYP" /> class.
        /// </summary>
        public static UYP Unit { get { Warrant.NotNull<UYP>(); return Uniq.Instance; } }

        public static explicit operator UYP(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(UYP value) => value?.ToCurrency();

        public static UYP FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly UYP Instance = new UYP();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "UYU".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class UYU : Currency<UYU>
    {
        private UYU() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="UYU" /> class.
        /// </summary>
        public static UYU Unit { get { Warrant.NotNull<UYU>(); return Uniq.Instance; } }

        public static explicit operator UYU(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(UYU value) => value?.ToCurrency();

        public static UYU FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly UYU Instance = new UYU();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "UZS".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class UZS : Currency<UZS>
    {
        private UZS() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="UZS" /> class.
        /// </summary>
        public static UZS Unit { get { Warrant.NotNull<UZS>(); return Uniq.Instance; } }

        public static explicit operator UZS(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(UZS value) => value?.ToCurrency();

        public static UZS FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly UZS Instance = new UZS();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "VEB".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class VEB : Currency<VEB>
    {
        private VEB() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="VEB" /> class.
        /// </summary>
        public static VEB Unit { get { Warrant.NotNull<VEB>(); return Uniq.Instance; } }

        public static explicit operator VEB(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(VEB value) => value?.ToCurrency();

        public static VEB FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly VEB Instance = new VEB();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "VEF".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class VEF : Currency<VEF>
    {
        private VEF() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="VEF" /> class.
        /// </summary>
        public static VEF Unit { get { Warrant.NotNull<VEF>(); return Uniq.Instance; } }

        public static explicit operator VEF(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(VEF value) => value?.ToCurrency();

        public static VEF FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly VEF Instance = new VEF();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "VNC".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class VNC : Currency<VNC>
    {
        private VNC() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="VNC" /> class.
        /// </summary>
        public static VNC Unit { get { Warrant.NotNull<VNC>(); return Uniq.Instance; } }

        public static explicit operator VNC(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(VNC value) => value?.ToCurrency();

        public static VNC FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly VNC Instance = new VNC();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "VND".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class VND : Currency<VND>
    {
        private VND() : base(0) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="VND" /> class.
        /// </summary>
        public static VND Unit { get { Warrant.NotNull<VND>(); return Uniq.Instance; } }

        public static explicit operator VND(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(VND value) => value?.ToCurrency();

        public static VND FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly VND Instance = new VND();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "VUV".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class VUV : Currency<VUV>
    {
        private VUV() : base(0) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="VUV" /> class.
        /// </summary>
        public static VUV Unit { get { Warrant.NotNull<VUV>(); return Uniq.Instance; } }

        public static explicit operator VUV(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(VUV value) => value?.ToCurrency();

        public static VUV FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly VUV Instance = new VUV();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "WST".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class WST : Currency<WST>
    {
        private WST() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="WST" /> class.
        /// </summary>
        public static WST Unit { get { Warrant.NotNull<WST>(); return Uniq.Instance; } }

        public static explicit operator WST(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(WST value) => value?.ToCurrency();

        public static WST FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly WST Instance = new WST();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "XAF".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class XAF : Currency<XAF>
    {
        private XAF() : base(0) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="XAF" /> class.
        /// </summary>
        public static XAF Unit { get { Warrant.NotNull<XAF>(); return Uniq.Instance; } }

        public static explicit operator XAF(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(XAF value) => value?.ToCurrency();

        public static XAF FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly XAF Instance = new XAF();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "XAG".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class XAG : Currency<XAG>
    {
        private XAG() : base(null) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="XAG" /> class.
        /// </summary>
        public static XAG Unit { get { Warrant.NotNull<XAG>(); return Uniq.Instance; } }

        public static explicit operator XAG(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(XAG value) => value?.ToCurrency();

        public static XAG FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly XAG Instance = new XAG();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "XAU".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class XAU : Currency<XAU>
    {
        private XAU() : base(null) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="XAU" /> class.
        /// </summary>
        public static XAU Unit { get { Warrant.NotNull<XAU>(); return Uniq.Instance; } }

        public static explicit operator XAU(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(XAU value) => value?.ToCurrency();

        public static XAU FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly XAU Instance = new XAU();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "XBA".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class XBA : Currency<XBA>
    {
        private XBA() : base(null) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="XBA" /> class.
        /// </summary>
        public static XBA Unit { get { Warrant.NotNull<XBA>(); return Uniq.Instance; } }

        public static explicit operator XBA(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(XBA value) => value?.ToCurrency();

        public static XBA FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly XBA Instance = new XBA();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "XBB".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class XBB : Currency<XBB>
    {
        private XBB() : base(null) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="XBB" /> class.
        /// </summary>
        public static XBB Unit { get { Warrant.NotNull<XBB>(); return Uniq.Instance; } }

        public static explicit operator XBB(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(XBB value) => value?.ToCurrency();

        public static XBB FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly XBB Instance = new XBB();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "XBC".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class XBC : Currency<XBC>
    {
        private XBC() : base(null) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="XBC" /> class.
        /// </summary>
        public static XBC Unit { get { Warrant.NotNull<XBC>(); return Uniq.Instance; } }

        public static explicit operator XBC(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(XBC value) => value?.ToCurrency();

        public static XBC FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly XBC Instance = new XBC();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "XBD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class XBD : Currency<XBD>
    {
        private XBD() : base(null) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="XBD" /> class.
        /// </summary>
        public static XBD Unit { get { Warrant.NotNull<XBD>(); return Uniq.Instance; } }

        public static explicit operator XBD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(XBD value) => value?.ToCurrency();

        public static XBD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly XBD Instance = new XBD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "XCD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class XCD : Currency<XCD>
    {
        private XCD() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="XCD" /> class.
        /// </summary>
        public static XCD Unit { get { Warrant.NotNull<XCD>(); return Uniq.Instance; } }

        public static explicit operator XCD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(XCD value) => value?.ToCurrency();

        public static XCD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly XCD Instance = new XCD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "XDR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class XDR : Currency<XDR>
    {
        private XDR() : base(null) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="XDR" /> class.
        /// </summary>
        public static XDR Unit { get { Warrant.NotNull<XDR>(); return Uniq.Instance; } }

        public static explicit operator XDR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(XDR value) => value?.ToCurrency();

        public static XDR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly XDR Instance = new XDR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "XEU".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class XEU : Currency<XEU>
    {
        private XEU() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="XEU" /> class.
        /// </summary>
        public static XEU Unit { get { Warrant.NotNull<XEU>(); return Uniq.Instance; } }

        public static explicit operator XEU(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(XEU value) => value?.ToCurrency();

        public static XEU FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly XEU Instance = new XEU();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "XFO".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class XFO : Currency<XFO>
    {
        private XFO() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="XFO" /> class.
        /// </summary>
        public static XFO Unit { get { Warrant.NotNull<XFO>(); return Uniq.Instance; } }

        public static explicit operator XFO(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(XFO value) => value?.ToCurrency();

        public static XFO FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly XFO Instance = new XFO();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "XFU".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class XFU : Currency<XFU>
    {
        private XFU() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="XFU" /> class.
        /// </summary>
        public static XFU Unit { get { Warrant.NotNull<XFU>(); return Uniq.Instance; } }

        public static explicit operator XFU(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(XFU value) => value?.ToCurrency();

        public static XFU FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly XFU Instance = new XFU();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "XOF".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class XOF : Currency<XOF>
    {
        private XOF() : base(0) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="XOF" /> class.
        /// </summary>
        public static XOF Unit { get { Warrant.NotNull<XOF>(); return Uniq.Instance; } }

        public static explicit operator XOF(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(XOF value) => value?.ToCurrency();

        public static XOF FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly XOF Instance = new XOF();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "XPD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class XPD : Currency<XPD>
    {
        private XPD() : base(null) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="XPD" /> class.
        /// </summary>
        public static XPD Unit { get { Warrant.NotNull<XPD>(); return Uniq.Instance; } }

        public static explicit operator XPD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(XPD value) => value?.ToCurrency();

        public static XPD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly XPD Instance = new XPD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "XPF".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class XPF : Currency<XPF>
    {
        private XPF() : base(0) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="XPF" /> class.
        /// </summary>
        public static XPF Unit { get { Warrant.NotNull<XPF>(); return Uniq.Instance; } }

        public static explicit operator XPF(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(XPF value) => value?.ToCurrency();

        public static XPF FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly XPF Instance = new XPF();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "XPT".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class XPT : Currency<XPT>
    {
        private XPT() : base(null) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="XPT" /> class.
        /// </summary>
        public static XPT Unit { get { Warrant.NotNull<XPT>(); return Uniq.Instance; } }

        public static explicit operator XPT(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(XPT value) => value?.ToCurrency();

        public static XPT FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly XPT Instance = new XPT();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "XRE".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class XRE : Currency<XRE>
    {
        private XRE() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="XRE" /> class.
        /// </summary>
        public static XRE Unit { get { Warrant.NotNull<XRE>(); return Uniq.Instance; } }

        public static explicit operator XRE(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(XRE value) => value?.ToCurrency();

        public static XRE FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly XRE Instance = new XRE();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "XSU".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class XSU : Currency<XSU>
    {
        private XSU() : base(null) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="XSU" /> class.
        /// </summary>
        public static XSU Unit { get { Warrant.NotNull<XSU>(); return Uniq.Instance; } }

        public static explicit operator XSU(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(XSU value) => value?.ToCurrency();

        public static XSU FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly XSU Instance = new XSU();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "XTS".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class XTS : Currency<XTS>
    {
        private XTS() : base(null) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="XTS" /> class.
        /// </summary>
        public static XTS Unit { get { Warrant.NotNull<XTS>(); return Uniq.Instance; } }

        public static explicit operator XTS(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(XTS value) => value?.ToCurrency();

        public static XTS FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly XTS Instance = new XTS();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "XUA".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class XUA : Currency<XUA>
    {
        private XUA() : base(null) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="XUA" /> class.
        /// </summary>
        public static XUA Unit { get { Warrant.NotNull<XUA>(); return Uniq.Instance; } }

        public static explicit operator XUA(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(XUA value) => value?.ToCurrency();

        public static XUA FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly XUA Instance = new XUA();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "XXX".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class XXX : Currency<XXX>
    {
        private XXX() : base(null) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="XXX" /> class.
        /// </summary>
        public static XXX Unit { get { Warrant.NotNull<XXX>(); return Uniq.Instance; } }

        public static explicit operator XXX(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(XXX value) => value?.ToCurrency();

        public static XXX FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly XXX Instance = new XXX();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "YDD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class YDD : Currency<YDD>
    {
        private YDD() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="YDD" /> class.
        /// </summary>
        public static YDD Unit { get { Warrant.NotNull<YDD>(); return Uniq.Instance; } }

        public static explicit operator YDD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(YDD value) => value?.ToCurrency();

        public static YDD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly YDD Instance = new YDD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "YER".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class YER : Currency<YER>
    {
        private YER() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="YER" /> class.
        /// </summary>
        public static YER Unit { get { Warrant.NotNull<YER>(); return Uniq.Instance; } }

        public static explicit operator YER(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(YER value) => value?.ToCurrency();

        public static YER FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly YER Instance = new YER();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "YUD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class YUD : Currency<YUD>
    {
        private YUD() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="YUD" /> class.
        /// </summary>
        public static YUD Unit { get { Warrant.NotNull<YUD>(); return Uniq.Instance; } }

        public static explicit operator YUD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(YUD value) => value?.ToCurrency();

        public static YUD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly YUD Instance = new YUD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "YUM".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class YUM : Currency<YUM>
    {
        private YUM() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="YUM" /> class.
        /// </summary>
        public static YUM Unit { get { Warrant.NotNull<YUM>(); return Uniq.Instance; } }

        public static explicit operator YUM(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(YUM value) => value?.ToCurrency();

        public static YUM FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly YUM Instance = new YUM();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "YUN".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class YUN : Currency<YUN>
    {
        private YUN() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="YUN" /> class.
        /// </summary>
        public static YUN Unit { get { Warrant.NotNull<YUN>(); return Uniq.Instance; } }

        public static explicit operator YUN(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(YUN value) => value?.ToCurrency();

        public static YUN FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly YUN Instance = new YUN();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ZAL".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ZAL : Currency<ZAL>
    {
        private ZAL() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ZAL" /> class.
        /// </summary>
        public static ZAL Unit { get { Warrant.NotNull<ZAL>(); return Uniq.Instance; } }

        public static explicit operator ZAL(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ZAL value) => value?.ToCurrency();

        public static ZAL FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ZAL Instance = new ZAL();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ZAR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ZAR : Currency<ZAR>
    {
        private ZAR() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ZAR" /> class.
        /// </summary>
        public static ZAR Unit { get { Warrant.NotNull<ZAR>(); return Uniq.Instance; } }

        public static explicit operator ZAR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ZAR value) => value?.ToCurrency();

        public static ZAR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ZAR Instance = new ZAR();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ZMK".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ZMK : Currency<ZMK>
    {
        private ZMK() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ZMK" /> class.
        /// </summary>
        public static ZMK Unit { get { Warrant.NotNull<ZMK>(); return Uniq.Instance; } }

        public static explicit operator ZMK(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ZMK value) => value?.ToCurrency();

        public static ZMK FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ZMK Instance = new ZMK();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ZMW".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ZMW : Currency<ZMW>
    {
        private ZMW() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ZMW" /> class.
        /// </summary>
        public static ZMW Unit { get { Warrant.NotNull<ZMW>(); return Uniq.Instance; } }

        public static explicit operator ZMW(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ZMW value) => value?.ToCurrency();

        public static ZMW FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ZMW Instance = new ZMW();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ZRN".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ZRN : Currency<ZRN>
    {
        private ZRN() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ZRN" /> class.
        /// </summary>
        public static ZRN Unit { get { Warrant.NotNull<ZRN>(); return Uniq.Instance; } }

        public static explicit operator ZRN(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ZRN value) => value?.ToCurrency();

        public static ZRN FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ZRN Instance = new ZRN();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ZRZ".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ZRZ : Currency<ZRZ>
    {
        private ZRZ() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ZRZ" /> class.
        /// </summary>
        public static ZRZ Unit { get { Warrant.NotNull<ZRZ>(); return Uniq.Instance; } }

        public static explicit operator ZRZ(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ZRZ value) => value?.ToCurrency();

        public static ZRZ FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ZRZ Instance = new ZRZ();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ZWC".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ZWC : Currency<ZWC>
    {
        private ZWC() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ZWC" /> class.
        /// </summary>
        public static ZWC Unit { get { Warrant.NotNull<ZWC>(); return Uniq.Instance; } }

        public static explicit operator ZWC(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ZWC value) => value?.ToCurrency();

        public static ZWC FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ZWC Instance = new ZWC();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ZWD".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ZWD : Currency<ZWD>
    {
        private ZWD() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ZWD" /> class.
        /// </summary>
        public static ZWD Unit { get { Warrant.NotNull<ZWD>(); return Uniq.Instance; } }

        public static explicit operator ZWD(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ZWD value) => value?.ToCurrency();

        public static ZWD FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ZWD Instance = new ZWD();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ZWL".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ZWL : Currency<ZWL>
    {
        private ZWL() : base(2) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ZWL" /> class.
        /// </summary>
        public static ZWL Unit { get { Warrant.NotNull<ZWL>(); return Uniq.Instance; } }

        public static explicit operator ZWL(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ZWL value) => value?.ToCurrency();

        public static ZWL FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ZWL Instance = new ZWL();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ZWN".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ZWN : Currency<ZWN>
    {
        private ZWN() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ZWN" /> class.
        /// </summary>
        public static ZWN Unit { get { Warrant.NotNull<ZWN>(); return Uniq.Instance; } }

        public static explicit operator ZWN(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ZWN value) => value?.ToCurrency();

        public static ZWN FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ZWN Instance = new ZWN();
        }
    }

    /// <summary>
    /// Represents the currency unit for the code "ZWR".
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.TextTemplating", "14.0")]
    [ExcludeFromCodeCoverage(Justification = "We don't want to clutter the open cover report.")]
    public sealed class ZWR : Currency<ZWR>
    {
        private ZWR() : base(Currency.UnknownMinorUnits) { }

        /// <summary>
        /// Gets the unique instance of the <see cref="ZWR" /> class.
        /// </summary>
        public static ZWR Unit { get { Warrant.NotNull<ZWR>(); return Uniq.Instance; } }

        public static explicit operator ZWR(Currency value) => FromCurrency(value);
        public static explicit operator Currency?(ZWR value) => value?.ToCurrency();

        public static ZWR FromCurrency(Currency value)
        {
            if (value.Code != Name) { throw new InvalidCastException(); }

            return Unit;
        }

        private class Uniq
        {
            static Uniq() { }
            internal static readonly ZWR Instance = new ZWR();
        }
    }

}
