<#@ template language="C#" debug="false" hostspecific="true" inherits="Iso4217Template" #>
<#@ output extension=".g.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(T4NarvaloLibrary)" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Narvalo.T4" #>
<#

// Uncomment to debug:
Debug = true;

var currentCurrencies = ParseCurrent(@"..\..\data\ISO4217\A1.xml");
var legacyCurrencies = ParseLegacy(@"..\..\data\ISO4217\A3.xml");
// NB: Current currencies must come first.
var currencies = currentCurrencies.Concat(legacyCurrencies).ToList();

var highestMinor = currencies.Max(_ => _.MinorUnits);

var dict = new Dictionary<string, short?>();

foreach (var currency in currentCurrencies)
{
    if (dict.ContainsKey(currency.Code))
    {
        //if (!currency.IsLegacy && dict[currency.Code] != currency.MinorUnits)
        if (dict[currency.Code] != currency.MinorUnits)
        {
            Warning("A currency has different units: (" + currency.IsLegacy.ToString() + ") " + currency.EnglishName + " " + currency.Code + " " + currency.MinorUnits);
        }
    }
    else
    {
        dict.Add(currency.Code, currency.MinorUnits);
    }
}

WriteHeader();

#>
namespace <#= Namespace #>
{
    using System.Collections.Generic;
    using System.Diagnostics.Contracts;
    using System.Threading;

    public partial struct <#= Name #>
    {
        private static readonly decimal[] s_Epsilons = new decimal[]
        {
            1m,
<# for (var i = 1; i <= highestMinor; i++) { var format = "N" + i.ToString(); #>
            <#= Math.Pow(10, -i).ToString(format, CultureInfo.InvariantCulture) #>m,
<# } #>
        };

        private static uint[] s_PowersOfTen = new uint[] {
<# for (var i = 0; i <= highestMinor; i++) { #>
            <#= Math.Pow(10, i).ToString("G") #>,
<# } #>
        };

        /// <summary>
        /// Gets the list of available currency codes/minor units.
        /// </summary>
        [ContractVerification(false)]
        private static Dictionary<string, short?> Codes
        {
            get
            {
                Warrant.NotNull<Dictionary<string, short?>>();

                if (s_Codes == null)
                {
                    var dict = new Dictionary<string, short?>() {
<# foreach (var pair in dict.OrderBy(_ => _.Key)) { #>
                        { "<#= pair.Key #>", <#= pair.Value.HasValue ? pair.Value.Value.ToString() : "null"  #>},
<# } #>
                    };

                    // If the field is still null, write to it.
                    Interlocked.CompareExchange(ref s_Codes, dict, null);
                }

                return s_Codes;
            }
        }

        /// <summary>
        /// Gets the set of legacy currencies.
        /// </summary>
        [ContractVerification(false)]
        private static HashSet<string> WithdrawnCodes
        {
            get
            {
                Warrant.NotNull<HashSet<string>>();

                if (s_WithdrawnCodes == null)
                {
                    var set = new HashSet<string>() {
<#
foreach (var item in legacyCurrencies.OrderBy(_ => _.Code)) {
    if (item.MinorUnits != null)
    {
        Warning("A legacy currency has minor units: " + item.EnglishName + " " + item.Code);
    }
#>
                        "<#= item.Code#>",
<# } #>
                    };

                    // If the field is still null, write to it.
                    Interlocked.CompareExchange(ref s_WithdrawnCodes, set, null);
                }

                return s_WithdrawnCodes;
            }
        }
    }
}