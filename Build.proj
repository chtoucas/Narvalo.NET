<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="12.0"
         DefaultTargets="Default"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    Sample usages:
    - Build all projects:
        MSBuild Build.proj
    - Build all projects, be verbose:
        MSBuild Build.proj /p:Verbose:true
    - Build all projects and create NuGet packages:
        MSBuild Build.proj /t:Package
    - Build NuGet packages and only the necessary projects:
        MSBuild Build.proj /t:Package /p:Production=true
        
    *** IMPORTANT ***
    When upgrading VS, you should upgrade the VisualStudioVersion here,
    in build.cmd and in Narvalo.props.
    
    FIXME:
    - T4 re-generation has been disabled since it require VS hosting.

    TODO:
    - NarvaloLogDir
    - Apply NarvaloVerbose to CodeAnalysis & co?
    - Remove .xml.old created by Code Contracts.
    - Check that Code/Source Analysis & Code Contracts only run if the assembly did change.        
    - There are still some files created in bin and obj.
    - PSake or Fake launcher. Download NuGet if necessary.
    - Move MSBuild.log to log directory?
    - Versioning.
    - Create NuGet packages: Subset of packages?
    - Artifacts
    - Merging, just for fun.
    - Nuproj?
    
    REVIEW: 
    - Delay signing?
  -->

  <PropertyGroup>
    <!-- The default behaviour is to build all projects. -->
    <Production Condition=" '$(Production)' != 'true' ">false</Production>
    <!-- The default behaviour is to not use the Clean and Rebuild targets from projects. -->
    <DoNotDelegate Condition=" '$(DoNotDelegate)' != 'false' ">true</DoNotDelegate>
    <!-- The default behaviour is to be verbose. -->
    <Verbose Condition=" '$(Verbose)' != 'false' ">true</Verbose>

    <Configuration Condition=" '$(Configuration)' == '' ">Release</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>

    <BuildInParallel Condition=" '$(BuildInParallel)' == '' And $(MSBuildNodeCount) &gt; 1 ">true</BuildInParallel>
    <BuildInParallel Condition=" '$(BuildInParallel)' == '' ">false</BuildInParallel>
  </PropertyGroup>

  <PropertyGroup>
    <MessageImportance Condition=" '$(Verbose)' == 'true' ">High</MessageImportance>
    <MessageImportance Condition=" '$(Verbose)' != 'true' ">Normal</MessageImportance>

    <VisualStudioVersion>12.0</VisualStudioVersion>

    <RepositoryRoot>$(MSBuildThisFileDirectory)</RepositoryRoot>
    <ToolsDir>$(RepositoryRoot)tools\</ToolsDir>
    <WorkRoot>$(RepositoryRoot)work\</WorkRoot>
    <OutDir>$(WorkRoot)bin\$(Configuration)\</OutDir>
    <LogDir>$(WorkRoot)log\</LogDir>
    <PackagesDir>$(WorkRoot)packages\</PackagesDir>
    <VerifyBuildDummyOutput>$(WorkRoot)verify.txt</VerifyBuildDummyOutput>
    <XunitLogfile>$(LogDir)xunit.xml</XunitLogfile>
    <NuGetCommand>&quot;$(ToolsDir)NuGet\nuget.exe&quot;</NuGetCommand>
  </PropertyGroup>

  <Import Project="$(ToolsDir)Build.Packages.props" />
  <Import Project="$(ToolsDir)xUnit.tasks" />

  <Choose>
    <When Condition=" '$(Production)' == 'false' ">
      <ItemGroup>
        <ProjectsToBuild Include="$(RepositoryRoot)Narvalo.sln"></ProjectsToBuild>
      </ItemGroup>
      <PropertyGroup>
        <!-- WARNING: Solutions use "Any CPU" instead of "AnyCPU... -->
        <Platform Condition=" '$(Platform)' == 'AnyCPU' ">Any CPU</Platform>
      </PropertyGroup>
    </When>
    <Otherwise>
      <ItemGroup>
        <!--<ProjectsToBuild Include="$(RepositoryRoot)src\Narvalo.Common\Narvalo.Common.csproj" />-->
        <ProjectsToBuild Include="$(RepositoryRoot)src\Narvalo.Core\Narvalo.Core.csproj" />
        <!--<ProjectsToBuild Include="$(RepositoryRoot)src\Narvalo.Web\Narvalo.Web.csproj" />-->
        <!--<ProjectsToBuild Include="$(RepositoryRoot)tests\Narvalo.Facts\Narvalo.Facts.csproj" />-->
      </ItemGroup>
    </Otherwise>
  </Choose>

  <PropertyGroup>
    <!--
      Attempt to use a completely different working directory from the one used by VS.

      WARNING: When building a PCL project, MSBuild places its output inside
      a subdirectory of $(OutDir). To correct this, we instruct MSBuild to
      use the standard behaviour: $(GenerateProjectSpecificOutputFolder) = false.

      Here is the documentation directly taken from:
        %ProgramFiles(x86)%\MSBuild\$(VisualStudioVersion)\Bin\Microsoft.Common.CurrentVersion.targets

      Several properties must be set in the main project file, before using this .TARGETS file.
      However, if the properties are not set, we pick some defaults.

      OutDir:
      Indicates the final output location for the project or solution. When building a solution,
      OutDir can be used to gather multiple project outputs in one location. In addition,
      OutDir is included in AssemblySearchPaths used for resolving references.

      OutputPath:
      This property is usually specified in the project file and is used to initialize OutDir.
      OutDir and OutputPath are distinguished for legacy reasons, and OutDir should be used if at all possible.

      BaseIntermediateOutputPath:
      This is the top level folder where all configuration specific intermediate output folders will be created.
      Default value is obj\

      IntermediateOutputPath:
      This is the full intermediate Output Path, and is derived from BaseIntermediateOutputPath, if none specified
      (eg. obj\debug). If this property is overridden, then setting BaseIntermediateOutputPath has no effect.
    -->
    <BuildProperties>
      Configuration=$(Configuration);
      Platform=$(Platform);
      BuildInParallel=$(BuildInParallel);
      BaseIntermediateOutputPath=$(WorkRoot)obj\;
      OutDir=$(OutDir);
      OutputPath=$(OutDir);
      GenerateProjectSpecificOutputFolder=false;
      VisualStudioVersion=$(VisualStudioVersion);
      CustomAfterNarvaloProps=$(ToolsDir)Build.After.props;
      CustomBeforeNarvaloTargets=$(ToolsDir)Build.Before.targets;
      NarvaloLogDir=$(LogDir);
      NarvaloVerbose=$(Verbose)
    </BuildProperties>
  </PropertyGroup>


  <!-- ### Public Targets ### -->

  <Target Name="Default" DependsOnTargets="Clean;Build;VerifyBuild;RunTests" />

  <PropertyGroup>
    <CleanDependsOn Condition=" '$(DoNotDelegate)' == 'true' ">CoreClean</CleanDependsOn>
    <CleanDependsOn Condition=" '$(DoNotDelegate)' != 'true' ">SoftClean</CleanDependsOn>
  </PropertyGroup>

  <Target Name="Clean" DependsOnTargets="$(CleanDependsOn)" />

  <Target Name="CoreClean">
    <Message Text="Cleaning..." Importance="$(MessageImportance)" />

    <RemoveDir Directories="$(WorkRoot)" />
  </Target>

  <Target Name="SoftClean">
    <Message Text="Cleaning..." Importance="$(MessageImportance)" />

    <MSBuild Projects="@(ProjectsToBuild)"
             Properties="$(BuildProperties)"
             BuildInParallel="$(BuildInParallel)"
             Targets="Clean" />
  </Target>

  <Target Name="RestorePackages">
    <Message Text="Restoring NuGet packages..." Importance="$(MessageImportance)" />

    <Exec Command="$(NuGetCommand) restore &quot;$(RepositoryRoot)Narvalo (Core).sln&quot; -NonInteractive -Verbosity quiet" />
  </Target>

  <Target Name="Build" DependsOnTargets="RestorePackages;_CreateLogDir">
    <MSBuild Projects="@(ProjectsToBuild)"
             Properties="$(BuildProperties)"
             BuildInParallel="$(BuildInParallel)"
             Targets="Build"
             StopOnFirstFailure="true">
      <Output ItemName="BuildOutputs" TaskParameter="TargetOutputs" />
    </MSBuild>
  </Target>

  <PropertyGroup>
    <RebuildDependsOn Condition=" '$(DoNotDelegate)' == 'true' ">CoreRebuild</RebuildDependsOn>
    <RebuildDependsOn Condition=" '$(DoNotDelegate)' != 'true' ">SoftRebuild</RebuildDependsOn>
  </PropertyGroup>

  <Target Name="Rebuild" DependsOnTargets="$(RebuildDependsOn)" />

  <Target Name="CoreRebuild" DependsOnTargets="_PatchRebuild;Clean;Build" />

  <Target Name="SoftRebuild">
    <MSBuild Projects="@(ProjectsToBuild)"
             Properties="$(BuildProperties)"
             BuildInParallel="$(BuildInParallel)"
             Targets="Rebuild"
             StopOnFirstFailure="true">
      <Output ItemName="BuildOutputs" TaskParameter="TargetOutputs" />
    </MSBuild>
  </Target>

  <Target Name="VerifyBuild"
          DependsOnTargets="Build"
          Inputs="@(BuildOutputs)"
          Outputs="$(VerifyBuildDummyOutput)">
    <Message Text="Verifying assemblies with PEVerify..." Importance="$(MessageImportance)" />

    <GetFrameworkSdkPath>
      <!-- Path to default version of the .NET SDK. -->
      <!--<Output TaskParameter="Path" PropertyName="_SdkPath" />-->
      <!-- Path to default version of the .NET 4.0 SDK. -->
      <Output TaskParameter="FrameworkSdkVersion40Path" PropertyName="_SdkVersion40Path" />
    </GetFrameworkSdkPath>

    <PropertyGroup>
      <!-- We use a specific version. -->
      <_PEVerifyCommand>&quot;$(_SdkVersion40Path)Bin\NETFX 4.5.1 Tools\peverify.exe&quot;</_PEVerifyCommand>
    </PropertyGroup>

    <Exec Command="$(_PEVerifyCommand) &quot;%(BuildOutputs.FullPath)&quot; /nologo /md /il /unique"
          ContinueOnError="false" />

    <!-- Garder cette commande en fin de directive au cas où une vérification échoue. -->
    <Touch Files="$(VerifyBuildDummyOutput)" AlwaysCreate="true" />
  </Target>

  <Target Name="RunTests"
          DependsOnTargets="Build;_CreateLogDir"
          Inputs="@(BuildOutputs)"
          Outputs="$(XunitLogfile)">
    <Message Text="Running Xunit tests..." Importance="$(MessageImportance)" />

    <ItemGroup>
      <_TestAssemblies Include="%(BuildOutputs.Identity)"
                       Condition=" '@(BuildOutputs->EndsWith('Facts.dll'))' == 'true' " />
    </ItemGroup>

    <xunit Assemblies="@(_TestAssemblies)"
           Xml="$(XunitLogfile)"
           Condition=" '@(_TestAssemblies)' != '' " />
  </Target>

  <Target Name="Package"
          DependsOnTargets="Build;_CreatePackagesDir;"
          Outputs="%(Packages.Identity)">
    <Message Text="Creating NuGet package for %(Packages.Identity)..." Importance="$(MessageImportance)" />

    <PropertyGroup>
      <_PackageDir>$(PackagesDir)%(Packages.Identity)\</_PackageDir>
      <_PackageSpec>$(_PackageDir)%(Packages.Identity).nuspec</_PackageSpec>
    </PropertyGroup>

    <!-- Remove directory first. -->

    <MakeDir Directories="$(_PackageDir)build" Condition=" '%(Packages.Build)' != '' " />
    <!--<Copy SourceFiles="%(Packages.Build)" DestinationFolder="$(Packages)build" />-->
    <MakeDir Directories="$(_PackageDir)lib" Condition=" '%(Packages.Lib)' != '' " />
    <!--<Copy SourceFiles="%(Packages.Libs)" DestinationFolder="$(_PackageDir)lib" />-->
    <MakeDir Directories="$(_PackageDir)tools" Condition=" '%(Packages.Tools)' != '' " />
    <!--<Copy SourceFiles="%(Packages.Tools)" DestinationFolder="$(_PackageDir)tools" />-->

    <_CreatePackageSpec
      TemplateFile="$(RepositoryRoot)etc\%(Packages.Identity).nuspec"
      VersionNumber="1.0.0"
      SpecFile="$(_PackageSpec)" />

    <!--<Exec Command="$(NuGetCommand) pack &quot;$(_PackageSpec)&quot; -OutputDirectory &quot;$(PackagesDir)&quot; -Verbosity detailed" />-->
  </Target>


  <!-- ### Private Targets ### -->

  <Target Name="_CreateLogDir">
    <MakeDir Directories="$(LogDir)" Condition="!Exists($(LogDir))" />
  </Target>

  <Target Name="_CreatePackagesDir">
    <MakeDir Directories="$(PackagesDir)" Condition="!Exists($(PackagesDir))" />
  </Target>

  <Target Name="_PatchRebuild">
    <!--
      StyleCop uses $(RebuildDependsOn) to modify the Build process. 
      Here, we define Rebuild as Clean;Build, which means that StyleCop 
      modifications of the Rebuild process won't apply since we never call
      the Rebuild target of MSBuild. 
      
      One solution to this problem is to add the StyleCop modifications to 
      the Build properties.
      
      Another (better?) solution is to define our Rebuild target
      so that he call MSBuild with the Rebuild target. This is exactly
      what we do if DoNotDelegate is set to false.
    -->
    <PropertyGroup>
      <BuildProperties>
        $(BuildProperties);
        SourceAnalysisForceFullAnalysis=true
      </BuildProperties>
    </PropertyGroup>
  </Target>

  <UsingTask TaskName="_CreatePackageSpec" TaskFactory="CodeTaskFactory"
             AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(VisualStudioVersion).dll">
    <ParameterGroup>
      <TemplateFile ParameterType="System.String" Required="true" />
      <VersionNumber ParameterType="System.String" Required="true" />
      <SpecFile ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
if (TemplateFile.Length == 0) {
    Log.LogMessage(MessageImportance.High, "You must supply a template file.");
    return false;
}

try {
    string template = File.ReadAllText(TemplateFile).Replace("$version$", VersionNumber);
    File.WriteAllText(SpecFile, template);
}
catch (IOException ex) {
    Log.LogErrorFromException(ex);
}

return !Log.HasLoggedErrors;
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
