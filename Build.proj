<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="12.0"
         DefaultTargets="Build"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    Sample uses:
    - Build all projects:
        MSBuild Build.proj
    - Build all projects, be verbose:
        MSBuild Build.proj /p:Verbose:true
    - Build all projects and create NuGet packages:
        MSBuild Build.proj /t:Package
    - Build NuGet packages and only the necessary projects:
        MSBuild Build.proj /t:Package /p:Production=true

    TODO: Move MSBuild.log to log directory.
    TODO: PSake or Fake launcher.
    TODO: Download NuGet.
    TODO: Versioning.
    TODO: Create NuGet packages: Subset of packages?
    TODO: Message Importance.
    TODO: Merging, just for fun.
    TODO: Nuproj?
  -->

  <PropertyGroup>
    <RepositoryRoot>$(MSBuildThisFileDirectory)</RepositoryRoot>
  </PropertyGroup>

  <Import Project="$(RepositoryRoot)tools\NuGet.props" />

  <ItemGroup>
    <XunitAssemblyFile Include="$(RepositoryRoot)packages\**\xunit.runner.msbuild.dll" />
  </ItemGroup>
  <UsingTask TaskName="Xunit.Runner.MSBuild.xunit" AssemblyFile="@(XunitAssemblyFile)" />

  <!-- ### Public Properties ### -->

  <PropertyGroup>
    <Production Condition=" '$(Production)' == '' ">true</Production>
    <Verbose Condition=" '$(Verbose)' == '' ">false</Verbose>

    <Configuration Condition=" '$(Configuration)' == '' ">Release</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>

    <BuildInParallel Condition=" '$(BuildInParallel)' == '' And $(MSBuildNodeCount) &gt; 1 ">true</BuildInParallel>
    <BuildInParallel Condition=" '$(BuildInParallel)' == '' ">false</BuildInParallel>
  </PropertyGroup>


  <!-- ### Project Setup ### -->

  <PropertyGroup>
    <!-- Directory where all compilation results should go. -->
    <BuildRoot>$(RepositoryRoot)_build\</BuildRoot>
    <!-- Directory where all log should go. -->
    <LogDir>$(BuildRoot)log\</LogDir>
    <!-- Directory where all packages should go. -->
    <PackagesDir>$(BuildRoot)packages\</PackagesDir>
    <!-- A dummy output for the target "Verify". -->
    <VerifyDummyOutput>$(BuildRoot)verify.txt</VerifyDummyOutput>
    <!-- Log file for Xunit. -->
    <XunitLogfile>$(LogDir)xunit.xml</XunitLogfile>
    <!-- Path to NuGet exec. -->
    <NuGetCommand>&quot;$(RepositoryRoot)tools\NuGet\nuget.exe&quot;</NuGetCommand>
  </PropertyGroup>

  <Choose>
    <When Condition=" '$(Production)' == 'false' ">
      <ItemGroup>
        <ProjectsToBuild Include="$(RepositoryRoot)Narvalo.sln"></ProjectsToBuild>
      </ItemGroup>
      <PropertyGroup>
        <!-- WARNING: Solutions use "Any CPU" instead of "AnyCPU... -->
        <Platform Condition=" '$(Platform)' == 'AnyCPU' ">Any CPU</Platform>
      </PropertyGroup>
    </When>
    <Otherwise>
      <ItemGroup>
        <!--<ProjectsToBuild Include="$(RepositoryRoot)src\Narvalo.Common\Narvalo.Common.csproj" />-->
        <ProjectsToBuild Include="$(RepositoryRoot)src\Narvalo.Core\Narvalo.Core.csproj" />
        <!--<ProjectsToBuild Include="$(RepositoryRoot)src\Narvalo.Web\Narvalo.Web.csproj" />-->
        <!--<ProjectsToBuild Include="$(RepositoryRoot)tests\Narvalo.Facts\Narvalo.Facts.csproj" />-->
      </ItemGroup>
    </Otherwise>
  </Choose>

  <PropertyGroup>
    <OutDir>$(BuildRoot)bin\$(Configuration)\</OutDir>

    <!--
      Attempt to completely separate our build environment and the one used by VS.

      REVIEW: Is OutputPath really useful here?
      REVIEW: Should I add SolutionDir=$(RepositoryRoot)

      WARNING: When building a PCL project, MSBuild places its output inside
      a subdirectory of $(OutDir). To correct this, we instruct MSBuild to
      use the standard behaviour: $(GenerateProjectSpecificOutputFolder) = false.

      Here is the documentation directly taken from:
        %ProgramFiles(x86)%\MSBuild\12.0\Bin\Microsoft.Common.CurrentVersion.targets

      Several properties must be set in the main project file, before using this .TARGETS file.
      However, if the properties are not set, we pick some defaults.

      OutDir:
      Indicates the final output location for the project or solution. When building a solution,
      OutDir can be used to gather multiple project outputs in one location. In addition,
      OutDir is included in AssemblySearchPaths used for resolving references.

      OutputPath:
      This property is usually specified in the project file and is used to initialize OutDir.
      OutDir and OutputPath are distinguished for legacy reasons, and OutDir should be used if at all possible.

      BaseIntermediateOutputPath:
      This is the top level folder where all configuration specific intermediate output folders will be created.
      Default value is obj\

      IntermediateOutputPath:
      This is the full intermediate Output Path, and is derived from BaseIntermediateOutputPath, if none specified
      (eg. obj\debug). If this property is overridden, then setting BaseIntermediateOutputPath has no effect.
    -->
    <BuildProperties>
      Configuration=$(Configuration);
      Platform=$(Platform);
      BuildInParallel=$(BuildInParallel);
      BaseIntermediateOutputPath=$(BuildRoot)obj\;
      OutDir=$(OutDir);
      OutputPath=$(OutDir);
      GenerateProjectSpecificOutputFolder=false;
      NarvaloLogDir=$(LogDir);
      NarvaloVerbose=$(Verbose)
    </BuildProperties>
  </PropertyGroup>


  <!-- ### Public Targets ### -->

  <Target Name="Clean">
    <Message Text="Cleaning..." Importance="High" />

    <RemoveDir Directories="$(BuildRoot)" />
  </Target>

  <Target Name="RestorePackages">
    <Message Text="Restoring NuGet packages..." Importance="High" />

    <Exec Command="$(NuGetCommand) restore &quot;$(RepositoryRoot)Narvalo (Core).sln&quot; -NonInteractive -Verbosity quiet" />
  </Target>

  <Target Name="Build" DependsOnTargets="RestorePackages;_PrepareForLogging">
    <MSBuild Projects="@(ProjectsToBuild)"
             Properties="$(BuildProperties)"
             BuildInParallel="$(BuildInParallel)"
             Targets="Build"
             StopOnFirstFailure="true">
      <Output ItemName="BuildOutputs" TaskParameter="TargetOutputs" />
    </MSBuild>
  </Target>

  <Target Name="Rebuild" DependsOnTargets="_PatchRebuild;Clean;Build" />

  <Target Name="Verify"
          DependsOnTargets="Build"
          Inputs="@(BuildOutputs)"
          Outputs="$(VerifyDummyOutput)">
    <Message Text="Verifying assemblies with PEVerify..." Importance="Normal" />

    <GetFrameworkSdkPath>
      <!-- Path to default version of the .NET SDK. -->
      <!--<Output TaskParameter="Path" PropertyName="_SdkPath" />-->
      <!-- Path to default version of the .NET 4.0 SDK. -->
      <Output TaskParameter="FrameworkSdkVersion40Path" PropertyName="_SdkVersion40Path" />
    </GetFrameworkSdkPath>

    <PropertyGroup>
      <!-- We use a specific version. -->
      <_PEVerifyCommand>&quot;$(_SdkVersion40Path)Bin\NETFX 4.5.1 Tools\peverify.exe&quot;</_PEVerifyCommand>
    </PropertyGroup>

    <Exec Command="$(_PEVerifyCommand) &quot;%(BuildOutputs.FullPath)&quot; /nologo /md /il /unique"
          ContinueOnError="false" />

    <!-- Garder cette commande en fin de directive au cas où une vérification échoue. -->
    <Touch Files="$(VerifyDummyOutput)" AlwaysCreate="true" />
  </Target>

  <Target Name="RunTests"
          DependsOnTargets="Build;_PrepareForLogging"
          Inputs="@(BuildOutputs)"
          Outputs="$(XunitLogfile)">
    <Message Text="Running Xunit tests..." Importance="Normal" />

    <ItemGroup>
      <_TestAssemblies Include="%(BuildOutputs.Identity)"
                       Condition=" '@(BuildOutputs->EndsWith('Facts.dll'))' == 'true' " />
    </ItemGroup>

    <xunit Assemblies="@(_TestAssemblies)"
           Xml="$(XunitLogfile)"
           Condition=" '@(_TestAssemblies)' != '' " />
  </Target>

  <Target Name="Package"
          DependsOnTargets="Build;_BeforePackage;"
          Outputs="%(Packages.Identity)">
    <Message Text="Creating NuGet package for %(Packages.Identity)..." Importance="High" />

    <PropertyGroup>
      <_PackageDir>$(PackagesDir)%(Packages.Identity)\</_PackageDir>
      <_PackageSpec>$(_PackageDir)%(Packages.Identity).nuspec</_PackageSpec>
    </PropertyGroup>

    <!-- Remove directory first. -->

    <MakeDir Directories="$(_PackageDir)build" Condition=" '%(Packages.Build)' != '' " />
    <!--<Copy SourceFiles="%(Packages.Build)" DestinationFolder="$(Packages)build" />-->
    <MakeDir Directories="$(_PackageDir)lib" Condition=" '%(Packages.Lib)' != '' " />
    <!--<Copy SourceFiles="%(Packages.Libs)" DestinationFolder="$(_PackageDir)lib" />-->
    <MakeDir Directories="$(_PackageDir)tools" Condition=" '%(Packages.Tools)' != '' " />
    <!--<Copy SourceFiles="%(Packages.Tools)" DestinationFolder="$(_PackageDir)tools" />-->

    <_CreatePackageSpec
      TemplateFile="$(RepositoryRoot)etc\%(Packages.Identity).nuspec"
      VersionNumber="1.0.0"
      SpecFile="$(_PackageSpec)" />

    <!--<Exec Command="$(NuGetCommand) pack &quot;$(_PackageSpec)&quot; -OutputDirectory &quot;$(PackagesDir)&quot; -Verbosity detailed" />-->
  </Target>


  <!-- ### Private Targets ### -->

  <Target Name="_PrepareForLogging">
    <MakeDir Directories="$(LogDir)" Condition="!Exists($(LogDir))" />
  </Target>

  <Target Name="_BeforePackage">
    <MakeDir Directories="$(PackagesDir)" Condition="!Exists($(PackagesDir))" />
  </Target>

  <Target Name="_PatchRebuild">
    <!--
      StyleCop treats differently the "Build" and "Rebuild" targets.
      We correct this by adding "SourceAnalysisForceFullAnalysis" to the
      Build properties.
    -->
    <PropertyGroup>
      <BuildProperties>
        $(BuildProperties);
        SourceAnalysisForceFullAnalysis=true
      </BuildProperties>
    </PropertyGroup>
  </Target>

  <UsingTask TaskName="_CreatePackageSpec" TaskFactory="CodeTaskFactory"
             AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <TemplateFile ParameterType="System.String" Required="true" />
      <VersionNumber ParameterType="System.String" Required="true" />
      <SpecFile ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
if (TemplateFile.Length == 0) {
    Log.LogMessage(MessageImportance.High, "You must supply a template file.");
    return false;
}

try {
    string template = File.ReadAllText(TemplateFile).Replace("$version$", VersionNumber);
    File.WriteAllText(SpecFile, template);
}
catch (IOException ex) {
    Log.LogErrorFromException(ex);
}

return !Log.HasLoggedErrors;
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
