// Copyright (c) Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
//
// Runtime Version: 4.0.30319.42000
// Microsoft.VisualStudio.TextTemplating: 14.0
// </auto-generated>
//------------------------------------------------------------------------------

namespace Narvalo.Fx.Samples
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Diagnostics.Contracts;
    using System.Linq;

    using global::Narvalo;
    using Narvalo.Fx.Samples.Internal;

    using static System.Diagnostics.Contracts.Contract;

    /// <content>
    /// Provides a set of static methods for <see cref="MonadPlus{T}" />.
    /// </content>
    /// <remarks>
    /// Sometimes we prefer to use extension methods over static methods to be able to override them locally.
    /// </remarks>
    public static partial class MonadPlus
    {
        /// <summary>
        /// The unique object of type <c>MonadPlus&lt;Unit&gt;</c>.
        /// </summary>
        private static readonly MonadPlus<global::Narvalo.Fx.Unit> s_Unit = Return(global::Narvalo.Fx.Unit.Single);

        /// <summary>
        /// Gets the unique object of type <c>MonadPlus&lt;Unit&gt;</c>.
        /// </summary>
        /// <value>The unique object of type <c>MonadPlus&lt;Unit&gt;</c>.</value>
        public static MonadPlus<global::Narvalo.Fx.Unit> Unit
        {
            get
            {
                Ensures(Result<MonadPlus<global::Narvalo.Fx.Unit>>() != null);

                return s_Unit;
            }
        }


        /// <summary>
        /// Gets the zero for <see cref="MonadPlus{T}"/>.
        /// </summary>
        /// <remarks>
        /// Named <c>mzero</c> in Haskell parlance.
        /// </remarks>
        /// <value>The zero for <see cref="MonadPlus{T}"/>.</value>
        public static MonadPlus<global::Narvalo.Fx.Unit> Zero
        {
            get
            {
                Ensures(Result<MonadPlus<global::Narvalo.Fx.Unit>>() != null);

                return MonadPlus<global::Narvalo.Fx.Unit>.Zero;
            }
        }


        /// <summary>
        /// Obtains an instance of the <see cref="MonadPlus{T}"/> class for the specified value.
        /// </summary>
        /// <remarks>
        /// Named <c>return</c> in Haskell parlance.
        /// </remarks>
        /// <typeparam name="T">The underlying type of <paramref name="value"/>.</typeparam>
        /// <param name="value">A value to be wrapped into a <see cref="MonadPlus{T}"/> object.</param>
        /// <returns>An instance of the <see cref="MonadPlus{T}"/> class for the specified value.</returns>
        public static MonadPlus<T> Return<T>(T value)
            /* T4: C# indent */
        {
            Ensures(Result<MonadPlus<T>>() != null);

            return MonadPlus<T>.η(value);
        }

        #region Generalisations of list functions (Prelude)

        /// <summary>
        /// Removes one level of structure, projecting its bound value into the outer level.
        /// </summary>
        /// <remarks>
        /// Named <c>join</c> in Haskell parlance.
        /// </remarks>
        public static MonadPlus<T> Flatten<T>(MonadPlus<MonadPlus<T>> square)
            /* T4: C# indent */
        {
            Demand.NotNull(square);
            Ensures(Result<MonadPlus<T>>() != null);

            return MonadPlus<T>.μ(square);
        }

        #endregion

        #region Conditional execution of monadic expressions (Prelude)


        /// <remarks>
        /// Named <c>guard</c> in Haskell parlance.
        /// </remarks>
        public static MonadPlus<global::Narvalo.Fx.Unit> Guard(bool predicate)
        {
            Ensures(Result<MonadPlus<global::Narvalo.Fx.Unit>>() != null);

            return predicate ? MonadPlus.Unit : MonadPlus<global::Narvalo.Fx.Unit>.Zero;
        }


        #endregion

        #region Monadic lifting operators (Prelude)

        /// <summary>
        /// Promotes a function to use and return <see cref="MonadPlus{T}" /> values.
        /// </summary>
        /// <remarks>
        /// Named <c>liftM</c> in Haskell parlance.
        /// </remarks>
        public static Func<MonadPlus<T>, MonadPlus<TResult>> Lift<T, TResult>(
            Func<T, TResult> fun)
            /* T4: C# indent */
        {
            Ensures(Result<Func<MonadPlus<T>, MonadPlus<TResult>>>() != null);

            return m =>
            {
                Require.NotNull(m, nameof(m));
                return m.Select(fun);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="MonadPlus{T}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        /// <remarks>
        /// Named <c>liftM2</c> in Haskell parlance.
        /// </remarks>
        public static Func<MonadPlus<T1>, MonadPlus<T2>, MonadPlus<TResult>>
            Lift<T1, T2, TResult>(Func<T1, T2, TResult> fun)
            /* T4: C# indent */
        {
            Ensures(Result<Func<MonadPlus<T1>, MonadPlus<T2>, MonadPlus<TResult>>>() != null);

            return (m1, m2) =>
            {
                Require.NotNull(m1, nameof(m1));
                return m1.Zip(m2, fun);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="MonadPlus{T}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        /// <remarks>
        /// Named <c>liftM3</c> in Haskell parlance.
        /// </remarks>
        public static Func<MonadPlus<T1>, MonadPlus<T2>, MonadPlus<T3>, MonadPlus<TResult>>
            Lift<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> fun)
            /* T4: C# indent */
        {
            Ensures(Result<Func<MonadPlus<T1>, MonadPlus<T2>, MonadPlus<T3>, MonadPlus<TResult>>>() != null);

            return (m1, m2, m3) =>
            {
                Require.NotNull(m1, nameof(m1));
                return m1.Zip(m2, m3, fun);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="MonadPlus{T}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        /// <remarks>
        /// Named <c>liftM4</c> in Haskell parlance.
        /// </remarks>
        public static Func<MonadPlus<T1>, MonadPlus<T2>, MonadPlus<T3>, MonadPlus<T4>, MonadPlus<TResult>>
            Lift<T1, T2, T3, T4, TResult>(
            Func<T1, T2, T3, T4, TResult> fun)
            /* T4: C# indent */
        {
            Ensures(Result<Func<MonadPlus<T1>, MonadPlus<T2>, MonadPlus<T3>, MonadPlus<T4>, MonadPlus<TResult>>>() != null);

            return (m1, m2, m3, m4) =>
            {
                Require.NotNull(m1, nameof(m1));
                return m1.Zip(m2, m3, m4, fun);
            };
        }

        /// <summary>
        /// Promotes a function to use and return <see cref="MonadPlus{T}" /> values, scanning the
        /// monadic arguments from left to right.
        /// </summary>
        /// <remarks>
        /// Named <c>liftM5</c> in Haskell parlance.
        /// </remarks>
        public static Func<MonadPlus<T1>, MonadPlus<T2>, MonadPlus<T3>, MonadPlus<T4>, MonadPlus<T5>, MonadPlus<TResult>>
            Lift<T1, T2, T3, T4, T5, TResult>(
            Func<T1, T2, T3, T4, T5, TResult> fun)
            /* T4: C# indent */
        {
            Ensures(Result<Func<MonadPlus<T1>, MonadPlus<T2>, MonadPlus<T3>, MonadPlus<T4>, MonadPlus<T5>, MonadPlus<TResult>>>() != null);

            return (m1, m2, m3, m4, m5) =>
            {
                Require.NotNull(m1, nameof(m1));
                return m1.Zip(m2, m3, m4, m5, fun);
            };
        }

        #endregion
    } // End of MonadPlus.

    /// <content>
    /// Provides the core monadic extension methods for <see cref="MonadPlus{T}" />.
    /// </content>
    public static partial class MonadPlus
    {
        #region Basic Monad functions (Prelude)

        /// <remarks>
        /// Named <c>fmap</c> in Haskell parlance.
        /// </remarks>
        public static MonadPlus<TResult> Select<TSource, TResult>(
            this MonadPlus<TSource> @this,
            Func<TSource, TResult> selector)
            /* T4: C# indent */
        {
            Require.Object(@this);
            Require.NotNull(selector, nameof(selector));
            Ensures(Result<MonadPlus<TResult>>() != null);

            return @this.Bind(_ => MonadPlus.Return(selector.Invoke(_)));
        }

        /// <remarks>
        /// Named <c>&gt;&gt;</c> in Haskell parlance.
        /// </remarks>
        public static MonadPlus<TResult> Then<TSource, TResult>(
            this MonadPlus<TSource> @this,
            MonadPlus<TResult> other)
            /* T4: C# indent */
        {
            Require.Object(@this);
            Ensures(Result<MonadPlus<TResult>>() != null);

            return @this.Bind(_ => other);
        }

        /// <remarks>
        /// Named <c>forever</c> in Haskell parlance.
        /// </remarks>
        public static MonadPlus<TResult> Forever<TSource, TResult>(
            this MonadPlus<TSource> @this,
            Func<MonadPlus<TResult>> fun
            )
            /* T4: C# indent */
        {
            Require.Object(@this);
            Ensures(Result<MonadPlus<TResult>>() != null);

            // http://stackoverflow.com/questions/24042977/how-does-forever-monad-work

            return @this.Then(@this.Forever(fun));
        }

        /// <remarks>
        /// Named <c>void</c> in Haskell parlance.
        /// </remarks>
        [SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "this",
            Justification = "[Intentionally] This method always returns the same result.")]
        public static MonadPlus<global::Narvalo.Fx.Unit> Forget<TSource>(this MonadPlus<TSource> @this)
            /* T4: C# indent */
        {
            Require.Object(@this);
            Ensures(Result<MonadPlus<global::Narvalo.Fx.Unit>>() != null);

            return MonadPlus.Unit;
        }

        #endregion

        #region Generalisations of list functions (Prelude)


        /// <remarks>
        /// Named <c>mfilter</c> in Haskell parlance.
        /// </remarks>
        public static MonadPlus<TSource> Where<TSource>(
            this MonadPlus<TSource> @this,
            Func<TSource, bool> predicate)
            /* T4: C# indent */
        {
            Require.Object(@this);
            Require.NotNull(predicate, nameof(predicate));
            Ensures(Result<MonadPlus<TSource>>() != null);

            return @this.Bind(
                _ => predicate.Invoke(_) ? @this : MonadPlus<TSource>.Zero);
        }


        /// <remarks>
        /// Named <c>replicateM</c> in Haskell parlance.
        /// </remarks>
        public static MonadPlus<IEnumerable<TSource>> Repeat<TSource>(
            this MonadPlus<TSource> @this,
            int count)
        {
            Require.Object(@this);
            Require.Range(count >= 1, nameof(count));
            Ensures(Result<MonadPlus<IEnumerable<TSource>>>() != null);

            return @this.Select(_ => Enumerable.Repeat(_, count));
        }


        #endregion

        #region Monadic lifting operators (Prelude)

        /// <see cref="Lift{T1, T2, T3}" />
        public static MonadPlus<TResult> Zip<TFirst, TSecond, TResult>(
            this MonadPlus<TFirst> @this,
            MonadPlus<TSecond> second,
            Func<TFirst, TSecond, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.Object(@this);
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));
            Ensures(Result<MonadPlus<TResult>>() != null);

            return @this.Bind(v1 => second.Select(v2 => resultSelector.Invoke(v1, v2)));
        }

        /// <see cref="Lift{T1, T2, T3, T4}" />
        public static MonadPlus<TResult> Zip<T1, T2, T3, TResult>(
            this MonadPlus<T1> @this,
            MonadPlus<T2> second,
            MonadPlus<T3> third,
            Func<T1, T2, T3, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.Object(@this);
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));
            Ensures(Result<MonadPlus<TResult>>() != null);

            Func<T1, MonadPlus<TResult>> g
                = t1 => second.Zip(third, (t2, t3) => resultSelector.Invoke(t1, t2, t3));

            return @this.Bind(g);
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5}" />
        public static MonadPlus<TResult> Zip<T1, T2, T3, T4, TResult>(
             this MonadPlus<T1> @this,
             MonadPlus<T2> second,
             MonadPlus<T3> third,
             MonadPlus<T4> fourth,
             Func<T1, T2, T3, T4, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.Object(@this);
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));
            Ensures(Result<MonadPlus<TResult>>() != null);

            Func<T1, MonadPlus<TResult>> g
                = t1 => second.Zip(
                    third,
                    fourth,
                    (t2, t3, t4) => resultSelector.Invoke(t1, t2, t3, t4));

            return @this.Bind(g);
        }

        /// <see cref="Lift{T1, T2, T3, T4, T5, T6}" />
        public static MonadPlus<TResult> Zip<T1, T2, T3, T4, T5, TResult>(
            this MonadPlus<T1> @this,
            MonadPlus<T2> second,
            MonadPlus<T3> third,
            MonadPlus<T4> fourth,
            MonadPlus<T5> fifth,
            Func<T1, T2, T3, T4, T5, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.Object(@this);
            Require.NotNull(second, nameof(second));
            Require.NotNull(resultSelector, nameof(resultSelector));
            Ensures(Result<MonadPlus<TResult>>() != null);

            Func<T1, MonadPlus<TResult>> g
                = t1 => second.Zip(
                    third,
                    fourth,
                    fifth,
                    (t2, t3, t4, t5) => resultSelector.Invoke(t1, t2, t3, t4, t5));

            return @this.Bind(g);
        }

        #endregion

        #region Query Expression Pattern


        /// <remarks>
        /// Kind of generalisation of Zip (liftM2).
        /// </remarks>
        public static MonadPlus<TResult> SelectMany<TSource, TMiddle, TResult>(
            this MonadPlus<TSource> @this,
            Func<TSource, MonadPlus<TMiddle>> valueSelectorM,
            Func<TSource, TMiddle, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.Object(@this);
            Require.NotNull(valueSelectorM, nameof(valueSelectorM));
            Require.NotNull(resultSelector, nameof(resultSelector));
            Ensures(Result<MonadPlus<TResult>>() != null);

            return @this.Bind(
                _ => valueSelectorM.Invoke(_).Select(
                    middle => resultSelector.Invoke(_, middle)));
        }


        public static MonadPlus<TResult> Join<TSource, TInner, TKey, TResult>(
            this MonadPlus<TSource> @this,
            MonadPlus<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.Object(@this);
            Demand.NotNull(inner);
            Demand.NotNull(outerKeySelector);
            Demand.NotNull(innerKeySelector);
            Demand.NotNull(resultSelector);
            Ensures(Result<MonadPlus<TResult>>() != null);

            return @this.Join(
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                EqualityComparer<TKey>.Default);
        }

        public static MonadPlus<TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this MonadPlus<TSource> @this,
            MonadPlus<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, MonadPlus<TInner>, TResult> resultSelector)
            /* T4: C# indent */
        {
            Require.Object(@this);
            Demand.NotNull(inner);
            Demand.NotNull(outerKeySelector);
            Demand.NotNull(innerKeySelector);
            Demand.NotNull(resultSelector);
            Ensures(Result<MonadPlus<TResult>>() != null);

            return @this.GroupJoin(
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                EqualityComparer<TKey>.Default);
        }


        #endregion

        #region LINQ extensions


        public static MonadPlus<TResult> Join<TSource, TInner, TKey, TResult>(
            this MonadPlus<TSource> @this,
            MonadPlus<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
            /* T4: C# indent */
        {
            Demand.Object(@this);
            Demand.NotNull(inner);
            Demand.NotNull(outerKeySelector);
            Demand.NotNull(innerKeySelector);
            Demand.NotNull(resultSelector);
            Ensures(Result<MonadPlus<TResult>>() != null);

            return JoinCore(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                comparer ?? EqualityComparer<TKey>.Default);
        }

        public static MonadPlus<TResult> GroupJoin<TSource, TInner, TKey, TResult>(
            this MonadPlus<TSource> @this,
            MonadPlus<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, MonadPlus<TInner>, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
            /* T4: C# indent */
        {
            Demand.Object(@this);
            Demand.NotNull(inner);
            Demand.NotNull(outerKeySelector);
            Demand.NotNull(innerKeySelector);
            Demand.NotNull(resultSelector);
            Ensures(Result<MonadPlus<TResult>>() != null);

            return GroupJoinCore(
                @this,
                inner,
                outerKeySelector,
                innerKeySelector,
                resultSelector,
                comparer ?? EqualityComparer<TKey>.Default);
        }


        private static MonadPlus<TResult> JoinCore<TSource, TInner, TKey, TResult>(
            MonadPlus<TSource> seq,
            MonadPlus<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, TInner, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
            /* T4: C# indent */
        {
            Require.NotNull(seq, nameof(seq));
            Require.NotNull(resultSelector, nameof(resultSelector));
            Demand.NotNull(inner);
            Demand.NotNull(outerKeySelector);
            Demand.NotNull(innerKeySelector);
            Demand.NotNull(comparer);
            Ensures(Result<MonadPlus<TResult>>() != null);

            var keyLookupM = GetKeyLookup(inner, outerKeySelector, innerKeySelector, comparer);

            return from outerValue in seq
                   from innerValue in keyLookupM.Invoke(outerValue).Then(inner)
                   select resultSelector.Invoke(outerValue, innerValue);
        }

        private static MonadPlus<TResult> GroupJoinCore<TSource, TInner, TKey, TResult>(
            MonadPlus<TSource> seq,
            MonadPlus<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            Func<TSource, MonadPlus<TInner>, TResult> resultSelector,
            IEqualityComparer<TKey> comparer)
            /* T4: C# indent */
        {
            Require.NotNull(seq, nameof(seq));
            Require.NotNull(resultSelector, nameof(resultSelector));
            Demand.NotNull(inner);
            Demand.NotNull(outerKeySelector);
            Demand.NotNull(innerKeySelector);
            Demand.NotNull(comparer);
            Ensures(Result<MonadPlus<TResult>>() != null);

            var keyLookupM = GetKeyLookup(inner, outerKeySelector, innerKeySelector, comparer);

            return from outerValue in seq
                   select resultSelector.Invoke(outerValue, keyLookupM.Invoke(outerValue).Then(inner));
        }

        private static Func<TSource, MonadPlus<TKey>> GetKeyLookup<TSource, TInner, TKey>(
            MonadPlus<TInner> inner,
            Func<TSource, TKey> outerKeySelector,
            Func<TInner, TKey> innerKeySelector,
            IEqualityComparer<TKey> comparer)
            /* T4: C# indent */
        {
            Require.NotNull(inner, nameof(inner));
            Require.NotNull(outerKeySelector, nameof(outerKeySelector));
            Require.NotNull(comparer, nameof(comparer));
            Demand.NotNull(innerKeySelector);
            Ensures(Result<Func<TSource, MonadPlus<TKey>>>() != null);

            return source =>
            {
                TKey outerKey = outerKeySelector.Invoke(source);

                return inner.Select(innerKeySelector).Where(_ => comparer.Equals(_, outerKey));
            };
        }


        #endregion
    } // End of MonadPlus.

    /// <content>
    /// Provides non-standard extension methods for <see cref="MonadPlus{T}" />.
    /// </content>
    public static partial class MonadPlus
    {
        public static MonadPlus<TResult> Coalesce<TSource, TResult>(
            this MonadPlus<TSource> @this,
            Func<TSource, bool> predicate,
            MonadPlus<TResult> then,
            MonadPlus<TResult> otherwise)
            /* T4: C# indent */
        {
            Require.Object(@this);
            Require.NotNull(predicate, nameof(predicate));
            Ensures(Result<MonadPlus<TResult>>() != null);

            return @this.Bind(_ => predicate.Invoke(_) ? then : otherwise);
        }


        public static MonadPlus<TResult> Then<TSource, TResult>(
            this MonadPlus<TSource> @this,
            Func<TSource, bool> predicate,
            MonadPlus<TResult> other)
            /* T4: C# indent */
        {
            Demand.Object(@this);
            Demand.NotNull(predicate);
            Ensures(Result<MonadPlus<TResult>>() != null);

            return @this.Coalesce(predicate, other, MonadPlus<TResult>.Zero);
        }

        public static MonadPlus<TResult> Otherwise<TSource, TResult>(
            this MonadPlus<TSource> @this,
            Func<TSource, bool> predicate,
            MonadPlus<TResult> other)
            /* T4: C# indent */
        {
            Demand.Object(@this);
            Demand.NotNull(predicate);
            Ensures(Result<MonadPlus<TResult>>() != null);

            return @this.Coalesce(predicate, MonadPlus<TResult>.Zero, other);
        }


        public static MonadPlus<TSource> When<TSource>(
            this MonadPlus<TSource> @this,
            bool predicate,
            Action action)
            /* T4: C# indent */
        {
            Require.Object(@this);
            Require.NotNull(action, nameof(action));
            Ensures(Result<MonadPlus<TSource>>() != null);

            if (predicate) { action.Invoke(); }

            return @this;
        }

        public static MonadPlus<TSource> Unless<TSource>(
            this MonadPlus<TSource> @this,
            bool predicate,
            Action action)
            /* T4: C# indent */
        {
            Demand.Object(@this);
            Demand.NotNull(action);
            Ensures(Result<MonadPlus<TSource>>() != null);

            return @this.When(!predicate, action);
        }

        public static MonadPlus<TSource> Invoke<TSource>(
            this MonadPlus<TSource> @this,
            Action<TSource> action)
            /* T4: C# indent */
        {
            Require.Object(@this);
            Require.NotNull(action, nameof(action));
            Ensures(Result<MonadPlus<TSource>>() != null);

            return @this.Bind(_ => { action.Invoke(_); return @this; });
        }


        public static MonadPlus<TSource> OnZero<TSource>(
            this MonadPlus<TSource> @this,
            Action action)
            /* T4: C# indent */
        {
            Require.Object(@this);
            Require.NotNull(action, nameof(action));
            Ensures(Result<MonadPlus<TSource>>() != null);

            // FIXME
            //@this.PlusName(MonadPlus.Unit).Invoke(_ => action.Invoke());

            return @this;
        }

        public static MonadPlus<TSource> Invoke<TSource>(
            this MonadPlus<TSource> @this,
            Action<TSource> action,
            Action caseZero)
            /* T4: C# indent */
        {
            Demand.Object(@this);
            Require.NotNull(action, nameof(action));
            Require.NotNull(caseZero, nameof(caseZero));
            Ensures(Result<MonadPlus<TSource>>() != null);

            return @this.Invoke(action).OnZero(caseZero);
        }

    } // End of MonadPlus.

    /// <content>
    /// Provides extension methods for <see cref="Func{T}"/> in the Kleisli category.
    /// </content>
    public static partial class FuncExtensions
    {
        #region Basic Monad functions (Prelude)


        /// <remarks>
        /// Named <c>mapM</c> in Haskell parlance. Same as <c>forM</c> with its arguments flipped.
        /// </remarks>
        public static MonadPlus<IEnumerable<TResult>> Map<TSource, TResult>(
            this Func<TSource, MonadPlus<TResult>> @this,
            IEnumerable<TSource> seq)
        {
            Demand.Object(@this);
            Demand.NotNull(seq);
            Ensures(Result<MonadPlus<IEnumerable<TResult>>>() != null);

            return seq.ForEachCore(@this);
        }


        /// <remarks>
        /// Named <c>=&lt;&lt;</c> in Haskell parlance.
        /// </remarks>
        public static MonadPlus<TResult> Invoke<TSource, TResult>(
            this Func<TSource, MonadPlus<TResult>> @this,
            MonadPlus<TSource> value)
            /* T4: C# indent */
        {
            Demand.Object(@this);
            Require.NotNull(value, nameof(value));
            Ensures(Result<MonadPlus<TResult>>() != null);

            return value.Bind(@this);
        }

        /// <remarks>
        /// Named <c>&gt;=&gt;</c> in Haskell parlance.
        /// </remarks>
        public static Func<TSource, MonadPlus<TResult>> Compose<TSource, TMiddle, TResult>(
            this Func<TSource, MonadPlus<TMiddle>> @this,
            Func<TMiddle, MonadPlus<TResult>> funM)
            /* T4: C# indent */
        {
            Require.Object(@this);
            Demand.NotNull(funM);
            Ensures(Result<Func<TSource, MonadPlus<TResult>>>() != null);

            return _ => @this.Invoke(_).Bind(funM);
        }

        /// <remarks>
        /// Named <c>&lt;=&lt;</c> in Haskell parlance.
        /// </remarks>
        public static Func<TSource, MonadPlus<TResult>> ComposeBack<TSource, TMiddle, TResult>(
            this Func<TMiddle, MonadPlus<TResult>> @this,
            Func<TSource, MonadPlus<TMiddle>> funM)
            /* T4: C# indent */
        {
            Demand.Object(@this);
            Require.NotNull(funM, nameof(funM));
            Ensures(Result<Func<TSource, MonadPlus<TResult>>>() != null);

            return _ => funM.Invoke(_).Bind(@this);
        }

        #endregion
    } // End of FuncExtensions.
}

namespace Narvalo.Fx.Samples
{
    using System.Collections.Generic;
    using System.Diagnostics.Contracts;

    using Narvalo.Fx.Samples.Internal;

    using static System.Diagnostics.Contracts.Contract;

    /// <content>
    /// Provides extension methods for <see cref="IEnumerable{T}"/> where <c>T</c> is a <see cref="MonadPlus{S}"/>.
    /// </content>
    public static partial class EnumerableExtensions
    {
        #region Basic Monad functions (Prelude)


        /// <remarks>
        /// Named <c>sequence</c> in Haskell parlance.
        /// </remarks>
        public static MonadPlus<IEnumerable<TSource>> Collect<TSource>(
            this IEnumerable<MonadPlus<TSource>> @this)
        {
            Demand.Object(@this);
            Ensures(Result<MonadPlus<IEnumerable<TSource>>>() != null);

            return @this.CollectCore();
        }


        #endregion


        #region Generalisations of list functions (Prelude)

        /// <remarks>
        /// Named <c>msum</c> in Haskell parlance.
        /// </remarks>
        public static MonadPlus<TSource> Sum<TSource>(
            this IEnumerable<MonadPlus<TSource>> @this)
            /* T4: C# indent */
        {
            Demand.Object(@this);
            Ensures(Result<MonadPlus<TSource>>() != null);

            return @this.SumCore();
        }

        #endregion

    } // End of EnumerableExtensions.
}

namespace Narvalo.Fx.Samples.Advanced
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.Contracts;

    using Narvalo.Fx.Samples;
    using Narvalo.Fx.Samples.Internal;

    using static System.Diagnostics.Contracts.Contract;

    /// <content>
    /// Provides extension methods for <see cref="IEnumerable{T}"/>.
    /// </content>
    public static partial class EnumerableExtensions
    {
        #region Basic Monad functions (Prelude)


        /// <remarks>
        /// Named <c>forM</c> in Haskell parlance.
        /// </remarks>
        public static MonadPlus<IEnumerable<TResult>> ForEach<TSource, TResult>(
            this IEnumerable<TSource> @this,
            Func<TSource, MonadPlus<TResult>> funM)
        {
            Demand.Object(@this);
            Demand.NotNull(funM);
            Ensures(Result<MonadPlus<IEnumerable<TResult>>>() != null);

            return @this.ForEachCore(funM);
        }


        #endregion

        #region Generalisations of list functions (Prelude)

        /// <remarks>
        /// <para>Named <c>filterM</c> in Haskell parlance.</para>
        /// <para>Haskell use a different signature.</para>
        /// </remarks>
        public static IEnumerable<TSource> Filter<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, MonadPlus<bool>> predicateM)
            /* T4: C# indent */
        {
            Demand.Object(@this);
            Demand.NotNull(predicateM);
            Ensures(Result<IEnumerable<TSource>>() != null);

            return @this.FilterCore(predicateM);
        }


        /// <remarks>
        /// Named <c>mapAndUnzipM</c> in Haskell parlance.
        /// </remarks>
        public static MonadPlus<Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>>
            MapAndUnzip<TSource, TFirst, TSecond>(
            this IEnumerable<TSource> @this,
            Func<TSource, MonadPlus<Tuple<TFirst, TSecond>>> funM)
        {
            Demand.Object(@this);
            Demand.NotNull(funM);
            Ensures(Result<MonadPlus<Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>>>() != null);

            return @this.MapAndUnzipCore(funM);
        }

        /// <remarks>
        /// Named <c>zipWithM</c> in Haskell parlance.
        /// </remarks>
        public static MonadPlus<IEnumerable<TResult>> Zip<TFirst, TSecond, TResult>(
            this IEnumerable<TFirst> @this,
            IEnumerable<TSecond> second,
            Func<TFirst, TSecond, MonadPlus<TResult>> resultSelectorM)
        {
            Demand.Object(@this);
            Demand.NotNull(second);
            Demand.NotNull(resultSelectorM);
            Ensures(Result<MonadPlus<IEnumerable<TResult>>>() != null);

            return @this.ZipCore(second, resultSelectorM);
        }


        /// <remarks>
        /// Named <c>foldM</c> in Haskell parlance.
        /// </remarks>
        public static MonadPlus<TAccumulate> Fold<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, MonadPlus<TAccumulate>> accumulatorM)
            /* T4: C# indent */
        {
            Demand.Object(@this);
            Demand.NotNull(accumulatorM);
            Ensures(Result<MonadPlus<TAccumulate>>() != null);

            return @this.FoldCore(seed, accumulatorM);
        }

        #endregion

        #region Aggregate Operators

        public static MonadPlus<TAccumulate> FoldBack<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, MonadPlus<TAccumulate>> accumulatorM)
            /* T4: C# indent */
        {
            Demand.Object(@this);
            Demand.NotNull(accumulatorM);
            Ensures(Result<MonadPlus<TAccumulate>>() != null);

            return @this.FoldBackCore(seed, accumulatorM);
        }

        public static MonadPlus<TSource> Reduce<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, MonadPlus<TSource>> accumulatorM)
            /* T4: C# indent */
        {
            Demand.Object(@this);
            Demand.NotNull(accumulatorM);
            Ensures(Result<MonadPlus<TSource>>() != null);

            return @this.ReduceCore(accumulatorM);
        }

        public static MonadPlus<TSource> ReduceBack<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, MonadPlus<TSource>> accumulatorM)
            /* T4: C# indent */
        {
            Demand.Object(@this);
            Demand.NotNull(accumulatorM);
            Ensures(Result<MonadPlus<TSource>>() != null);

            return @this.ReduceBackCore(accumulatorM);
        }

        #endregion

        #region Catamorphisms

        /// <remarks>
        /// <para>Haskell use a different signature.</para>
        /// </remarks>
        public static MonadPlus<TAccumulate> Fold<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, MonadPlus<TAccumulate>> accumulatorM,
            Func<MonadPlus<TAccumulate>, bool> predicate)
            /* T4: C# indent */
        {
            Demand.Object(@this);
            Demand.NotNull(accumulatorM);
            Demand.NotNull(predicate);
            Ensures(Result<MonadPlus<TAccumulate>>() != null);

            return @this.FoldCore(seed, accumulatorM, predicate);
        }

        /// <remarks>
        /// <para>Haskell use a different signature.</para>
        /// </remarks>
        public static MonadPlus<TSource> Reduce<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, MonadPlus<TSource>> accumulatorM,
            Func<MonadPlus<TSource>, bool> predicate)
            /* T4: C# indent */
        {
            Demand.Object(@this);
            Demand.NotNull(accumulatorM);
            Demand.NotNull(predicate);
            Ensures(Result<MonadPlus<TSource>>() != null);

            return @this.ReduceCore(accumulatorM, predicate);
        }

        #endregion
    } // End of EnumerableExtensions.
}

namespace Narvalo.Fx.Samples.Internal
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Diagnostics.Contracts;
    using System.Linq;

    using global::Narvalo;
    using global::Narvalo.Fx; // Required for EmptyIfNull().
    using Narvalo.Fx.Samples;
    using Narvalo.Fx.Samples.Advanced;

    using static System.Diagnostics.Contracts.Contract;

    /// <content>
    /// Provides the core extension methods for <see cref="IEnumerable{T}"/> where <c>T</c> is a <see cref="Maybe{S}"/>.
    /// </content>
    internal static partial class EnumerableExtensions
    {


        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static MonadPlus<IEnumerable<TSource>> CollectCore<TSource>(
            this IEnumerable<MonadPlus<TSource>> @this)
        {
            Demand.Object(@this);
            Ensures(Result<MonadPlus<IEnumerable<TSource>>>() != null);

            var seed = MonadPlus.Return(Enumerable.Empty<TSource>());
            Func<MonadPlus<IEnumerable<TSource>>, MonadPlus<TSource>, MonadPlus<IEnumerable<TSource>>> fun
                = (m, n) => m.Bind(list => CollectCore(n, list));

            var retval = @this.Aggregate(seed, fun);
            Contract.Assume(retval != null);

            return retval;
        }

        // NB: We do not inline this method to avoid the creation of an unused private field (CA1823 warning).
        private static MonadPlus<IEnumerable<TSource>> CollectCore<TSource>(
            MonadPlus<TSource> m,
            IEnumerable<TSource> list)
        {
            Demand.NotNull(m);

            return m.Bind(item => MonadPlus.Return(list.Concat(Enumerable.Repeat(item, 1))));
        }


        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static MonadPlus<TSource> SumCore<TSource>(
            this IEnumerable<MonadPlus<TSource>> @this)
            /* T4: C# indent */
        {
            Demand.Object(@this);
            Ensures(Result<MonadPlus<TSource>>() != null);

            var retval = @this.Aggregate(MonadPlus<TSource>.Zero, (m, n) => m.Plus(n));
            Contract.Assume(retval != null);

            return retval;
        }

    } // End of EnumerableExtensions.

    /// <content>
    /// Provides the core extension methods for <see cref="IEnumerable{T}"/>.
    /// </content>
    internal static partial class EnumerableExtensions
    {


        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static MonadPlus<IEnumerable<TResult>> ForEachCore<TSource, TResult>(
            this IEnumerable<TSource> @this,
            Func<TSource, MonadPlus<TResult>> funM)
        {
            Demand.Object(@this);
            Demand.NotNull(funM);
            Ensures(Result<MonadPlus<IEnumerable<TResult>>>() != null);

            return @this.Select(funM).EmptyIfNull().Collect();
        }


        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static IEnumerable<TSource> FilterCore<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, MonadPlus<bool>> predicateM)
            /* T4: C# indent */
        {
            Require.Object(@this);
            Require.NotNull(predicateM, nameof(predicateM));
            Ensures(Result<IEnumerable<TSource>>() != null);

            // NB: Haskell uses tail recursion, we don't.
            var list = new List<TSource>();

            foreach (var item in @this)
            {
                var m = predicateM.Invoke(item);

                if (m != null)
                {
                    m.Invoke(
                        _ =>
                        {
                            if (_ == true)
                            {
                                list.Add(item);
                            }
                        });
                }
            }

            return list;
        }


        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static MonadPlus<Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>>
            MapAndUnzipCore<TSource, TFirst, TSecond>(
            this IEnumerable<TSource> @this,
            Func<TSource, MonadPlus<Tuple<TFirst, TSecond>>> funM)
        {
            Demand.Object(@this);
            Demand.NotNull(funM);
            Ensures(Result<MonadPlus<Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>>>() != null);

            var m = @this.Select(funM).EmptyIfNull().Collect();

            return m.Select(
                tuples =>
                {
                    IEnumerable<TFirst> list1 = tuples.Select(_ => _.Item1);
                    IEnumerable<TSecond> list2 = tuples.Select(_ => _.Item2);

                    return new Tuple<IEnumerable<TFirst>, IEnumerable<TSecond>>(list1, list2);
                });
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static MonadPlus<IEnumerable<TResult>> ZipCore<TFirst, TSecond, TResult>(
            this IEnumerable<TFirst> @this,
            IEnumerable<TSecond> second,
            Func<TFirst, TSecond, MonadPlus<TResult>> resultSelectorM)
        {
            Require.NotNull(resultSelectorM, nameof(resultSelectorM));

            Demand.Object(@this);
            Demand.NotNull(second);
            Ensures(Result<MonadPlus<IEnumerable<TResult>>>() != null);

            Func<TFirst, TSecond, MonadPlus<TResult>> resultSelector
                = (v1, v2) => resultSelectorM.Invoke(v1, v2);

            // WARNING: Do not remove "resultSelector", otherwise .NET will make a recursive call
            // instead of using the Zip from LINQ.
            return @this.Zip(second, resultSelector: resultSelector).EmptyIfNull().Collect();
        }


        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static MonadPlus<TAccumulate> FoldCore<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, MonadPlus<TAccumulate>> accumulatorM)
            /* T4: C# indent */
        {
            Require.Object(@this);
            Require.NotNull(accumulatorM, nameof(accumulatorM));
            Ensures(Result<MonadPlus<TAccumulate>>() != null);

            MonadPlus<TAccumulate> retval = MonadPlus.Return(seed);

            foreach (TSource item in @this)
            {
                retval = retval.Bind(_ => accumulatorM.Invoke(_, item));
            }

            return retval;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static MonadPlus<TAccumulate> FoldBackCore<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, MonadPlus<TAccumulate>> accumulatorM)
            /* T4: C# indent */
        {
            Demand.Object(@this);
            Demand.NotNull(accumulatorM);
            Ensures(Result<MonadPlus<TAccumulate>>() != null);

            return @this.Reverse().EmptyIfNull().Fold(seed, accumulatorM);
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static MonadPlus<TSource> ReduceCore<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, MonadPlus<TSource>> accumulatorM)
            /* T4: C# indent */
        {
            Require.Object(@this);
            Require.NotNull(accumulatorM, nameof(accumulatorM));
            Ensures(Result<MonadPlus<TSource>>() != null);

            using (var iter = @this.GetEnumerator())
            {
                if (!iter.MoveNext())
                {
                    throw new InvalidOperationException("Source sequence was empty.");
                }

                MonadPlus<TSource> retval = MonadPlus.Return(iter.Current);

                while (iter.MoveNext())
                {
                    retval = retval.Bind(_ => accumulatorM.Invoke(_, iter.Current));
                }

                return retval;
            }
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static MonadPlus<TSource> ReduceBackCore<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, MonadPlus<TSource>> accumulatorM)
            /* T4: C# indent */
        {
            Demand.Object(@this);
            Demand.NotNull(accumulatorM);
            Ensures(Result<MonadPlus<TSource>>() != null);

            return @this.Reverse().EmptyIfNull().Reduce(accumulatorM);
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static MonadPlus<TAccumulate> FoldCore<TSource, TAccumulate>(
            this IEnumerable<TSource> @this,
            TAccumulate seed,
            Func<TAccumulate, TSource, MonadPlus<TAccumulate>> accumulatorM,
            Func<MonadPlus<TAccumulate>, bool> predicate)
            /* T4: C# indent */
        {
            Require.Object(@this);
            Require.NotNull(accumulatorM, nameof(accumulatorM));
            Require.NotNull(predicate, nameof(predicate));
            Ensures(Result<MonadPlus<TAccumulate>>() != null);

            MonadPlus<TAccumulate> retval = MonadPlus.Return(seed);

            using (var iter = @this.GetEnumerator())
            {
                while (predicate.Invoke(retval) && iter.MoveNext())
                {
                    retval = retval.Bind(_ => accumulatorM.Invoke(_, iter.Current));
                }
            }

            return retval;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode",
            Justification = "[GeneratedCode] This method has been overridden locally.")]
        internal static MonadPlus<TSource> ReduceCore<TSource>(
            this IEnumerable<TSource> @this,
            Func<TSource, TSource, MonadPlus<TSource>> accumulatorM,
            Func<MonadPlus<TSource>, bool> predicate)
            /* T4: C# indent */
        {
            Require.Object(@this);
            Require.NotNull(accumulatorM, nameof(accumulatorM));
            Require.NotNull(predicate, nameof(predicate));
            Ensures(Result<MonadPlus<TSource>>() != null);

            using (var iter = @this.GetEnumerator())
            {
                if (!iter.MoveNext())
                {
                    throw new InvalidOperationException("Source sequence was empty.");
                }

                MonadPlus<TSource> retval = MonadPlus.Return(iter.Current);

                while (predicate.Invoke(retval) && iter.MoveNext())
                {
                    retval = retval.Bind(_ => accumulatorM.Invoke(_, iter.Current));
                }

                return retval;
            }
        }
    } // End of EnumerableExtensions.
}

