<#@ template language="C#" debug="false" hostspecific="true" inherits="Iso4217Template" #>
<#@ output extension=".g.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(T4NarvaloLibrary)" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Narvalo.T4" #>
<#

var currentCurrencies = ParseCurrent(@"..\..\..\src\Narvalo.Finance\Resources\ISO4217\A1.xml");
var legacyCurrencies = ParseLegacy(@"..\..\..\src\Narvalo.Finance\Resources\ISO4217\A3.xml");
var currencies = currentCurrencies.Concat(legacyCurrencies);

var codeSet = new HashSet<string>();

WriteHeader();

#>

namespace <#= Namespace #>
{
    using System;
    using System.Diagnostics.CodeAnalysis;

    using Narvalo.Finance.Currencies;
    using Xunit;

    public static partial class CurrencyFacts
    {
        #region Built-In Currencies

        [Fact]
        [SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode", Justification = "[Intentionally] Testing all currencies in a row.")]
        [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "[Intentionally] Testing all currencies in a row.")]
        public static void BuiltInCurrencies_AreNotNull()
        {
<#
    foreach (var currency in currencies.OrderBy(_ => _.Code))
    {
        if (codeSet.Contains(currency.Code))
        {
            continue;
        }

        codeSet.Add(currency.Code);
#>
            Assert.True(<#= currency.Code #>.Currency != null);
<#
    }
#>
        }

        [Fact]
        [SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode", Justification = "[Intentionally] Testing all currencies in a row.")]
        [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "[Intentionally] Testing all currencies in a row.")]
        public static void BuiltInCurrencies_SatisfyStructuralEqualityRules()
        {
            // Act & Assert
<#
    foreach (var code in codeSet)
    {
#>
            Assert.True(<#= code #>.Currency.Equals(Currency.Of("<#= code #>")));
            Assert.True(<#= code #>.Currency == Currency.Of("<#= code #>"));
            Assert.True(Object.ReferenceEquals(Currency.Of("<#= code #>"), Currency.Of("<#= code #>")));
            Assert.False(Object.ReferenceEquals(<#= code #>.Currency, Currency.Of("<#= code #>")));

<#
    }
#>
        }

        #endregion

        #region ToString()

        [Fact]
        [SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode", Justification = "[Intentionally] Testing all currencies in a row.")]
        [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "[Intentionally] Testing all currencies in a row.")]
        public static void ToString_ReturnsNotNull()
        {
            // Act & Assert
<#
    foreach (var code in codeSet)
    {
#>
            Assert.True(<#= code #>.Currency.ToString() != null);
<#
    }
#>
        }

        #endregion
    }
}