<#@ include file="..\..\..\src\Narvalo.Finance\CodeTemplates\Iso4217.tt" #>
<#

var currentCurrencies = ParseCurrent(@"..\..\..\src\Narvalo.Finance\Resources\ISO4217\20150101\A1.xml");
var legacyCurrencies = ParseLegacy(@"..\..\..\src\Narvalo.Finance\Resources\ISO4217\20150101\A3.xml");
var currencies = currentCurrencies.Concat(legacyCurrencies);

var codeSet = new HashSet<string>();

#>
// Copyright (c) Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
//
// Runtime Version: <#= System.Environment.Version #>
// </auto-generated>
//------------------------------------------------------------------------------

using global::System.Diagnostics.CodeAnalysis;

[module: SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1508:ClosingCurlyBracketsMustNotBePrecededByBlankLine",
    Justification = "[GeneratedCode] Newline rule disabled for T4 templates.")]

namespace <#= InferNamespace() #>
{
    using System;

    using Narvalo.Finance.Currencies;
    using Xunit;
    
    [SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode",
        Justification = "[Intentionally] Testing all currencies in a row.")]
    [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling",
        Justification = "[Intentionally] Testing all currencies in a row.")]
    public static partial class CurrencyFacts
    {
        #region Built-In Currencies

        [Fact]
        [SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode",
            Justification = "[Intentionally] Testing all currencies in a row.")]
        [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling",
            Justification = "[Intentionally] Testing all currencies in a row.")]
        public static void BuiltInCurrencies_AreNotNull()
        {
            // Act & Assert
<#
    foreach (var currency in currencies.OrderBy(_ => _.Code))
    {
        if (codeSet.Contains(currency.Code))
        {
            continue;
        }

        codeSet.Add(currency.Code);
#>
            Assert.True(<#= currency.Code #>.Currency != null);
<#
    }
#>
        }
        
        [Fact]
        [SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode",
            Justification = "[Intentionally] Testing all currencies in a row.")]
        [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling",
            Justification = "[Intentionally] Testing all currencies in a row.")]
        public static void BuiltInCurrencies_SatisfyStructuralEqualityRules()
        {
            // Act & Assert
<#
    foreach (var code in codeSet)
    {
#>
            Assert.True(<#= code #>.Currency.Equals(Currency.Of("<#= code #>")));
            Assert.True(<#= code #>.Currency == Currency.Of("<#= code #>"));
            Assert.True(Object.ReferenceEquals(Currency.Of("<#= code #>"), Currency.Of("<#= code #>")));
            Assert.False(Object.ReferenceEquals(<#= code #>.Currency, Currency.Of("<#= code #>")));

<#
    }
#>
        }

        #endregion

        #region ToString()
        
        [Fact]
        [SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode",
            Justification = "[Intentionally] Testing all currencies in a row.")]
        [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling",
            Justification = "[Intentionally] Testing all currencies in a row.")]
        public static void ToString_ReturnsNotNull()
        {
            // Act & Assert
<#
    foreach (var code in codeSet)
    {
#>
            Assert.True(<#= code #>.Currency.ToString() != null);
<#
    }
#>
        }

        #endregion
    }
}