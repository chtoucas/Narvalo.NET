// Copyright (c) Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
//
// Runtime Version: 4.0.30319.42000
// Microsoft.VisualStudio.TextTemplating: 15.0
// </auto-generated>
//------------------------------------------------------------------------------

namespace Narvalo.Applicative {
    using System;

    using FsCheck.Xunit;
    using Xunit;

    // T4: EmitMonadCore().
    public static partial class EitherFacts {
        internal sealed class tAttribute : FactAttribute {
            public tAttribute(string description) : base() {
                DisplayName = nameof(Either) + " - " + description;
            }
        }

        internal sealed class TAttribute : TheoryAttribute {
            public TAttribute(string description) : base() {
                DisplayName = nameof(Either) + " - " + description;
            }
        }

        internal sealed class qAttribute : PropertyAttribute {
            public qAttribute(string description) : base() {
                DisplayName = nameof(Either) + " - " + description;
            }
        }
    }

    // Provides tests for Either<T, My.Obj>.
    // T4: EmitMonadGuards().
    public static partial class EitherFacts {
        #region Repeat()

        [t("Repeat() guards.")]
        public static void Repeat0() {
            var source = Either<int, My.Obj>.OfLeft(1);

            Assert.Throws<ArgumentOutOfRangeException>("count", () => Either.Repeat(source, -1));
        }

        #endregion

        #region Zip()

        [t("Zip() guards.")]
        public static void Zip0() {
            var first = Either<int, My.Obj>.OfLeft(1);
            var second = Either<int, My.Obj>.OfLeft(2);
            var third = Either<int, My.Obj>.OfLeft(3);
            var fourth = Either<int, My.Obj>.OfLeft(4);
            var fifth = Either<int, My.Obj>.OfLeft(5);
            Func<int, int, int> zipper2 = null;
            Func<int, int, int, int> zipper3 = null;
            Func<int, int, int, int, int> zipper4 = null;
            Func<int, int, int, int, int, int> zipper5 = null;

            // Extension method.
            Assert.Throws<ArgumentNullException>("zipper", () => first.Zip(second, zipper2));
            Assert.Throws<ArgumentNullException>("zipper", () => first.Zip(second, third, zipper3));
            Assert.Throws<ArgumentNullException>("zipper", () => first.Zip(second, third, fourth, zipper4));
            Assert.Throws<ArgumentNullException>("zipper", () => first.Zip(second, third, fourth, fifth, zipper5));
            // Static method.
            Assert.Throws<ArgumentNullException>("zipper", () => Either.Zip(first, second, zipper2));
            Assert.Throws<ArgumentNullException>("zipper", () => Either.Zip(first, second, third, zipper3));
            Assert.Throws<ArgumentNullException>("zipper", () => Either.Zip(first, second, third, fourth, zipper4));
            Assert.Throws<ArgumentNullException>("zipper", () => Either.Zip(first, second, third, fourth, fifth, zipper5));
        }

        #endregion

        #region Select()

        [t("Select() guards.")]
        public static void Select0() {
            var source = Either<int, My.Obj>.OfLeft(1);
            Func<int, long> selector = null;

            Assert.Throws<ArgumentNullException>("selector", () => source.Select(selector));
            Assert.Throws<ArgumentNullException>("selector", () => Either.Select(source, selector));
        }

        #endregion

        #region SelectMany()

        [t("SelectMany() guards.")]
        public static void SelectMany0() {
            var source = Either<short, My.Obj>.OfLeft(1);
            var middle = Either<int, My.Obj>.OfLeft(2);
            Func<short, Either<int, My.Obj>> valueSelector = i => Either<int, My.Obj>.OfLeft(i);
            Func<short, int, long> resultSelector = (i, j) => i + j;

            // Extension method.
            Assert.Throws<ArgumentNullException>("selector", () => source.SelectMany(null, resultSelector));
            Assert.Throws<ArgumentNullException>("resultSelector", () => source.SelectMany(valueSelector, (Func<short, int, long>)null));
            // Static method.
            Assert.Throws<ArgumentNullException>("selector", () => Either.SelectMany(source, null, resultSelector));
            Assert.Throws<ArgumentNullException>("resultSelector", () => Either.SelectMany(source, valueSelector, (Func<short, int, long>)null));
        }

        #endregion

    }

    // Provides tests for Either<T, My.Obj>: functor, monoid and monad laws.
    // T4: EmitMonadRules().
    public static partial class EitherFacts {
        #region Functor Rules

        [q("The identity map is a fixed point for Select() (first functor rule).")]
        public static bool Select01(int arg) {
            var m = Either<int, My.Obj>.OfLeft(arg);

            // fmap id  ==  id
            var left = m.Select(x => x);
            var right = m;

            return left.Equals(right);
        }

        [q("Select() preserves the composition operator (second functor rule).")]
        public static bool Select02(short arg0, int arg1, long arg2) {
            var m = Either<short, My.Obj>.OfLeft(arg0);
            Func<short, int> g = x => arg1 * x;
            Func<int, long> f = x => arg2 * x;

            // fmap (f . g)  ==  fmap f . fmap g
            var left = m.Select(val => f(g(val)));
            var right = m.Select(g).Select(f);

            return left.Equals(right);
        }

        #endregion

        #region Monad Rules

        [q("Of() is a left identity for Bind() (first monad rule).")]
        public static bool Of01(int arg0, float arg1) {
            Func<int, Either<float, My.Obj>> f = x => Either<float, My.Obj>.OfLeft(arg1 * x);

            // return a >>= k  ==  k a
            var left = Either<int, My.Obj>.OfLeft(arg0).Bind(f);
            var right = f(arg0);

            return left.Equals(right);
        }

        [q("Of() is a left identity for Compose() (first monad rule).")]
        public static bool Of02(int arg0, float arg1) {
            Func<int, Either<int, My.Obj>> of = Either<int, My.Obj>.OfLeft;
            Func<int, Either<float, My.Obj>> f = x => Either<float, My.Obj>.OfLeft(arg1 * x);

            // return >=> g  ==  g
            var left = of.Compose(f).Invoke(arg0);
            var right = f(arg0);

            return left.Equals(right);
        }

        [q("Of() is a right identity for Bind() (second monad rule).")]
        public static bool Of03(int arg0) {
            var m = Either<int, My.Obj>.OfLeft(arg0);

            // m >>= return  ==  m
            var left = m.Bind(Either<int, My.Obj>.OfLeft);
            var right = m;

            return left.Equals(right);
        }

        [q("Of() is a right identity for Compose() (second monad rule).")]
        public static bool Of04(int arg0, float arg1) {
            Func<int, Either<float, My.Obj>> f = x => Either<float, My.Obj>.OfLeft(arg1 * x);

            // f >=> return  ==  f
            var left = f.Compose(Either<float, My.Obj>.OfLeft).Invoke(arg0);
            var right = f(arg0);

            return left.Equals(right);
        }

        [q("Bind() is associative (third monad rule).")]
        public static bool Bind01(short arg0, int arg1, long arg2) {
            var m = Either<short, My.Obj>.OfLeft(arg0);

            Func<short, Either<int, My.Obj>> f = x => Either<int, My.Obj>.OfLeft(arg1 * x);
            Func<int, Either<long, My.Obj>> g = x => Either<long, My.Obj>.OfLeft(arg2 * x);

            // m >>= (\x -> f x >>= g)  ==  (m >>= f) >>= g
            var left = m.Bind(f).Bind(g);
            var right = m.Bind(val => f(val).Bind(g));

            return left.Equals(right);
        }

        [q("Compose() is associative (third monad rule).")]
        public static bool Compose01(short arg0, int arg1, long arg2, double arg3) {
            Func<short, Either<int, My.Obj>> f = x => Either<int, My.Obj>.OfLeft(arg1 * x);
            Func<int, Either<long, My.Obj>> g = x => Either<long, My.Obj>.OfLeft(arg2 * x);
            Func<long, Either<double, My.Obj>> h = x => Either<double, My.Obj>.OfLeft(arg3 * x);

            // f >=> (g >=> h)  ==  (f >=> g) >=> h
            var left = f.Compose(g.Compose(h)).Invoke(arg0);
            var right = f.Compose(g).Compose(h).Invoke(arg0);

            return left.Equals(right);
        }

        #endregion
    }
}

