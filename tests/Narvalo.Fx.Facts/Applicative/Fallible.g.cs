// Copyright (c) Narvalo.Org. All rights reserved. See LICENSE.txt in the project root for license information.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behavior and will be lost if the code is regenerated.
//
// Runtime Version: 4.0.30319.42000
// Microsoft.VisualStudio.TextTemplating: 14.0
// </auto-generated>
//------------------------------------------------------------------------------

namespace Narvalo.Applicative
{
    using System;

    using Xunit;

    public static partial class FallibleFacts
    {
        #region Linq Operators

        [Fact]
        public static void Select_ThrowsArgumentNullException_ForNullSelector()
        {
            // Arrange
            var source = Fallible.Of(1);
            Func<int, int> selector = null;

            // Act & Assert
            Assert.Throws<ArgumentNullException>(() => source.Select(selector));
        }


        [Fact]
        public static void SelectMany_ThrowsArgumentNullException_ForNullValueSelector()
        {
            // Arrange
            var source = Fallible.Of(1);
            Func<int, Fallible<int>> valueSelector = null;
            Func<int, int, int> resultSelector = (i, j) => i + j;

            // Act & Assert
            Assert.Throws<ArgumentNullException>(() => source.SelectMany(valueSelector, resultSelector));
        }

        [Fact]
        public static void SelectMany_ThrowsArgumentNullException_ForNullResultSelector()
        {
            // Arrange
            var source = Fallible.Of(1);
            var middle = Fallible.Of(2);
            Func<int, Fallible<int>> valueSelector = _ => middle;
            Func<int, int, int> resultSelector = null;

            // Act & Assert
            Assert.Throws<ArgumentNullException>(() => source.SelectMany(valueSelector, resultSelector));
        }

        #endregion

        #region Monad Laws


        [Fact]
        public static void Fallible_SatisfiesFirstMonadLaw()
        {
            // Arrange
            int value = 1;
            Func<int, Fallible<long>> kun = _ => Fallible.Of((long)2 * _);

            // Act
            var left = Fallible.Of(value).Bind(kun);
            var right = kun(value);

            // Assert
            Assert.True(left.Equals(right));
        }

        [Fact]
        public static void Fallible_SatisfiesSecondMonadLaw()
        {
            // Arrange
            Func<int, Fallible<int>> create = _ => Fallible.Of(_);
            var monad = Fallible.Of(1);

            // Act
            var left = monad.Bind(create);
            var right = monad;

            // Assert
            Assert.True(left.Equals(right));
        }

        [Fact]
        public static void Fallible_SatisfiesThirdMonadLaw()
        {
            // Arrange
            Fallible<short> m = Fallible.Of((short)1);
            Func<short, Fallible<int>> f = _ => Fallible.Of((int)3 * _);
            Func<int, Fallible<long>> g = _ => Fallible.Of((long)2 * _);

            // Act
            var left = m.Bind(f).Bind(g);
            var right = m.Bind(_ => f(_).Bind(g));

            // Assert
            Assert.True(left.Equals(right));
        }


        #endregion
    } // End of Fallible - T4: EmitFacts().
} // End of Narvalo.Applicative.

